// Code generated by Thrift Compiler (0.14.2). DO NOT EDIT.

package general

import(
	"bytes"
	"context"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type AccessID int64

func AccessIDPtr(v AccessID) *AccessID { return &v }

type Address []byte

func AddressPtr(v Address) *Address { return &v }

// Attributes:
//  - ByteCodeObjects
//  - Instance
type ClassObject struct {
  ByteCodeObjects []*ByteCodeObject `thrift:"byteCodeObjects,1" db:"byteCodeObjects" json:"byteCodeObjects"`
  Instance []byte `thrift:"instance,2" db:"instance" json:"instance"`
}

func NewClassObject() *ClassObject {
  return &ClassObject{}
}


func (p *ClassObject) GetByteCodeObjects() []*ByteCodeObject {
  return p.ByteCodeObjects
}

func (p *ClassObject) GetInstance() []byte {
  return p.Instance
}
func (p *ClassObject) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClassObject)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ByteCodeObject, 0, size)
  p.ByteCodeObjects =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &ByteCodeObject{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.ByteCodeObjects = append(p.ByteCodeObjects, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ClassObject)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Instance = v
}
  return nil
}

func (p *ClassObject) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ClassObject"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClassObject) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "byteCodeObjects", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:byteCodeObjects: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ByteCodeObjects)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ByteCodeObjects {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:byteCodeObjects: ", p), err) }
  return err
}

func (p *ClassObject) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "instance", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:instance: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Instance); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.instance (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:instance: ", p), err) }
  return err
}

func (p *ClassObject) Equals(other *ClassObject) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.ByteCodeObjects) != len(other.ByteCodeObjects) { return false }
  for i, _tgt := range p.ByteCodeObjects {
    _src1 := other.ByteCodeObjects[i]
    if !_tgt.Equals(_src1) { return false }
  }
  if bytes.Compare(p.Instance, other.Instance) != 0 { return false }
  return true
}

func (p *ClassObject) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClassObject(%+v)", *p)
}

// Attributes:
//  - NameClass
//  - Instance
type Object struct {
  NameClass string `thrift:"nameClass,1" db:"nameClass" json:"nameClass"`
  Instance []byte `thrift:"instance,2" db:"instance" json:"instance"`
}

func NewObject() *Object {
  return &Object{}
}


func (p *Object) GetNameClass() string {
  return p.NameClass
}

func (p *Object) GetInstance() []byte {
  return p.Instance
}
func (p *Object) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Object)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NameClass = v
}
  return nil
}

func (p *Object)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Instance = v
}
  return nil
}

func (p *Object) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "object"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Object) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nameClass", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nameClass: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NameClass)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nameClass (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nameClass: ", p), err) }
  return err
}

func (p *Object) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "instance", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:instance: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Instance); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.instance (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:instance: ", p), err) }
  return err
}

func (p *Object) Equals(other *Object) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.NameClass != other.NameClass { return false }
  if bytes.Compare(p.Instance, other.Instance) != 0 { return false }
  return true
}

func (p *Object) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Object(%+v)", *p)
}

// Attributes:
//  - Integral
//  - Fraction
type Amount struct {
  Integral int32 `thrift:"integral,1,required" db:"integral" json:"integral"`
  Fraction int64 `thrift:"fraction,2,required" db:"fraction" json:"fraction"`
}

func NewAmount() *Amount {
  return &Amount{}
}


func (p *Amount) GetIntegral() int32 {
  return p.Integral
}

func (p *Amount) GetFraction() int64 {
  return p.Fraction
}
func (p *Amount) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIntegral bool = false;
  var issetFraction bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetIntegral = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetFraction = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIntegral{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Integral is not set"));
  }
  if !issetFraction{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Fraction is not set"));
  }
  return nil
}

func (p *Amount)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Integral = v
}
  return nil
}

func (p *Amount)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Fraction = v
}
  return nil
}

func (p *Amount) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Amount"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Amount) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "integral", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:integral: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Integral)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.integral (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:integral: ", p), err) }
  return err
}

func (p *Amount) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fraction", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fraction: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fraction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fraction (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fraction: ", p), err) }
  return err
}

func (p *Amount) Equals(other *Amount) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Integral != other.Integral { return false }
  if p.Fraction != other.Fraction { return false }
  return true
}

func (p *Amount) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Amount(%+v)", *p)
}

// Attributes:
//  - VNull
//  - VVoid
//  - VBoolean
//  - VBooleanBox
//  - VByte
//  - VByteBox
//  - VShort
//  - VShortBox
//  - VInt
//  - VIntBox
//  - VLong
//  - VLongBox
//  - VFloat
//  - VFloatBox
//  - VDouble
//  - VDoubleBox
//  - VString
//  - VObject
//  - VArray
//  - VList
//  - VSet
//  - VMap
//  - VBigDecimal
//  - VAmount
//  - VByteArray
type Variant struct {
  VNull *string `thrift:"v_null,1" db:"v_null" json:"v_null,omitempty"`
  VVoid *int8 `thrift:"v_void,2" db:"v_void" json:"v_void,omitempty"`
  VBoolean *bool `thrift:"v_boolean,3" db:"v_boolean" json:"v_boolean,omitempty"`
  VBooleanBox *bool `thrift:"v_boolean_box,4" db:"v_boolean_box" json:"v_boolean_box,omitempty"`
  VByte *int8 `thrift:"v_byte,5" db:"v_byte" json:"v_byte,omitempty"`
  VByteBox *int8 `thrift:"v_byte_box,6" db:"v_byte_box" json:"v_byte_box,omitempty"`
  VShort *int16 `thrift:"v_short,7" db:"v_short" json:"v_short,omitempty"`
  VShortBox *int16 `thrift:"v_short_box,8" db:"v_short_box" json:"v_short_box,omitempty"`
  VInt *int32 `thrift:"v_int,9" db:"v_int" json:"v_int,omitempty"`
  VIntBox *int32 `thrift:"v_int_box,10" db:"v_int_box" json:"v_int_box,omitempty"`
  VLong *int64 `thrift:"v_long,11" db:"v_long" json:"v_long,omitempty"`
  VLongBox *int64 `thrift:"v_long_box,12" db:"v_long_box" json:"v_long_box,omitempty"`
  VFloat *float64 `thrift:"v_float,13" db:"v_float" json:"v_float,omitempty"`
  VFloatBox *float64 `thrift:"v_float_box,14" db:"v_float_box" json:"v_float_box,omitempty"`
  VDouble *float64 `thrift:"v_double,15" db:"v_double" json:"v_double,omitempty"`
  VDoubleBox *float64 `thrift:"v_double_box,16" db:"v_double_box" json:"v_double_box,omitempty"`
  VString *string `thrift:"v_string,17" db:"v_string" json:"v_string,omitempty"`
  VObject *Object `thrift:"v_object,18" db:"v_object" json:"v_object,omitempty"`
  VArray []*Variant `thrift:"v_array,19" db:"v_array" json:"v_array,omitempty"`
  VList []*Variant `thrift:"v_list,20" db:"v_list" json:"v_list,omitempty"`
  VSet []*Variant `thrift:"v_set,21" db:"v_set" json:"v_set,omitempty"`
  VMap map[*Variant]*Variant `thrift:"v_map,22" db:"v_map" json:"v_map,omitempty"`
  VBigDecimal *string `thrift:"v_big_decimal,23" db:"v_big_decimal" json:"v_big_decimal,omitempty"`
  VAmount *Amount `thrift:"v_amount,24" db:"v_amount" json:"v_amount,omitempty"`
  VByteArray []byte `thrift:"v_byte_array,25" db:"v_byte_array" json:"v_byte_array,omitempty"`
}

func NewVariant() *Variant {
  return &Variant{}
}

var Variant_VNull_DEFAULT string
func (p *Variant) GetVNull() string {
  if !p.IsSetVNull() {
    return Variant_VNull_DEFAULT
  }
return *p.VNull
}
var Variant_VVoid_DEFAULT int8
func (p *Variant) GetVVoid() int8 {
  if !p.IsSetVVoid() {
    return Variant_VVoid_DEFAULT
  }
return *p.VVoid
}
var Variant_VBoolean_DEFAULT bool
func (p *Variant) GetVBoolean() bool {
  if !p.IsSetVBoolean() {
    return Variant_VBoolean_DEFAULT
  }
return *p.VBoolean
}
var Variant_VBooleanBox_DEFAULT bool
func (p *Variant) GetVBooleanBox() bool {
  if !p.IsSetVBooleanBox() {
    return Variant_VBooleanBox_DEFAULT
  }
return *p.VBooleanBox
}
var Variant_VByte_DEFAULT int8
func (p *Variant) GetVByte() int8 {
  if !p.IsSetVByte() {
    return Variant_VByte_DEFAULT
  }
return *p.VByte
}
var Variant_VByteBox_DEFAULT int8
func (p *Variant) GetVByteBox() int8 {
  if !p.IsSetVByteBox() {
    return Variant_VByteBox_DEFAULT
  }
return *p.VByteBox
}
var Variant_VShort_DEFAULT int16
func (p *Variant) GetVShort() int16 {
  if !p.IsSetVShort() {
    return Variant_VShort_DEFAULT
  }
return *p.VShort
}
var Variant_VShortBox_DEFAULT int16
func (p *Variant) GetVShortBox() int16 {
  if !p.IsSetVShortBox() {
    return Variant_VShortBox_DEFAULT
  }
return *p.VShortBox
}
var Variant_VInt_DEFAULT int32
func (p *Variant) GetVInt() int32 {
  if !p.IsSetVInt() {
    return Variant_VInt_DEFAULT
  }
return *p.VInt
}
var Variant_VIntBox_DEFAULT int32
func (p *Variant) GetVIntBox() int32 {
  if !p.IsSetVIntBox() {
    return Variant_VIntBox_DEFAULT
  }
return *p.VIntBox
}
var Variant_VLong_DEFAULT int64
func (p *Variant) GetVLong() int64 {
  if !p.IsSetVLong() {
    return Variant_VLong_DEFAULT
  }
return *p.VLong
}
var Variant_VLongBox_DEFAULT int64
func (p *Variant) GetVLongBox() int64 {
  if !p.IsSetVLongBox() {
    return Variant_VLongBox_DEFAULT
  }
return *p.VLongBox
}
var Variant_VFloat_DEFAULT float64
func (p *Variant) GetVFloat() float64 {
  if !p.IsSetVFloat() {
    return Variant_VFloat_DEFAULT
  }
return *p.VFloat
}
var Variant_VFloatBox_DEFAULT float64
func (p *Variant) GetVFloatBox() float64 {
  if !p.IsSetVFloatBox() {
    return Variant_VFloatBox_DEFAULT
  }
return *p.VFloatBox
}
var Variant_VDouble_DEFAULT float64
func (p *Variant) GetVDouble() float64 {
  if !p.IsSetVDouble() {
    return Variant_VDouble_DEFAULT
  }
return *p.VDouble
}
var Variant_VDoubleBox_DEFAULT float64
func (p *Variant) GetVDoubleBox() float64 {
  if !p.IsSetVDoubleBox() {
    return Variant_VDoubleBox_DEFAULT
  }
return *p.VDoubleBox
}
var Variant_VString_DEFAULT string
func (p *Variant) GetVString() string {
  if !p.IsSetVString() {
    return Variant_VString_DEFAULT
  }
return *p.VString
}
var Variant_VObject_DEFAULT *Object
func (p *Variant) GetVObject() *Object {
  if !p.IsSetVObject() {
    return Variant_VObject_DEFAULT
  }
return p.VObject
}
var Variant_VArray_DEFAULT []*Variant

func (p *Variant) GetVArray() []*Variant {
  return p.VArray
}
var Variant_VList_DEFAULT []*Variant

func (p *Variant) GetVList() []*Variant {
  return p.VList
}
var Variant_VSet_DEFAULT []*Variant

func (p *Variant) GetVSet() []*Variant {
  return p.VSet
}
var Variant_VMap_DEFAULT map[*Variant]*Variant

func (p *Variant) GetVMap() map[*Variant]*Variant {
  return p.VMap
}
var Variant_VBigDecimal_DEFAULT string
func (p *Variant) GetVBigDecimal() string {
  if !p.IsSetVBigDecimal() {
    return Variant_VBigDecimal_DEFAULT
  }
return *p.VBigDecimal
}
var Variant_VAmount_DEFAULT *Amount
func (p *Variant) GetVAmount() *Amount {
  if !p.IsSetVAmount() {
    return Variant_VAmount_DEFAULT
  }
return p.VAmount
}
var Variant_VByteArray_DEFAULT []byte

func (p *Variant) GetVByteArray() []byte {
  return p.VByteArray
}
func (p *Variant) CountSetFieldsVariant() int {
  count := 0
  if (p.IsSetVNull()) {
    count++
  }
  if (p.IsSetVVoid()) {
    count++
  }
  if (p.IsSetVBoolean()) {
    count++
  }
  if (p.IsSetVBooleanBox()) {
    count++
  }
  if (p.IsSetVByte()) {
    count++
  }
  if (p.IsSetVByteBox()) {
    count++
  }
  if (p.IsSetVShort()) {
    count++
  }
  if (p.IsSetVShortBox()) {
    count++
  }
  if (p.IsSetVInt()) {
    count++
  }
  if (p.IsSetVIntBox()) {
    count++
  }
  if (p.IsSetVLong()) {
    count++
  }
  if (p.IsSetVLongBox()) {
    count++
  }
  if (p.IsSetVFloat()) {
    count++
  }
  if (p.IsSetVFloatBox()) {
    count++
  }
  if (p.IsSetVDouble()) {
    count++
  }
  if (p.IsSetVDoubleBox()) {
    count++
  }
  if (p.IsSetVString()) {
    count++
  }
  if (p.IsSetVObject()) {
    count++
  }
  if (p.IsSetVArray()) {
    count++
  }
  if (p.IsSetVList()) {
    count++
  }
  if (p.IsSetVSet()) {
    count++
  }
  if (p.IsSetVMap()) {
    count++
  }
  if (p.IsSetVBigDecimal()) {
    count++
  }
  if (p.IsSetVAmount()) {
    count++
  }
  if (p.IsSetVByteArray()) {
    count++
  }
  return count

}

func (p *Variant) IsSetVNull() bool {
  return p.VNull != nil
}

func (p *Variant) IsSetVVoid() bool {
  return p.VVoid != nil
}

func (p *Variant) IsSetVBoolean() bool {
  return p.VBoolean != nil
}

func (p *Variant) IsSetVBooleanBox() bool {
  return p.VBooleanBox != nil
}

func (p *Variant) IsSetVByte() bool {
  return p.VByte != nil
}

func (p *Variant) IsSetVByteBox() bool {
  return p.VByteBox != nil
}

func (p *Variant) IsSetVShort() bool {
  return p.VShort != nil
}

func (p *Variant) IsSetVShortBox() bool {
  return p.VShortBox != nil
}

func (p *Variant) IsSetVInt() bool {
  return p.VInt != nil
}

func (p *Variant) IsSetVIntBox() bool {
  return p.VIntBox != nil
}

func (p *Variant) IsSetVLong() bool {
  return p.VLong != nil
}

func (p *Variant) IsSetVLongBox() bool {
  return p.VLongBox != nil
}

func (p *Variant) IsSetVFloat() bool {
  return p.VFloat != nil
}

func (p *Variant) IsSetVFloatBox() bool {
  return p.VFloatBox != nil
}

func (p *Variant) IsSetVDouble() bool {
  return p.VDouble != nil
}

func (p *Variant) IsSetVDoubleBox() bool {
  return p.VDoubleBox != nil
}

func (p *Variant) IsSetVString() bool {
  return p.VString != nil
}

func (p *Variant) IsSetVObject() bool {
  return p.VObject != nil
}

func (p *Variant) IsSetVArray() bool {
  return p.VArray != nil
}

func (p *Variant) IsSetVList() bool {
  return p.VList != nil
}

func (p *Variant) IsSetVSet() bool {
  return p.VSet != nil
}

func (p *Variant) IsSetVMap() bool {
  return p.VMap != nil
}

func (p *Variant) IsSetVBigDecimal() bool {
  return p.VBigDecimal != nil
}

func (p *Variant) IsSetVAmount() bool {
  return p.VAmount != nil
}

func (p *Variant) IsSetVByteArray() bool {
  return p.VByteArray != nil
}

func (p *Variant) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Variant)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.VNull = &v
}
  return nil
}

func (p *Variant)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := int8(v)
  p.VVoid = &temp
}
  return nil
}

func (p *Variant)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VBoolean = &v
}
  return nil
}

func (p *Variant)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VBooleanBox = &v
}
  return nil
}

func (p *Variant)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := int8(v)
  p.VByte = &temp
}
  return nil
}

func (p *Variant)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := int8(v)
  p.VByteBox = &temp
}
  return nil
}

func (p *Variant)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.VShort = &v
}
  return nil
}

func (p *Variant)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.VShortBox = &v
}
  return nil
}

func (p *Variant)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.VInt = &v
}
  return nil
}

func (p *Variant)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.VIntBox = &v
}
  return nil
}

func (p *Variant)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.VLong = &v
}
  return nil
}

func (p *Variant)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.VLongBox = &v
}
  return nil
}

func (p *Variant)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.VFloat = &v
}
  return nil
}

func (p *Variant)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.VFloatBox = &v
}
  return nil
}

func (p *Variant)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.VDouble = &v
}
  return nil
}

func (p *Variant)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.VDoubleBox = &v
}
  return nil
}

func (p *Variant)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.VString = &v
}
  return nil
}

func (p *Variant)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  p.VObject = &Object{}
  if err := p.VObject.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VObject), err)
  }
  return nil
}

func (p *Variant)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Variant, 0, size)
  p.VArray =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &Variant{}
    if err := _elem2.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.VArray = append(p.VArray, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Variant)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Variant, 0, size)
  p.VList =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &Variant{}
    if err := _elem3.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.VList = append(p.VList, _elem3)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Variant)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]*Variant, 0, size)
  p.VSet =  tSet
  for i := 0; i < size; i ++ {
    _elem4 := &Variant{}
    if err := _elem4.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.VSet = append(p.VSet, _elem4)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *Variant)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[*Variant]*Variant, size)
  p.VMap =  tMap
  for i := 0; i < size; i ++ {
    _key5 := &Variant{}
    if err := _key5.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _key5), err)
    }
    _val6 := &Variant{}
    if err := _val6.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val6), err)
    }
    p.VMap[_key5] = _val6
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Variant)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.VBigDecimal = &v
}
  return nil
}

func (p *Variant)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  p.VAmount = &Amount{}
  if err := p.VAmount.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VAmount), err)
  }
  return nil
}

func (p *Variant)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.VByteArray = v
}
  return nil
}

func (p *Variant) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsVariant(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin(ctx, "Variant"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Variant) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVNull() {
    if err := oprot.WriteFieldBegin(ctx, "v_null", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:v_null: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.VNull)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_null (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:v_null: ", p), err) }
  }
  return err
}

func (p *Variant) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVVoid() {
    if err := oprot.WriteFieldBegin(ctx, "v_void", thrift.BYTE, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:v_void: ", p), err) }
    if err := oprot.WriteByte(ctx, int8(*p.VVoid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_void (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:v_void: ", p), err) }
  }
  return err
}

func (p *Variant) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVBoolean() {
    if err := oprot.WriteFieldBegin(ctx, "v_boolean", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:v_boolean: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.VBoolean)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_boolean (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:v_boolean: ", p), err) }
  }
  return err
}

func (p *Variant) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVBooleanBox() {
    if err := oprot.WriteFieldBegin(ctx, "v_boolean_box", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:v_boolean_box: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.VBooleanBox)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_boolean_box (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:v_boolean_box: ", p), err) }
  }
  return err
}

func (p *Variant) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVByte() {
    if err := oprot.WriteFieldBegin(ctx, "v_byte", thrift.BYTE, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:v_byte: ", p), err) }
    if err := oprot.WriteByte(ctx, int8(*p.VByte)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_byte (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:v_byte: ", p), err) }
  }
  return err
}

func (p *Variant) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVByteBox() {
    if err := oprot.WriteFieldBegin(ctx, "v_byte_box", thrift.BYTE, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:v_byte_box: ", p), err) }
    if err := oprot.WriteByte(ctx, int8(*p.VByteBox)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_byte_box (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:v_byte_box: ", p), err) }
  }
  return err
}

func (p *Variant) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVShort() {
    if err := oprot.WriteFieldBegin(ctx, "v_short", thrift.I16, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:v_short: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.VShort)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_short (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:v_short: ", p), err) }
  }
  return err
}

func (p *Variant) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVShortBox() {
    if err := oprot.WriteFieldBegin(ctx, "v_short_box", thrift.I16, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:v_short_box: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.VShortBox)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_short_box (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:v_short_box: ", p), err) }
  }
  return err
}

func (p *Variant) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVInt() {
    if err := oprot.WriteFieldBegin(ctx, "v_int", thrift.I32, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:v_int: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.VInt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_int (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:v_int: ", p), err) }
  }
  return err
}

func (p *Variant) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVIntBox() {
    if err := oprot.WriteFieldBegin(ctx, "v_int_box", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:v_int_box: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.VIntBox)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_int_box (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:v_int_box: ", p), err) }
  }
  return err
}

func (p *Variant) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVLong() {
    if err := oprot.WriteFieldBegin(ctx, "v_long", thrift.I64, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:v_long: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.VLong)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_long (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:v_long: ", p), err) }
  }
  return err
}

func (p *Variant) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVLongBox() {
    if err := oprot.WriteFieldBegin(ctx, "v_long_box", thrift.I64, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:v_long_box: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.VLongBox)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_long_box (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:v_long_box: ", p), err) }
  }
  return err
}

func (p *Variant) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVFloat() {
    if err := oprot.WriteFieldBegin(ctx, "v_float", thrift.DOUBLE, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:v_float: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.VFloat)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_float (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:v_float: ", p), err) }
  }
  return err
}

func (p *Variant) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVFloatBox() {
    if err := oprot.WriteFieldBegin(ctx, "v_float_box", thrift.DOUBLE, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:v_float_box: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.VFloatBox)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_float_box (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:v_float_box: ", p), err) }
  }
  return err
}

func (p *Variant) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVDouble() {
    if err := oprot.WriteFieldBegin(ctx, "v_double", thrift.DOUBLE, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:v_double: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.VDouble)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_double (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:v_double: ", p), err) }
  }
  return err
}

func (p *Variant) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVDoubleBox() {
    if err := oprot.WriteFieldBegin(ctx, "v_double_box", thrift.DOUBLE, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:v_double_box: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.VDoubleBox)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_double_box (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:v_double_box: ", p), err) }
  }
  return err
}

func (p *Variant) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVString() {
    if err := oprot.WriteFieldBegin(ctx, "v_string", thrift.STRING, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:v_string: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.VString)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_string (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:v_string: ", p), err) }
  }
  return err
}

func (p *Variant) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVObject() {
    if err := oprot.WriteFieldBegin(ctx, "v_object", thrift.STRUCT, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:v_object: ", p), err) }
    if err := p.VObject.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VObject), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:v_object: ", p), err) }
  }
  return err
}

func (p *Variant) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVArray() {
    if err := oprot.WriteFieldBegin(ctx, "v_array", thrift.LIST, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:v_array: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.VArray)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.VArray {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:v_array: ", p), err) }
  }
  return err
}

func (p *Variant) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVList() {
    if err := oprot.WriteFieldBegin(ctx, "v_list", thrift.LIST, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:v_list: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.VList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.VList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:v_list: ", p), err) }
  }
  return err
}

func (p *Variant) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVSet() {
    if err := oprot.WriteFieldBegin(ctx, "v_set", thrift.SET, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:v_set: ", p), err) }
    if err := oprot.WriteSetBegin(ctx, thrift.STRUCT, len(p.VSet)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.VSet); i++ {
      for j := i+1; j<len(p.VSet); j++ {
        if func(tgt, src *Variant) bool {
          if !tgt.Equals(src) { return false }
          return true
        }(p.VSet[i], p.VSet[j]) {
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.VSet))
        }
      }
    }
    for _, v := range p.VSet {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteSetEnd(ctx); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:v_set: ", p), err) }
  }
  return err
}

func (p *Variant) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVMap() {
    if err := oprot.WriteFieldBegin(ctx, "v_map", thrift.MAP, 22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:v_map: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRUCT, thrift.STRUCT, len(p.VMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.VMap {
      if err := k.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", k), err)
      }
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 22:v_map: ", p), err) }
  }
  return err
}

func (p *Variant) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVBigDecimal() {
    if err := oprot.WriteFieldBegin(ctx, "v_big_decimal", thrift.STRING, 23); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:v_big_decimal: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.VBigDecimal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_big_decimal (23) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 23:v_big_decimal: ", p), err) }
  }
  return err
}

func (p *Variant) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVAmount() {
    if err := oprot.WriteFieldBegin(ctx, "v_amount", thrift.STRUCT, 24); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:v_amount: ", p), err) }
    if err := p.VAmount.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VAmount), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 24:v_amount: ", p), err) }
  }
  return err
}

func (p *Variant) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVByteArray() {
    if err := oprot.WriteFieldBegin(ctx, "v_byte_array", thrift.STRING, 25); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:v_byte_array: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.VByteArray); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.v_byte_array (25) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 25:v_byte_array: ", p), err) }
  }
  return err
}

func (p *Variant) Equals(other *Variant) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.VNull != other.VNull {
    if p.VNull == nil || other.VNull == nil {
      return false
    }
    if (*p.VNull) != (*other.VNull) { return false }
  }
  if p.VVoid != other.VVoid {
    if p.VVoid == nil || other.VVoid == nil {
      return false
    }
    if (*p.VVoid) != (*other.VVoid) { return false }
  }
  if p.VBoolean != other.VBoolean {
    if p.VBoolean == nil || other.VBoolean == nil {
      return false
    }
    if (*p.VBoolean) != (*other.VBoolean) { return false }
  }
  if p.VBooleanBox != other.VBooleanBox {
    if p.VBooleanBox == nil || other.VBooleanBox == nil {
      return false
    }
    if (*p.VBooleanBox) != (*other.VBooleanBox) { return false }
  }
  if p.VByte != other.VByte {
    if p.VByte == nil || other.VByte == nil {
      return false
    }
    if (*p.VByte) != (*other.VByte) { return false }
  }
  if p.VByteBox != other.VByteBox {
    if p.VByteBox == nil || other.VByteBox == nil {
      return false
    }
    if (*p.VByteBox) != (*other.VByteBox) { return false }
  }
  if p.VShort != other.VShort {
    if p.VShort == nil || other.VShort == nil {
      return false
    }
    if (*p.VShort) != (*other.VShort) { return false }
  }
  if p.VShortBox != other.VShortBox {
    if p.VShortBox == nil || other.VShortBox == nil {
      return false
    }
    if (*p.VShortBox) != (*other.VShortBox) { return false }
  }
  if p.VInt != other.VInt {
    if p.VInt == nil || other.VInt == nil {
      return false
    }
    if (*p.VInt) != (*other.VInt) { return false }
  }
  if p.VIntBox != other.VIntBox {
    if p.VIntBox == nil || other.VIntBox == nil {
      return false
    }
    if (*p.VIntBox) != (*other.VIntBox) { return false }
  }
  if p.VLong != other.VLong {
    if p.VLong == nil || other.VLong == nil {
      return false
    }
    if (*p.VLong) != (*other.VLong) { return false }
  }
  if p.VLongBox != other.VLongBox {
    if p.VLongBox == nil || other.VLongBox == nil {
      return false
    }
    if (*p.VLongBox) != (*other.VLongBox) { return false }
  }
  if p.VFloat != other.VFloat {
    if p.VFloat == nil || other.VFloat == nil {
      return false
    }
    if (*p.VFloat) != (*other.VFloat) { return false }
  }
  if p.VFloatBox != other.VFloatBox {
    if p.VFloatBox == nil || other.VFloatBox == nil {
      return false
    }
    if (*p.VFloatBox) != (*other.VFloatBox) { return false }
  }
  if p.VDouble != other.VDouble {
    if p.VDouble == nil || other.VDouble == nil {
      return false
    }
    if (*p.VDouble) != (*other.VDouble) { return false }
  }
  if p.VDoubleBox != other.VDoubleBox {
    if p.VDoubleBox == nil || other.VDoubleBox == nil {
      return false
    }
    if (*p.VDoubleBox) != (*other.VDoubleBox) { return false }
  }
  if p.VString != other.VString {
    if p.VString == nil || other.VString == nil {
      return false
    }
    if (*p.VString) != (*other.VString) { return false }
  }
  if !p.VObject.Equals(other.VObject) { return false }
  if len(p.VArray) != len(other.VArray) { return false }
  for i, _tgt := range p.VArray {
    _src7 := other.VArray[i]
    if !_tgt.Equals(_src7) { return false }
  }
  if len(p.VList) != len(other.VList) { return false }
  for i, _tgt := range p.VList {
    _src8 := other.VList[i]
    if !_tgt.Equals(_src8) { return false }
  }
  if len(p.VSet) != len(other.VSet) { return false }
  for i, _tgt := range p.VSet {
    _src9 := other.VSet[i]
    if !_tgt.Equals(_src9) { return false }
  }
  if len(p.VMap) != len(other.VMap) { return false }
  for k, _tgt := range p.VMap {
    _src10 := other.VMap[k]
    if !_tgt.Equals(_src10) { return false }
  }
  if p.VBigDecimal != other.VBigDecimal {
    if p.VBigDecimal == nil || other.VBigDecimal == nil {
      return false
    }
    if (*p.VBigDecimal) != (*other.VBigDecimal) { return false }
  }
  if !p.VAmount.Equals(other.VAmount) { return false }
  if bytes.Compare(p.VByteArray, other.VByteArray) != 0 { return false }
  return true
}

func (p *Variant) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Variant(%+v)", *p)
}

// Attributes:
//  - Name
//  - Arguments
type Annotation struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Arguments map[string]string `thrift:"arguments,2" db:"arguments" json:"arguments"`
}

func NewAnnotation() *Annotation {
  return &Annotation{}
}


func (p *Annotation) GetName() string {
  return p.Name
}

func (p *Annotation) GetArguments() map[string]string {
  return p.Arguments
}
func (p *Annotation) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Annotation)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Annotation)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Arguments =  tMap
  for i := 0; i < size; i ++ {
var _key11 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key11 = v
}
var _val12 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val12 = v
}
    p.Arguments[_key11] = _val12
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Annotation) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Annotation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Annotation) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *Annotation) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "arguments", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:arguments: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Arguments)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Arguments {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:arguments: ", p), err) }
  return err
}

func (p *Annotation) Equals(other *Annotation) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if len(p.Arguments) != len(other.Arguments) { return false }
  for k, _tgt := range p.Arguments {
    _src13 := other.Arguments[k]
    if _tgt != _src13 { return false }
  }
  return true
}

func (p *Annotation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Annotation(%+v)", *p)
}

// Attributes:
//  - Type
//  - Name
//  - Annotations
type MethodArgument struct {
  Type string `thrift:"type,1" db:"type" json:"type"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Annotations []*Annotation `thrift:"annotations,3" db:"annotations" json:"annotations"`
}

func NewMethodArgument() *MethodArgument {
  return &MethodArgument{}
}


func (p *MethodArgument) GetType() string {
  return p.Type
}

func (p *MethodArgument) GetName() string {
  return p.Name
}

func (p *MethodArgument) GetAnnotations() []*Annotation {
  return p.Annotations
}
func (p *MethodArgument) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MethodArgument)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *MethodArgument)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *MethodArgument)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Annotation, 0, size)
  p.Annotations =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &Annotation{}
    if err := _elem14.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.Annotations = append(p.Annotations, _elem14)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MethodArgument) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MethodArgument"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MethodArgument) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *MethodArgument) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *MethodArgument) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "annotations", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:annotations: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Annotations)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Annotations {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:annotations: ", p), err) }
  return err
}

func (p *MethodArgument) Equals(other *MethodArgument) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if p.Name != other.Name { return false }
  if len(p.Annotations) != len(other.Annotations) { return false }
  for i, _tgt := range p.Annotations {
    _src15 := other.Annotations[i]
    if !_tgt.Equals(_src15) { return false }
  }
  return true
}

func (p *MethodArgument) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MethodArgument(%+v)", *p)
}

// Attributes:
//  - ReturnType
//  - Name
//  - Arguments
//  - Annotations
//  - Modifiers
//  - Address
type MethodDescription struct {
  ReturnType string `thrift:"returnType,1" db:"returnType" json:"returnType"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Arguments []*MethodArgument `thrift:"arguments,3" db:"arguments" json:"arguments"`
  Annotations []*Annotation `thrift:"annotations,4" db:"annotations" json:"annotations"`
  Modifiers []string `thrift:"modifiers,5" db:"modifiers" json:"modifiers,omitempty"`
  Address *string `thrift:"address,6" db:"address" json:"address,omitempty"`
}

func NewMethodDescription() *MethodDescription {
  return &MethodDescription{}
}


func (p *MethodDescription) GetReturnType() string {
  return p.ReturnType
}

func (p *MethodDescription) GetName() string {
  return p.Name
}

func (p *MethodDescription) GetArguments() []*MethodArgument {
  return p.Arguments
}

func (p *MethodDescription) GetAnnotations() []*Annotation {
  return p.Annotations
}
var MethodDescription_Modifiers_DEFAULT []string

func (p *MethodDescription) GetModifiers() []string {
  return p.Modifiers
}
var MethodDescription_Address_DEFAULT string
func (p *MethodDescription) GetAddress() string {
  if !p.IsSetAddress() {
    return MethodDescription_Address_DEFAULT
  }
return *p.Address
}
func (p *MethodDescription) IsSetModifiers() bool {
  return p.Modifiers != nil
}

func (p *MethodDescription) IsSetAddress() bool {
  return p.Address != nil
}

func (p *MethodDescription) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MethodDescription)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReturnType = v
}
  return nil
}

func (p *MethodDescription)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *MethodDescription)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*MethodArgument, 0, size)
  p.Arguments =  tSlice
  for i := 0; i < size; i ++ {
    _elem16 := &MethodArgument{}
    if err := _elem16.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
    }
    p.Arguments = append(p.Arguments, _elem16)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MethodDescription)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Annotation, 0, size)
  p.Annotations =  tSlice
  for i := 0; i < size; i ++ {
    _elem17 := &Annotation{}
    if err := _elem17.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
    }
    p.Annotations = append(p.Annotations, _elem17)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MethodDescription)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Modifiers =  tSlice
  for i := 0; i < size; i ++ {
var _elem18 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem18 = v
}
    p.Modifiers = append(p.Modifiers, _elem18)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MethodDescription)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Address = &v
}
  return nil
}

func (p *MethodDescription) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MethodDescription"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MethodDescription) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "returnType", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:returnType: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ReturnType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.returnType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:returnType: ", p), err) }
  return err
}

func (p *MethodDescription) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *MethodDescription) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "arguments", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:arguments: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Arguments)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Arguments {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:arguments: ", p), err) }
  return err
}

func (p *MethodDescription) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "annotations", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:annotations: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Annotations)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Annotations {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:annotations: ", p), err) }
  return err
}

func (p *MethodDescription) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetModifiers() {
    if err := oprot.WriteFieldBegin(ctx, "modifiers", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:modifiers: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Modifiers)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Modifiers {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:modifiers: ", p), err) }
  }
  return err
}

func (p *MethodDescription) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAddress() {
    if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:address: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Address)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.address (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:address: ", p), err) }
  }
  return err
}

func (p *MethodDescription) Equals(other *MethodDescription) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReturnType != other.ReturnType { return false }
  if p.Name != other.Name { return false }
  if len(p.Arguments) != len(other.Arguments) { return false }
  for i, _tgt := range p.Arguments {
    _src19 := other.Arguments[i]
    if !_tgt.Equals(_src19) { return false }
  }
  if len(p.Annotations) != len(other.Annotations) { return false }
  for i, _tgt := range p.Annotations {
    _src20 := other.Annotations[i]
    if !_tgt.Equals(_src20) { return false }
  }
  if len(p.Modifiers) != len(other.Modifiers) { return false }
  for i, _tgt := range p.Modifiers {
    _src21 := other.Modifiers[i]
    if _tgt != _src21 { return false }
  }
  if p.Address != other.Address {
    if p.Address == nil || other.Address == nil {
      return false
    }
    if (*p.Address) != (*other.Address) { return false }
  }
  return true
}

func (p *MethodDescription) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MethodDescription(%+v)", *p)
}

// Attributes:
//  - Name
//  - ByteCode
type ByteCodeObject struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  ByteCode []byte `thrift:"byteCode,2" db:"byteCode" json:"byteCode"`
}

func NewByteCodeObject() *ByteCodeObject {
  return &ByteCodeObject{}
}


func (p *ByteCodeObject) GetName() string {
  return p.Name
}

func (p *ByteCodeObject) GetByteCode() []byte {
  return p.ByteCode
}
func (p *ByteCodeObject) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ByteCodeObject)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ByteCodeObject)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ByteCode = v
}
  return nil
}

func (p *ByteCodeObject) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ByteCodeObject"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ByteCodeObject) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ByteCodeObject) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "byteCode", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:byteCode: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ByteCode); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.byteCode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:byteCode: ", p), err) }
  return err
}

func (p *ByteCodeObject) Equals(other *ByteCodeObject) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if bytes.Compare(p.ByteCode, other.ByteCode) != 0 { return false }
  return true
}

func (p *ByteCodeObject) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ByteCodeObject(%+v)", *p)
}

// Attributes:
//  - Signature
//  - Address
type MethodSignature struct {
  Signature string `thrift:"signature,1" db:"signature" json:"signature"`
  Address []byte `thrift:"address,2" db:"address" json:"address"`
}

func NewMethodSignature() *MethodSignature {
  return &MethodSignature{}
}


func (p *MethodSignature) GetSignature() string {
  return p.Signature
}

func (p *MethodSignature) GetAddress() []byte {
  return p.Address
}
func (p *MethodSignature) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MethodSignature)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Signature = v
}
  return nil
}

func (p *MethodSignature)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *MethodSignature) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MethodSignature"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MethodSignature) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "signature", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:signature: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Signature)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.signature (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:signature: ", p), err) }
  return err
}

func (p *MethodSignature) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Address); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err) }
  return err
}

func (p *MethodSignature) Equals(other *MethodSignature) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Signature != other.Signature { return false }
  if bytes.Compare(p.Address, other.Address) != 0 { return false }
  return true
}

func (p *MethodSignature) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MethodSignature(%+v)", *p)
}

// Attributes:
//  - Type
//  - Name
type MethodShortArgument struct {
  Type string `thrift:"type,1" db:"type" json:"type"`
  Name string `thrift:"name,2" db:"name" json:"name"`
}

func NewMethodShortArgument() *MethodShortArgument {
  return &MethodShortArgument{}
}


func (p *MethodShortArgument) GetType() string {
  return p.Type
}

func (p *MethodShortArgument) GetName() string {
  return p.Name
}
func (p *MethodShortArgument) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MethodShortArgument)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *MethodShortArgument)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *MethodShortArgument) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MethodShortArgument"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MethodShortArgument) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *MethodShortArgument) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *MethodShortArgument) Equals(other *MethodShortArgument) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if p.Name != other.Name { return false }
  return true
}

func (p *MethodShortArgument) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MethodShortArgument(%+v)", *p)
}

// Attributes:
//  - Name
//  - RetValues
//  - Arguments
//  - Modifiers
//  - Address
type MethodShortDescription struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  RetValues []*MethodShortArgument `thrift:"retValues,2" db:"retValues" json:"retValues"`
  Arguments []*MethodShortArgument `thrift:"arguments,3" db:"arguments" json:"arguments"`
  Modifiers []string `thrift:"modifiers,4" db:"modifiers" json:"modifiers,omitempty"`
  Address *string `thrift:"address,5" db:"address" json:"address,omitempty"`
}

func NewMethodShortDescription() *MethodShortDescription {
  return &MethodShortDescription{}
}


func (p *MethodShortDescription) GetName() string {
  return p.Name
}

func (p *MethodShortDescription) GetRetValues() []*MethodShortArgument {
  return p.RetValues
}

func (p *MethodShortDescription) GetArguments() []*MethodShortArgument {
  return p.Arguments
}
var MethodShortDescription_Modifiers_DEFAULT []string

func (p *MethodShortDescription) GetModifiers() []string {
  return p.Modifiers
}
var MethodShortDescription_Address_DEFAULT string
func (p *MethodShortDescription) GetAddress() string {
  if !p.IsSetAddress() {
    return MethodShortDescription_Address_DEFAULT
  }
return *p.Address
}
func (p *MethodShortDescription) IsSetModifiers() bool {
  return p.Modifiers != nil
}

func (p *MethodShortDescription) IsSetAddress() bool {
  return p.Address != nil
}

func (p *MethodShortDescription) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MethodShortDescription)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *MethodShortDescription)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*MethodShortArgument, 0, size)
  p.RetValues =  tSlice
  for i := 0; i < size; i ++ {
    _elem22 := &MethodShortArgument{}
    if err := _elem22.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
    }
    p.RetValues = append(p.RetValues, _elem22)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MethodShortDescription)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*MethodShortArgument, 0, size)
  p.Arguments =  tSlice
  for i := 0; i < size; i ++ {
    _elem23 := &MethodShortArgument{}
    if err := _elem23.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
    }
    p.Arguments = append(p.Arguments, _elem23)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MethodShortDescription)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Modifiers =  tSlice
  for i := 0; i < size; i ++ {
var _elem24 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem24 = v
}
    p.Modifiers = append(p.Modifiers, _elem24)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MethodShortDescription)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Address = &v
}
  return nil
}

func (p *MethodShortDescription) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MethodShortDescription"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MethodShortDescription) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *MethodShortDescription) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "retValues", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:retValues: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.RetValues)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RetValues {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:retValues: ", p), err) }
  return err
}

func (p *MethodShortDescription) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "arguments", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:arguments: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Arguments)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Arguments {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:arguments: ", p), err) }
  return err
}

func (p *MethodShortDescription) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetModifiers() {
    if err := oprot.WriteFieldBegin(ctx, "modifiers", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:modifiers: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Modifiers)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Modifiers {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:modifiers: ", p), err) }
  }
  return err
}

func (p *MethodShortDescription) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAddress() {
    if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:address: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Address)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.address (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:address: ", p), err) }
  }
  return err
}

func (p *MethodShortDescription) Equals(other *MethodShortDescription) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if len(p.RetValues) != len(other.RetValues) { return false }
  for i, _tgt := range p.RetValues {
    _src25 := other.RetValues[i]
    if !_tgt.Equals(_src25) { return false }
  }
  if len(p.Arguments) != len(other.Arguments) { return false }
  for i, _tgt := range p.Arguments {
    _src26 := other.Arguments[i]
    if !_tgt.Equals(_src26) { return false }
  }
  if len(p.Modifiers) != len(other.Modifiers) { return false }
  for i, _tgt := range p.Modifiers {
    _src27 := other.Modifiers[i]
    if _tgt != _src27 { return false }
  }
  if p.Address != other.Address {
    if p.Address == nil || other.Address == nil {
      return false
    }
    if (*p.Address) != (*other.Address) { return false }
  }
  return true
}

func (p *MethodShortDescription) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MethodShortDescription(%+v)", *p)
}

// Attributes:
//  - Code
//  - Message
type APIResponse struct {
  Code int8 `thrift:"code,1" db:"code" json:"code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewAPIResponse() *APIResponse {
  return &APIResponse{}
}


func (p *APIResponse) GetCode() int8 {
  return p.Code
}

func (p *APIResponse) GetMessage() string {
  return p.Message
}
func (p *APIResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := int8(v)
  p.Code = temp
}
  return nil
}

func (p *APIResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *APIResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "APIResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.BYTE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *APIResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *APIResponse) Equals(other *APIResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if p.Message != other.Message { return false }
  return true
}

func (p *APIResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIResponse(%+v)", *p)
}

