// Code generated by Thrift Compiler (0.14.2). DO NOT EDIT.

package api

import(
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
	"credits-go/general"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = general.GoUnusedProtection__
type TransactionType int64
const (
  TransactionType_TT_Transfer TransactionType = 0
  TransactionType_TT_ContractDeploy TransactionType = 1
  TransactionType_TT_ContractCall TransactionType = 2
  TransactionType_TT_ContractState TransactionType = 3
  TransactionType_TT_ContractReplenish TransactionType = 4
  TransactionType_TT_TokenDeploy TransactionType = 5
  TransactionType_TT_TokenTransfer TransactionType = 6
  TransactionType_TT_Delegation TransactionType = 7
  TransactionType_TT_RevokeDelegation TransactionType = 8
  TransactionType_TT_Hold TransactionType = 9
  TransactionType_TT_Release TransactionType = 10
  TransactionType_TT_CancelHold TransactionType = 11
  TransactionType_TT_DelayedTransfer TransactionType = 12
  TransactionType_TT_UpdateBootstrapList TransactionType = 13
  TransactionType_TT_UpdateSettings TransactionType = 14
  TransactionType_TT_Malformed TransactionType = 15
  TransactionType_TT_ContractEmitted TransactionType = 16
  TransactionType_TT_Utility TransactionType = 17
  TransactionType_TT_Other TransactionType = 18
)

func (p TransactionType) String() string {
  switch p {
  case TransactionType_TT_Transfer: return "TT_Transfer"
  case TransactionType_TT_ContractDeploy: return "TT_ContractDeploy"
  case TransactionType_TT_ContractCall: return "TT_ContractCall"
  case TransactionType_TT_ContractState: return "TT_ContractState"
  case TransactionType_TT_ContractReplenish: return "TT_ContractReplenish"
  case TransactionType_TT_TokenDeploy: return "TT_TokenDeploy"
  case TransactionType_TT_TokenTransfer: return "TT_TokenTransfer"
  case TransactionType_TT_Delegation: return "TT_Delegation"
  case TransactionType_TT_RevokeDelegation: return "TT_RevokeDelegation"
  case TransactionType_TT_Hold: return "TT_Hold"
  case TransactionType_TT_Release: return "TT_Release"
  case TransactionType_TT_CancelHold: return "TT_CancelHold"
  case TransactionType_TT_DelayedTransfer: return "TT_DelayedTransfer"
  case TransactionType_TT_UpdateBootstrapList: return "TT_UpdateBootstrapList"
  case TransactionType_TT_UpdateSettings: return "TT_UpdateSettings"
  case TransactionType_TT_Malformed: return "TT_Malformed"
  case TransactionType_TT_ContractEmitted: return "TT_ContractEmitted"
  case TransactionType_TT_Utility: return "TT_Utility"
  case TransactionType_TT_Other: return "TT_Other"
  }
  return "<UNSET>"
}

func TransactionTypeFromString(s string) (TransactionType, error) {
  switch s {
  case "TT_Transfer": return TransactionType_TT_Transfer, nil 
  case "TT_ContractDeploy": return TransactionType_TT_ContractDeploy, nil 
  case "TT_ContractCall": return TransactionType_TT_ContractCall, nil 
  case "TT_ContractState": return TransactionType_TT_ContractState, nil 
  case "TT_ContractReplenish": return TransactionType_TT_ContractReplenish, nil 
  case "TT_TokenDeploy": return TransactionType_TT_TokenDeploy, nil 
  case "TT_TokenTransfer": return TransactionType_TT_TokenTransfer, nil 
  case "TT_Delegation": return TransactionType_TT_Delegation, nil 
  case "TT_RevokeDelegation": return TransactionType_TT_RevokeDelegation, nil 
  case "TT_Hold": return TransactionType_TT_Hold, nil 
  case "TT_Release": return TransactionType_TT_Release, nil 
  case "TT_CancelHold": return TransactionType_TT_CancelHold, nil 
  case "TT_DelayedTransfer": return TransactionType_TT_DelayedTransfer, nil 
  case "TT_UpdateBootstrapList": return TransactionType_TT_UpdateBootstrapList, nil 
  case "TT_UpdateSettings": return TransactionType_TT_UpdateSettings, nil 
  case "TT_Malformed": return TransactionType_TT_Malformed, nil 
  case "TT_ContractEmitted": return TransactionType_TT_ContractEmitted, nil 
  case "TT_Utility": return TransactionType_TT_Utility, nil 
  case "TT_Other": return TransactionType_TT_Other, nil 
  }
  return TransactionType(0), fmt.Errorf("not a valid TransactionType string")
}


func TransactionTypePtr(v TransactionType) *TransactionType { return &v }

func (p TransactionType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TransactionType) UnmarshalText(text []byte) error {
q, err := TransactionTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TransactionType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TransactionType(v)
return nil
}

func (p * TransactionType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SmartOperationState int64
const (
  SmartOperationState_SOS_Pending SmartOperationState = 0
  SmartOperationState_SOS_Success SmartOperationState = 1
  SmartOperationState_SOS_Failed SmartOperationState = 2
)

func (p SmartOperationState) String() string {
  switch p {
  case SmartOperationState_SOS_Pending: return "SOS_Pending"
  case SmartOperationState_SOS_Success: return "SOS_Success"
  case SmartOperationState_SOS_Failed: return "SOS_Failed"
  }
  return "<UNSET>"
}

func SmartOperationStateFromString(s string) (SmartOperationState, error) {
  switch s {
  case "SOS_Pending": return SmartOperationState_SOS_Pending, nil 
  case "SOS_Success": return SmartOperationState_SOS_Success, nil 
  case "SOS_Failed": return SmartOperationState_SOS_Failed, nil 
  }
  return SmartOperationState(0), fmt.Errorf("not a valid SmartOperationState string")
}


func SmartOperationStatePtr(v SmartOperationState) *SmartOperationState { return &v }

func (p SmartOperationState) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SmartOperationState) UnmarshalText(text []byte) error {
q, err := SmartOperationStateFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SmartOperationState) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SmartOperationState(v)
return nil
}

func (p * SmartOperationState) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TransactionState int64
const (
  TransactionState_INVALID TransactionState = 0
  TransactionState_VALID TransactionState = 1
  TransactionState_INPROGRESS TransactionState = 2
)

func (p TransactionState) String() string {
  switch p {
  case TransactionState_INVALID: return "INVALID"
  case TransactionState_VALID: return "VALID"
  case TransactionState_INPROGRESS: return "INPROGRESS"
  }
  return "<UNSET>"
}

func TransactionStateFromString(s string) (TransactionState, error) {
  switch s {
  case "INVALID": return TransactionState_INVALID, nil 
  case "VALID": return TransactionState_VALID, nil 
  case "INPROGRESS": return TransactionState_INPROGRESS, nil 
  }
  return TransactionState(0), fmt.Errorf("not a valid TransactionState string")
}


func TransactionStatePtr(v TransactionState) *TransactionState { return &v }

func (p TransactionState) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TransactionState) UnmarshalText(text []byte) error {
q, err := TransactionStateFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TransactionState) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TransactionState(v)
return nil
}

func (p * TransactionState) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TokensListSortField int64
const (
  TokensListSortField_TL_Code TokensListSortField = 0
  TokensListSortField_TL_Name TokensListSortField = 1
  TokensListSortField_TL_Address TokensListSortField = 2
  TokensListSortField_TL_TotalSupply TokensListSortField = 3
  TokensListSortField_TL_HoldersCount TokensListSortField = 4
  TokensListSortField_TL_TransfersCount TokensListSortField = 5
  TokensListSortField_TL_TransactionsCount TokensListSortField = 6
)

func (p TokensListSortField) String() string {
  switch p {
  case TokensListSortField_TL_Code: return "TL_Code"
  case TokensListSortField_TL_Name: return "TL_Name"
  case TokensListSortField_TL_Address: return "TL_Address"
  case TokensListSortField_TL_TotalSupply: return "TL_TotalSupply"
  case TokensListSortField_TL_HoldersCount: return "TL_HoldersCount"
  case TokensListSortField_TL_TransfersCount: return "TL_TransfersCount"
  case TokensListSortField_TL_TransactionsCount: return "TL_TransactionsCount"
  }
  return "<UNSET>"
}

func TokensListSortFieldFromString(s string) (TokensListSortField, error) {
  switch s {
  case "TL_Code": return TokensListSortField_TL_Code, nil 
  case "TL_Name": return TokensListSortField_TL_Name, nil 
  case "TL_Address": return TokensListSortField_TL_Address, nil 
  case "TL_TotalSupply": return TokensListSortField_TL_TotalSupply, nil 
  case "TL_HoldersCount": return TokensListSortField_TL_HoldersCount, nil 
  case "TL_TransfersCount": return TokensListSortField_TL_TransfersCount, nil 
  case "TL_TransactionsCount": return TokensListSortField_TL_TransactionsCount, nil 
  }
  return TokensListSortField(0), fmt.Errorf("not a valid TokensListSortField string")
}


func TokensListSortFieldPtr(v TokensListSortField) *TokensListSortField { return &v }

func (p TokensListSortField) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TokensListSortField) UnmarshalText(text []byte) error {
q, err := TokensListSortFieldFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TokensListSortField) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TokensListSortField(v)
return nil
}

func (p * TokensListSortField) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TokenHoldersSortField int64
const (
  TokenHoldersSortField_TH_Balance TokenHoldersSortField = 0
  TokenHoldersSortField_TH_TransfersCount TokenHoldersSortField = 1
)

func (p TokenHoldersSortField) String() string {
  switch p {
  case TokenHoldersSortField_TH_Balance: return "TH_Balance"
  case TokenHoldersSortField_TH_TransfersCount: return "TH_TransfersCount"
  }
  return "<UNSET>"
}

func TokenHoldersSortFieldFromString(s string) (TokenHoldersSortField, error) {
  switch s {
  case "TH_Balance": return TokenHoldersSortField_TH_Balance, nil 
  case "TH_TransfersCount": return TokenHoldersSortField_TH_TransfersCount, nil 
  }
  return TokenHoldersSortField(0), fmt.Errorf("not a valid TokenHoldersSortField string")
}


func TokenHoldersSortFieldPtr(v TokenHoldersSortField) *TokenHoldersSortField { return &v }

func (p TokenHoldersSortField) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TokenHoldersSortField) UnmarshalText(text []byte) error {
q, err := TokenHoldersSortFieldFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TokenHoldersSortField) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TokenHoldersSortField(v)
return nil
}

func (p * TokenHoldersSortField) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type WalletsListSort int64
const (
  WalletsListSort_WL_CurrentSum WalletsListSort = 0
  WalletsListSort_WL_CreationTime WalletsListSort = 1
  WalletsListSort_WL_TransactionsCount WalletsListSort = 2
)

func (p WalletsListSort) String() string {
  switch p {
  case WalletsListSort_WL_CurrentSum: return "WL_CurrentSum"
  case WalletsListSort_WL_CreationTime: return "WL_CreationTime"
  case WalletsListSort_WL_TransactionsCount: return "WL_TransactionsCount"
  }
  return "<UNSET>"
}

func WalletsListSortFromString(s string) (WalletsListSort, error) {
  switch s {
  case "WL_CurrentSum": return WalletsListSort_WL_CurrentSum, nil 
  case "WL_CreationTime": return WalletsListSort_WL_CreationTime, nil 
  case "WL_TransactionsCount": return WalletsListSort_WL_TransactionsCount, nil 
  }
  return WalletsListSort(0), fmt.Errorf("not a valid WalletsListSort string")
}


func WalletsListSortPtr(v WalletsListSort) *WalletsListSort { return &v }

func (p WalletsListSort) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *WalletsListSort) UnmarshalText(text []byte) error {
q, err := WalletsListSortFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *WalletsListSort) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = WalletsListSort(v)
return nil
}

func (p * WalletsListSort) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Currency int8

func CurrencyPtr(v Currency) *Currency { return &v }

type Time int64

func TimePtr(v Time) *Time { return &v }

type TokenCode string

func TokenCodePtr(v TokenCode) *TokenCode { return &v }

type TokenAmount string

func TokenAmountPtr(v TokenAmount) *TokenAmount { return &v }

type Balance map[Currency]*general.Amount

func BalancePtr(v Balance) *Balance { return &v }

type Total map[Currency]*CumulativeAmount

func TotalPtr(v Total) *Total { return &v }

type TransactionInnerId int64

func TransactionInnerIdPtr(v TransactionInnerId) *TransactionInnerId { return &v }

type PoolHash []byte

func PoolHashPtr(v PoolHash) *PoolHash { return &v }

type PoolNumber int64

func PoolNumberPtr(v PoolNumber) *PoolNumber { return &v }

type WalletId int32

func WalletIdPtr(v WalletId) *WalletId { return &v }

type Count int32

func CountPtr(v Count) *Count { return &v }

type StatsPerPeriod []*PeriodStats

func StatsPerPeriodPtr(v StatsPerPeriod) *StatsPerPeriod { return &v }

type NodeHash string

func NodeHashPtr(v NodeHash) *NodeHash { return &v }

// Attributes:
//  - Commission
type AmountCommission struct {
  Commission int16 `thrift:"commission,1,required" db:"commission" json:"commission"`
}

func NewAmountCommission() *AmountCommission {
  return &AmountCommission{}
}


func (p *AmountCommission) GetCommission() int16 {
  return p.Commission
}
func (p *AmountCommission) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCommission bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetCommission = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCommission{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Commission is not set"));
  }
  return nil
}

func (p *AmountCommission)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Commission = v
}
  return nil
}

func (p *AmountCommission) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AmountCommission"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AmountCommission) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "commission", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:commission: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.Commission)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.commission (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:commission: ", p), err) }
  return err
}

func (p *AmountCommission) Equals(other *AmountCommission) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Commission != other.Commission { return false }
  return true
}

func (p *AmountCommission) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AmountCommission(%+v)", *p)
}

// Attributes:
//  - Integral
//  - Fraction
type CumulativeAmount struct {
  Integral int64 `thrift:"integral,1,required" db:"integral" json:"integral"`
  Fraction int64 `thrift:"fraction,2,required" db:"fraction" json:"fraction"`
}

func NewCumulativeAmount() *CumulativeAmount {
  return &CumulativeAmount{}
}


func (p *CumulativeAmount) GetIntegral() int64 {
  return p.Integral
}

func (p *CumulativeAmount) GetFraction() int64 {
  return p.Fraction
}
func (p *CumulativeAmount) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIntegral bool = false;
  var issetFraction bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetIntegral = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetFraction = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIntegral{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Integral is not set"));
  }
  if !issetFraction{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Fraction is not set"));
  }
  return nil
}

func (p *CumulativeAmount)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Integral = v
}
  return nil
}

func (p *CumulativeAmount)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Fraction = v
}
  return nil
}

func (p *CumulativeAmount) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CumulativeAmount"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CumulativeAmount) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "integral", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:integral: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Integral)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.integral (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:integral: ", p), err) }
  return err
}

func (p *CumulativeAmount) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fraction", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fraction: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fraction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fraction (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fraction: ", p), err) }
  return err
}

func (p *CumulativeAmount) Equals(other *CumulativeAmount) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Integral != other.Integral { return false }
  if p.Fraction != other.Fraction { return false }
  return true
}

func (p *CumulativeAmount) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CumulativeAmount(%+v)", *p)
}

// Attributes:
//  - SourceCode
//  - ByteCodeObjects
//  - HashState
//  - TokenStandard
//  - Lang
//  - Methods
type SmartContractDeploy struct {
  SourceCode string `thrift:"sourceCode,1" db:"sourceCode" json:"sourceCode"`
  ByteCodeObjects []*general.ByteCodeObject `thrift:"byteCodeObjects,2" db:"byteCodeObjects" json:"byteCodeObjects"`
  HashState string `thrift:"hashState,3" db:"hashState" json:"hashState"`
  TokenStandard int32 `thrift:"tokenStandard,4" db:"tokenStandard" json:"tokenStandard"`
  Lang int8 `thrift:"lang,5" db:"lang" json:"lang"`
  Methods []*general.MethodShortDescription `thrift:"methods,6" db:"methods" json:"methods,omitempty"`
}

func NewSmartContractDeploy() *SmartContractDeploy {
  return &SmartContractDeploy{}
}


func (p *SmartContractDeploy) GetSourceCode() string {
  return p.SourceCode
}

func (p *SmartContractDeploy) GetByteCodeObjects() []*general.ByteCodeObject {
  return p.ByteCodeObjects
}

func (p *SmartContractDeploy) GetHashState() string {
  return p.HashState
}

func (p *SmartContractDeploy) GetTokenStandard() int32 {
  return p.TokenStandard
}

func (p *SmartContractDeploy) GetLang() int8 {
  return p.Lang
}
var SmartContractDeploy_Methods_DEFAULT []*general.MethodShortDescription

func (p *SmartContractDeploy) GetMethods() []*general.MethodShortDescription {
  return p.Methods
}
func (p *SmartContractDeploy) IsSetMethods() bool {
  return p.Methods != nil
}

func (p *SmartContractDeploy) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartContractDeploy)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SourceCode = v
}
  return nil
}

func (p *SmartContractDeploy)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*general.ByteCodeObject, 0, size)
  p.ByteCodeObjects =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &general.ByteCodeObject{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.ByteCodeObjects = append(p.ByteCodeObjects, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SmartContractDeploy)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HashState = v
}
  return nil
}

func (p *SmartContractDeploy)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TokenStandard = v
}
  return nil
}

func (p *SmartContractDeploy)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := int8(v)
  p.Lang = temp
}
  return nil
}

func (p *SmartContractDeploy)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*general.MethodShortDescription, 0, size)
  p.Methods =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &general.MethodShortDescription{}
    if err := _elem1.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Methods = append(p.Methods, _elem1)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SmartContractDeploy) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractDeploy"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartContractDeploy) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sourceCode", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sourceCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SourceCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sourceCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sourceCode: ", p), err) }
  return err
}

func (p *SmartContractDeploy) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "byteCodeObjects", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:byteCodeObjects: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ByteCodeObjects)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ByteCodeObjects {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:byteCodeObjects: ", p), err) }
  return err
}

func (p *SmartContractDeploy) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hashState", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hashState: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HashState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hashState (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hashState: ", p), err) }
  return err
}

func (p *SmartContractDeploy) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tokenStandard", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tokenStandard: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TokenStandard)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tokenStandard (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tokenStandard: ", p), err) }
  return err
}

func (p *SmartContractDeploy) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lang", thrift.BYTE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lang: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.Lang)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lang (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lang: ", p), err) }
  return err
}

func (p *SmartContractDeploy) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMethods() {
    if err := oprot.WriteFieldBegin(ctx, "methods", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:methods: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Methods)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Methods {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:methods: ", p), err) }
  }
  return err
}

func (p *SmartContractDeploy) Equals(other *SmartContractDeploy) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SourceCode != other.SourceCode { return false }
  if len(p.ByteCodeObjects) != len(other.ByteCodeObjects) { return false }
  for i, _tgt := range p.ByteCodeObjects {
    _src2 := other.ByteCodeObjects[i]
    if !_tgt.Equals(_src2) { return false }
  }
  if p.HashState != other.HashState { return false }
  if p.TokenStandard != other.TokenStandard { return false }
  if p.Lang != other.Lang { return false }
  if len(p.Methods) != len(other.Methods) { return false }
  for i, _tgt := range p.Methods {
    _src3 := other.Methods[i]
    if !_tgt.Equals(_src3) { return false }
  }
  return true
}

func (p *SmartContractDeploy) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartContractDeploy(%+v)", *p)
}

// Attributes:
//  - Address
//  - Deployer
//  - SmartContractDeploy
//  - ObjectState
//  - CreateTime
//  - TransactionsCount
type SmartContract struct {
  Address general.Address `thrift:"address,1,required" db:"address" json:"address"`
  Deployer general.Address `thrift:"deployer,2" db:"deployer" json:"deployer"`
  SmartContractDeploy *SmartContractDeploy `thrift:"smartContractDeploy,3" db:"smartContractDeploy" json:"smartContractDeploy"`
  ObjectState []byte `thrift:"objectState,4" db:"objectState" json:"objectState"`
  CreateTime Time `thrift:"createTime,5" db:"createTime" json:"createTime"`
  TransactionsCount int32 `thrift:"transactionsCount,6" db:"transactionsCount" json:"transactionsCount"`
}

func NewSmartContract() *SmartContract {
  return &SmartContract{}
}


func (p *SmartContract) GetAddress() general.Address {
  return p.Address
}

func (p *SmartContract) GetDeployer() general.Address {
  return p.Deployer
}
var SmartContract_SmartContractDeploy_DEFAULT *SmartContractDeploy
func (p *SmartContract) GetSmartContractDeploy() *SmartContractDeploy {
  if !p.IsSetSmartContractDeploy() {
    return SmartContract_SmartContractDeploy_DEFAULT
  }
return p.SmartContractDeploy
}

func (p *SmartContract) GetObjectState() []byte {
  return p.ObjectState
}

func (p *SmartContract) GetCreateTime() Time {
  return p.CreateTime
}

func (p *SmartContract) GetTransactionsCount() int32 {
  return p.TransactionsCount
}
func (p *SmartContract) IsSetSmartContractDeploy() bool {
  return p.SmartContractDeploy != nil
}

func (p *SmartContract) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAddress bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetAddress = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAddress{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Address is not set"));
  }
  return nil
}

func (p *SmartContract)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Address = temp
}
  return nil
}

func (p *SmartContract)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := general.Address(v)
  p.Deployer = temp
}
  return nil
}

func (p *SmartContract)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.SmartContractDeploy = &SmartContractDeploy{}
  if err := p.SmartContractDeploy.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SmartContractDeploy), err)
  }
  return nil
}

func (p *SmartContract)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ObjectState = v
}
  return nil
}

func (p *SmartContract)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Time(v)
  p.CreateTime = temp
}
  return nil
}

func (p *SmartContract)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TransactionsCount = v
}
  return nil
}

func (p *SmartContract) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContract"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartContract) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Address); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *SmartContract) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deployer", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deployer: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Deployer); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deployer (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deployer: ", p), err) }
  return err
}

func (p *SmartContract) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "smartContractDeploy", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:smartContractDeploy: ", p), err) }
  if err := p.SmartContractDeploy.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SmartContractDeploy), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:smartContractDeploy: ", p), err) }
  return err
}

func (p *SmartContract) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "objectState", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:objectState: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ObjectState); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.objectState (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:objectState: ", p), err) }
  return err
}

func (p *SmartContract) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createTime: ", p), err) }
  return err
}

func (p *SmartContract) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactionsCount", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:transactionsCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TransactionsCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transactionsCount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:transactionsCount: ", p), err) }
  return err
}

func (p *SmartContract) Equals(other *SmartContract) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Address, other.Address) != 0 { return false }
  if bytes.Compare(p.Deployer, other.Deployer) != 0 { return false }
  if !p.SmartContractDeploy.Equals(other.SmartContractDeploy) { return false }
  if bytes.Compare(p.ObjectState, other.ObjectState) != 0 { return false }
  if p.CreateTime != other.CreateTime { return false }
  if p.TransactionsCount != other.TransactionsCount { return false }
  return true
}

func (p *SmartContract) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartContract(%+v)", *p)
}

// Attributes:
//  - Method
//  - Params
//  - UsedContracts
//  - ForgetNewState
//  - SmartContractDeploy
//  - Version
type SmartContractInvocation struct {
  Method string `thrift:"method,1" db:"method" json:"method"`
  Params []*general.Variant `thrift:"params,2" db:"params" json:"params"`
  UsedContracts []general.Address `thrift:"usedContracts,3" db:"usedContracts" json:"usedContracts"`
  ForgetNewState bool `thrift:"forgetNewState,4" db:"forgetNewState" json:"forgetNewState"`
  SmartContractDeploy *SmartContractDeploy `thrift:"smartContractDeploy,5" db:"smartContractDeploy" json:"smartContractDeploy,omitempty"`
  Version int16 `thrift:"version,6" db:"version" json:"version"`
}

func NewSmartContractInvocation() *SmartContractInvocation {
  return &SmartContractInvocation{
Version: 1,
}
}


func (p *SmartContractInvocation) GetMethod() string {
  return p.Method
}

func (p *SmartContractInvocation) GetParams() []*general.Variant {
  return p.Params
}

func (p *SmartContractInvocation) GetUsedContracts() []general.Address {
  return p.UsedContracts
}

func (p *SmartContractInvocation) GetForgetNewState() bool {
  return p.ForgetNewState
}
var SmartContractInvocation_SmartContractDeploy_DEFAULT *SmartContractDeploy
func (p *SmartContractInvocation) GetSmartContractDeploy() *SmartContractDeploy {
  if !p.IsSetSmartContractDeploy() {
    return SmartContractInvocation_SmartContractDeploy_DEFAULT
  }
return p.SmartContractDeploy
}

func (p *SmartContractInvocation) GetVersion() int16 {
  return p.Version
}
func (p *SmartContractInvocation) IsSetSmartContractDeploy() bool {
  return p.SmartContractDeploy != nil
}

func (p *SmartContractInvocation) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartContractInvocation)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Method = v
}
  return nil
}

func (p *SmartContractInvocation)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*general.Variant, 0, size)
  p.Params =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &general.Variant{}
    if err := _elem4.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Params = append(p.Params, _elem4)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SmartContractInvocation)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]general.Address, 0, size)
  p.UsedContracts =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 general.Address
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := general.Address(v)
    _elem5 = temp
}
    p.UsedContracts = append(p.UsedContracts, _elem5)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SmartContractInvocation)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ForgetNewState = v
}
  return nil
}

func (p *SmartContractInvocation)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.SmartContractDeploy = &SmartContractDeploy{}
  if err := p.SmartContractDeploy.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SmartContractDeploy), err)
  }
  return nil
}

func (p *SmartContractInvocation)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *SmartContractInvocation) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractInvocation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartContractInvocation) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "method", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:method: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:method: ", p), err) }
  return err
}

func (p *SmartContractInvocation) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "params", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:params: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Params)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Params {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:params: ", p), err) }
  return err
}

func (p *SmartContractInvocation) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "usedContracts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:usedContracts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.UsedContracts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UsedContracts {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:usedContracts: ", p), err) }
  return err
}

func (p *SmartContractInvocation) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "forgetNewState", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:forgetNewState: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ForgetNewState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.forgetNewState (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:forgetNewState: ", p), err) }
  return err
}

func (p *SmartContractInvocation) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSmartContractDeploy() {
    if err := oprot.WriteFieldBegin(ctx, "smartContractDeploy", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:smartContractDeploy: ", p), err) }
    if err := p.SmartContractDeploy.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SmartContractDeploy), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:smartContractDeploy: ", p), err) }
  }
  return err
}

func (p *SmartContractInvocation) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.I16, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:version: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:version: ", p), err) }
  return err
}

func (p *SmartContractInvocation) Equals(other *SmartContractInvocation) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Method != other.Method { return false }
  if len(p.Params) != len(other.Params) { return false }
  for i, _tgt := range p.Params {
    _src6 := other.Params[i]
    if !_tgt.Equals(_src6) { return false }
  }
  if len(p.UsedContracts) != len(other.UsedContracts) { return false }
  for i, _tgt := range p.UsedContracts {
    _src7 := other.UsedContracts[i]
    if bytes.Compare(_tgt, _src7) != 0 { return false }
  }
  if p.ForgetNewState != other.ForgetNewState { return false }
  if !p.SmartContractDeploy.Equals(other.SmartContractDeploy) { return false }
  if p.Version != other.Version { return false }
  return true
}

func (p *SmartContractInvocation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartContractInvocation(%+v)", *p)
}

// Attributes:
//  - PoolSeq
//  - Index
type TransactionId struct {
  PoolSeq int64 `thrift:"poolSeq,1" db:"poolSeq" json:"poolSeq"`
  Index int32 `thrift:"index,2" db:"index" json:"index"`
}

func NewTransactionId() *TransactionId {
  return &TransactionId{}
}


func (p *TransactionId) GetPoolSeq() int64 {
  return p.PoolSeq
}

func (p *TransactionId) GetIndex() int32 {
  return p.Index
}
func (p *TransactionId) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransactionId)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PoolSeq = v
}
  return nil
}

func (p *TransactionId)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Index = v
}
  return nil
}

func (p *TransactionId) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionId"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransactionId) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "poolSeq", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:poolSeq: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PoolSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.poolSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:poolSeq: ", p), err) }
  return err
}

func (p *TransactionId) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Index)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index: ", p), err) }
  return err
}

func (p *TransactionId) Equals(other *TransactionId) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PoolSeq != other.PoolSeq { return false }
  if p.Index != other.Index { return false }
  return true
}

func (p *TransactionId) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransactionId(%+v)", *p)
}

// Attributes:
//  - Name
//  - Code
//  - TokenStandard
//  - State
//  - StateTransaction
type TokenDeployTransInfo struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Code TokenCode `thrift:"code,2" db:"code" json:"code"`
  TokenStandard int32 `thrift:"tokenStandard,3" db:"tokenStandard" json:"tokenStandard"`
  State SmartOperationState `thrift:"state,4" db:"state" json:"state"`
  StateTransaction *TransactionId `thrift:"stateTransaction,5" db:"stateTransaction" json:"stateTransaction,omitempty"`
}

func NewTokenDeployTransInfo() *TokenDeployTransInfo {
  return &TokenDeployTransInfo{}
}


func (p *TokenDeployTransInfo) GetName() string {
  return p.Name
}

func (p *TokenDeployTransInfo) GetCode() TokenCode {
  return p.Code
}

func (p *TokenDeployTransInfo) GetTokenStandard() int32 {
  return p.TokenStandard
}

func (p *TokenDeployTransInfo) GetState() SmartOperationState {
  return p.State
}
var TokenDeployTransInfo_StateTransaction_DEFAULT *TransactionId
func (p *TokenDeployTransInfo) GetStateTransaction() *TransactionId {
  if !p.IsSetStateTransaction() {
    return TokenDeployTransInfo_StateTransaction_DEFAULT
  }
return p.StateTransaction
}
func (p *TokenDeployTransInfo) IsSetStateTransaction() bool {
  return p.StateTransaction != nil
}

func (p *TokenDeployTransInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TokenDeployTransInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TokenDeployTransInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TokenCode(v)
  p.Code = temp
}
  return nil
}

func (p *TokenDeployTransInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TokenStandard = v
}
  return nil
}

func (p *TokenDeployTransInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := SmartOperationState(v)
  p.State = temp
}
  return nil
}

func (p *TokenDeployTransInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.StateTransaction = &TransactionId{}
  if err := p.StateTransaction.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StateTransaction), err)
  }
  return nil
}

func (p *TokenDeployTransInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenDeployTransInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TokenDeployTransInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *TokenDeployTransInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:code: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:code: ", p), err) }
  return err
}

func (p *TokenDeployTransInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tokenStandard", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tokenStandard: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TokenStandard)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tokenStandard (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tokenStandard: ", p), err) }
  return err
}

func (p *TokenDeployTransInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "state", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:state: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:state: ", p), err) }
  return err
}

func (p *TokenDeployTransInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStateTransaction() {
    if err := oprot.WriteFieldBegin(ctx, "stateTransaction", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:stateTransaction: ", p), err) }
    if err := p.StateTransaction.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StateTransaction), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:stateTransaction: ", p), err) }
  }
  return err
}

func (p *TokenDeployTransInfo) Equals(other *TokenDeployTransInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if p.Code != other.Code { return false }
  if p.TokenStandard != other.TokenStandard { return false }
  if p.State != other.State { return false }
  if !p.StateTransaction.Equals(other.StateTransaction) { return false }
  return true
}

func (p *TokenDeployTransInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TokenDeployTransInfo(%+v)", *p)
}

// Attributes:
//  - Code
//  - Sender
//  - Receiver
//  - Amount
//  - State
//  - StateTransaction
//  - TransferSuccess
type TokenTransferTransInfo struct {
  Code TokenCode `thrift:"code,1" db:"code" json:"code"`
  Sender general.Address `thrift:"sender,2" db:"sender" json:"sender"`
  Receiver general.Address `thrift:"receiver,3" db:"receiver" json:"receiver"`
  Amount TokenAmount `thrift:"amount,4" db:"amount" json:"amount"`
  State SmartOperationState `thrift:"state,5" db:"state" json:"state"`
  StateTransaction *TransactionId `thrift:"stateTransaction,6" db:"stateTransaction" json:"stateTransaction,omitempty"`
  TransferSuccess *bool `thrift:"transferSuccess,7" db:"transferSuccess" json:"transferSuccess,omitempty"`
}

func NewTokenTransferTransInfo() *TokenTransferTransInfo {
  return &TokenTransferTransInfo{}
}


func (p *TokenTransferTransInfo) GetCode() TokenCode {
  return p.Code
}

func (p *TokenTransferTransInfo) GetSender() general.Address {
  return p.Sender
}

func (p *TokenTransferTransInfo) GetReceiver() general.Address {
  return p.Receiver
}

func (p *TokenTransferTransInfo) GetAmount() TokenAmount {
  return p.Amount
}

func (p *TokenTransferTransInfo) GetState() SmartOperationState {
  return p.State
}
var TokenTransferTransInfo_StateTransaction_DEFAULT *TransactionId
func (p *TokenTransferTransInfo) GetStateTransaction() *TransactionId {
  if !p.IsSetStateTransaction() {
    return TokenTransferTransInfo_StateTransaction_DEFAULT
  }
return p.StateTransaction
}
var TokenTransferTransInfo_TransferSuccess_DEFAULT bool
func (p *TokenTransferTransInfo) GetTransferSuccess() bool {
  if !p.IsSetTransferSuccess() {
    return TokenTransferTransInfo_TransferSuccess_DEFAULT
  }
return *p.TransferSuccess
}
func (p *TokenTransferTransInfo) IsSetStateTransaction() bool {
  return p.StateTransaction != nil
}

func (p *TokenTransferTransInfo) IsSetTransferSuccess() bool {
  return p.TransferSuccess != nil
}

func (p *TokenTransferTransInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TokenTransferTransInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TokenCode(v)
  p.Code = temp
}
  return nil
}

func (p *TokenTransferTransInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := general.Address(v)
  p.Sender = temp
}
  return nil
}

func (p *TokenTransferTransInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := general.Address(v)
  p.Receiver = temp
}
  return nil
}

func (p *TokenTransferTransInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TokenAmount(v)
  p.Amount = temp
}
  return nil
}

func (p *TokenTransferTransInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := SmartOperationState(v)
  p.State = temp
}
  return nil
}

func (p *TokenTransferTransInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.StateTransaction = &TransactionId{}
  if err := p.StateTransaction.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StateTransaction), err)
  }
  return nil
}

func (p *TokenTransferTransInfo)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.TransferSuccess = &v
}
  return nil
}

func (p *TokenTransferTransInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenTransferTransInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TokenTransferTransInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *TokenTransferTransInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sender", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sender: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Sender); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sender (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sender: ", p), err) }
  return err
}

func (p *TokenTransferTransInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "receiver", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:receiver: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Receiver); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.receiver (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:receiver: ", p), err) }
  return err
}

func (p *TokenTransferTransInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "amount", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:amount: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:amount: ", p), err) }
  return err
}

func (p *TokenTransferTransInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "state", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:state: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:state: ", p), err) }
  return err
}

func (p *TokenTransferTransInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStateTransaction() {
    if err := oprot.WriteFieldBegin(ctx, "stateTransaction", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:stateTransaction: ", p), err) }
    if err := p.StateTransaction.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StateTransaction), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:stateTransaction: ", p), err) }
  }
  return err
}

func (p *TokenTransferTransInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTransferSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "transferSuccess", thrift.BOOL, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:transferSuccess: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.TransferSuccess)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.transferSuccess (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:transferSuccess: ", p), err) }
  }
  return err
}

func (p *TokenTransferTransInfo) Equals(other *TokenTransferTransInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if bytes.Compare(p.Sender, other.Sender) != 0 { return false }
  if bytes.Compare(p.Receiver, other.Receiver) != 0 { return false }
  if p.Amount != other.Amount { return false }
  if p.State != other.State { return false }
  if !p.StateTransaction.Equals(other.StateTransaction) { return false }
  if p.TransferSuccess != other.TransferSuccess {
    if p.TransferSuccess == nil || other.TransferSuccess == nil {
      return false
    }
    if (*p.TransferSuccess) != (*other.TransferSuccess) { return false }
  }
  return true
}

func (p *TokenTransferTransInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TokenTransferTransInfo(%+v)", *p)
}

// Attributes:
//  - State
//  - StateTransaction
type SmartDeployTransInfo struct {
  State SmartOperationState `thrift:"state,1" db:"state" json:"state"`
  StateTransaction *TransactionId `thrift:"stateTransaction,2" db:"stateTransaction" json:"stateTransaction,omitempty"`
}

func NewSmartDeployTransInfo() *SmartDeployTransInfo {
  return &SmartDeployTransInfo{}
}


func (p *SmartDeployTransInfo) GetState() SmartOperationState {
  return p.State
}
var SmartDeployTransInfo_StateTransaction_DEFAULT *TransactionId
func (p *SmartDeployTransInfo) GetStateTransaction() *TransactionId {
  if !p.IsSetStateTransaction() {
    return SmartDeployTransInfo_StateTransaction_DEFAULT
  }
return p.StateTransaction
}
func (p *SmartDeployTransInfo) IsSetStateTransaction() bool {
  return p.StateTransaction != nil
}

func (p *SmartDeployTransInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartDeployTransInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SmartOperationState(v)
  p.State = temp
}
  return nil
}

func (p *SmartDeployTransInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.StateTransaction = &TransactionId{}
  if err := p.StateTransaction.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StateTransaction), err)
  }
  return nil
}

func (p *SmartDeployTransInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartDeployTransInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartDeployTransInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "state", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:state: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:state: ", p), err) }
  return err
}

func (p *SmartDeployTransInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStateTransaction() {
    if err := oprot.WriteFieldBegin(ctx, "stateTransaction", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stateTransaction: ", p), err) }
    if err := p.StateTransaction.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StateTransaction), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stateTransaction: ", p), err) }
  }
  return err
}

func (p *SmartDeployTransInfo) Equals(other *SmartDeployTransInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.State != other.State { return false }
  if !p.StateTransaction.Equals(other.StateTransaction) { return false }
  return true
}

func (p *SmartDeployTransInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartDeployTransInfo(%+v)", *p)
}

// Attributes:
//  - Method
//  - Params
//  - State
//  - StateTransaction
type SmartExecutionTransInfo struct {
  Method string `thrift:"method,1" db:"method" json:"method"`
  Params []*general.Variant `thrift:"params,2" db:"params" json:"params"`
  State SmartOperationState `thrift:"state,3" db:"state" json:"state"`
  StateTransaction *TransactionId `thrift:"stateTransaction,4" db:"stateTransaction" json:"stateTransaction,omitempty"`
}

func NewSmartExecutionTransInfo() *SmartExecutionTransInfo {
  return &SmartExecutionTransInfo{}
}


func (p *SmartExecutionTransInfo) GetMethod() string {
  return p.Method
}

func (p *SmartExecutionTransInfo) GetParams() []*general.Variant {
  return p.Params
}

func (p *SmartExecutionTransInfo) GetState() SmartOperationState {
  return p.State
}
var SmartExecutionTransInfo_StateTransaction_DEFAULT *TransactionId
func (p *SmartExecutionTransInfo) GetStateTransaction() *TransactionId {
  if !p.IsSetStateTransaction() {
    return SmartExecutionTransInfo_StateTransaction_DEFAULT
  }
return p.StateTransaction
}
func (p *SmartExecutionTransInfo) IsSetStateTransaction() bool {
  return p.StateTransaction != nil
}

func (p *SmartExecutionTransInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartExecutionTransInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Method = v
}
  return nil
}

func (p *SmartExecutionTransInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*general.Variant, 0, size)
  p.Params =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &general.Variant{}
    if err := _elem8.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.Params = append(p.Params, _elem8)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SmartExecutionTransInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SmartOperationState(v)
  p.State = temp
}
  return nil
}

func (p *SmartExecutionTransInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.StateTransaction = &TransactionId{}
  if err := p.StateTransaction.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StateTransaction), err)
  }
  return nil
}

func (p *SmartExecutionTransInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartExecutionTransInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartExecutionTransInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "method", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:method: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:method: ", p), err) }
  return err
}

func (p *SmartExecutionTransInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "params", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:params: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Params)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Params {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:params: ", p), err) }
  return err
}

func (p *SmartExecutionTransInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "state", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:state: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:state: ", p), err) }
  return err
}

func (p *SmartExecutionTransInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStateTransaction() {
    if err := oprot.WriteFieldBegin(ctx, "stateTransaction", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stateTransaction: ", p), err) }
    if err := p.StateTransaction.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StateTransaction), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stateTransaction: ", p), err) }
  }
  return err
}

func (p *SmartExecutionTransInfo) Equals(other *SmartExecutionTransInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Method != other.Method { return false }
  if len(p.Params) != len(other.Params) { return false }
  for i, _tgt := range p.Params {
    _src9 := other.Params[i]
    if !_tgt.Equals(_src9) { return false }
  }
  if p.State != other.State { return false }
  if !p.StateTransaction.Equals(other.StateTransaction) { return false }
  return true
}

func (p *SmartExecutionTransInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartExecutionTransInfo(%+v)", *p)
}

// Attributes:
//  - Sum
//  - Comment
//  - TransactionId
type ExtraFee struct {
  Sum *general.Amount `thrift:"sum,1" db:"sum" json:"sum"`
  Comment string `thrift:"comment,2" db:"comment" json:"comment"`
  TransactionId *TransactionId `thrift:"transactionId,3" db:"transactionId" json:"transactionId"`
}

func NewExtraFee() *ExtraFee {
  return &ExtraFee{}
}

var ExtraFee_Sum_DEFAULT *general.Amount
func (p *ExtraFee) GetSum() *general.Amount {
  if !p.IsSetSum() {
    return ExtraFee_Sum_DEFAULT
  }
return p.Sum
}

func (p *ExtraFee) GetComment() string {
  return p.Comment
}
var ExtraFee_TransactionId_DEFAULT *TransactionId
func (p *ExtraFee) GetTransactionId() *TransactionId {
  if !p.IsSetTransactionId() {
    return ExtraFee_TransactionId_DEFAULT
  }
return p.TransactionId
}
func (p *ExtraFee) IsSetSum() bool {
  return p.Sum != nil
}

func (p *ExtraFee) IsSetTransactionId() bool {
  return p.TransactionId != nil
}

func (p *ExtraFee) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExtraFee)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Sum = &general.Amount{}
  if err := p.Sum.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sum), err)
  }
  return nil
}

func (p *ExtraFee)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Comment = v
}
  return nil
}

func (p *ExtraFee)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.TransactionId = &TransactionId{}
  if err := p.TransactionId.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TransactionId), err)
  }
  return nil
}

func (p *ExtraFee) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ExtraFee"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExtraFee) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sum", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sum: ", p), err) }
  if err := p.Sum.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sum), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sum: ", p), err) }
  return err
}

func (p *ExtraFee) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "comment", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:comment: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Comment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.comment (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:comment: ", p), err) }
  return err
}

func (p *ExtraFee) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactionId", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:transactionId: ", p), err) }
  if err := p.TransactionId.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TransactionId), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:transactionId: ", p), err) }
  return err
}

func (p *ExtraFee) Equals(other *ExtraFee) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Sum.Equals(other.Sum) { return false }
  if p.Comment != other.Comment { return false }
  if !p.TransactionId.Equals(other.TransactionId) { return false }
  return true
}

func (p *ExtraFee) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExtraFee(%+v)", *p)
}

// Attributes:
//  - Success
//  - ExecutionFee
//  - ReturnValue
//  - StartTransaction
type SmartStateTransInfo struct {
  Success bool `thrift:"success,1" db:"success" json:"success"`
  ExecutionFee *general.Amount `thrift:"executionFee,2" db:"executionFee" json:"executionFee"`
  ReturnValue *general.Variant `thrift:"returnValue,3" db:"returnValue" json:"returnValue,omitempty"`
  StartTransaction *TransactionId `thrift:"startTransaction,4" db:"startTransaction" json:"startTransaction"`
}

func NewSmartStateTransInfo() *SmartStateTransInfo {
  return &SmartStateTransInfo{}
}


func (p *SmartStateTransInfo) GetSuccess() bool {
  return p.Success
}
var SmartStateTransInfo_ExecutionFee_DEFAULT *general.Amount
func (p *SmartStateTransInfo) GetExecutionFee() *general.Amount {
  if !p.IsSetExecutionFee() {
    return SmartStateTransInfo_ExecutionFee_DEFAULT
  }
return p.ExecutionFee
}
var SmartStateTransInfo_ReturnValue_DEFAULT *general.Variant
func (p *SmartStateTransInfo) GetReturnValue() *general.Variant {
  if !p.IsSetReturnValue() {
    return SmartStateTransInfo_ReturnValue_DEFAULT
  }
return p.ReturnValue
}
var SmartStateTransInfo_StartTransaction_DEFAULT *TransactionId
func (p *SmartStateTransInfo) GetStartTransaction() *TransactionId {
  if !p.IsSetStartTransaction() {
    return SmartStateTransInfo_StartTransaction_DEFAULT
  }
return p.StartTransaction
}
func (p *SmartStateTransInfo) IsSetExecutionFee() bool {
  return p.ExecutionFee != nil
}

func (p *SmartStateTransInfo) IsSetReturnValue() bool {
  return p.ReturnValue != nil
}

func (p *SmartStateTransInfo) IsSetStartTransaction() bool {
  return p.StartTransaction != nil
}

func (p *SmartStateTransInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartStateTransInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *SmartStateTransInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.ExecutionFee = &general.Amount{}
  if err := p.ExecutionFee.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExecutionFee), err)
  }
  return nil
}

func (p *SmartStateTransInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.ReturnValue = &general.Variant{}
  if err := p.ReturnValue.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReturnValue), err)
  }
  return nil
}

func (p *SmartStateTransInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.StartTransaction = &TransactionId{}
  if err := p.StartTransaction.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StartTransaction), err)
  }
  return nil
}

func (p *SmartStateTransInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartStateTransInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartStateTransInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.success (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success: ", p), err) }
  return err
}

func (p *SmartStateTransInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "executionFee", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:executionFee: ", p), err) }
  if err := p.ExecutionFee.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExecutionFee), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:executionFee: ", p), err) }
  return err
}

func (p *SmartStateTransInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetReturnValue() {
    if err := oprot.WriteFieldBegin(ctx, "returnValue", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:returnValue: ", p), err) }
    if err := p.ReturnValue.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReturnValue), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:returnValue: ", p), err) }
  }
  return err
}

func (p *SmartStateTransInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startTransaction", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:startTransaction: ", p), err) }
  if err := p.StartTransaction.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StartTransaction), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:startTransaction: ", p), err) }
  return err
}

func (p *SmartStateTransInfo) Equals(other *SmartStateTransInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Success != other.Success { return false }
  if !p.ExecutionFee.Equals(other.ExecutionFee) { return false }
  if !p.ReturnValue.Equals(other.ReturnValue) { return false }
  if !p.StartTransaction.Equals(other.StartTransaction) { return false }
  return true
}

func (p *SmartStateTransInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartStateTransInfo(%+v)", *p)
}

// Attributes:
//  - VTokenDeploy
//  - VTokenTransfer
//  - VSmartDeploy
//  - VSmartExecution
//  - VSmartState
type SmartTransInfo struct {
  VTokenDeploy *TokenDeployTransInfo `thrift:"v_tokenDeploy,1" db:"v_tokenDeploy" json:"v_tokenDeploy,omitempty"`
  VTokenTransfer *TokenTransferTransInfo `thrift:"v_tokenTransfer,2" db:"v_tokenTransfer" json:"v_tokenTransfer,omitempty"`
  VSmartDeploy *SmartDeployTransInfo `thrift:"v_smartDeploy,3" db:"v_smartDeploy" json:"v_smartDeploy,omitempty"`
  VSmartExecution *SmartExecutionTransInfo `thrift:"v_smartExecution,4" db:"v_smartExecution" json:"v_smartExecution,omitempty"`
  VSmartState *SmartStateTransInfo `thrift:"v_smartState,5" db:"v_smartState" json:"v_smartState,omitempty"`
}

func NewSmartTransInfo() *SmartTransInfo {
  return &SmartTransInfo{}
}

var SmartTransInfo_VTokenDeploy_DEFAULT *TokenDeployTransInfo
func (p *SmartTransInfo) GetVTokenDeploy() *TokenDeployTransInfo {
  if !p.IsSetVTokenDeploy() {
    return SmartTransInfo_VTokenDeploy_DEFAULT
  }
return p.VTokenDeploy
}
var SmartTransInfo_VTokenTransfer_DEFAULT *TokenTransferTransInfo
func (p *SmartTransInfo) GetVTokenTransfer() *TokenTransferTransInfo {
  if !p.IsSetVTokenTransfer() {
    return SmartTransInfo_VTokenTransfer_DEFAULT
  }
return p.VTokenTransfer
}
var SmartTransInfo_VSmartDeploy_DEFAULT *SmartDeployTransInfo
func (p *SmartTransInfo) GetVSmartDeploy() *SmartDeployTransInfo {
  if !p.IsSetVSmartDeploy() {
    return SmartTransInfo_VSmartDeploy_DEFAULT
  }
return p.VSmartDeploy
}
var SmartTransInfo_VSmartExecution_DEFAULT *SmartExecutionTransInfo
func (p *SmartTransInfo) GetVSmartExecution() *SmartExecutionTransInfo {
  if !p.IsSetVSmartExecution() {
    return SmartTransInfo_VSmartExecution_DEFAULT
  }
return p.VSmartExecution
}
var SmartTransInfo_VSmartState_DEFAULT *SmartStateTransInfo
func (p *SmartTransInfo) GetVSmartState() *SmartStateTransInfo {
  if !p.IsSetVSmartState() {
    return SmartTransInfo_VSmartState_DEFAULT
  }
return p.VSmartState
}
func (p *SmartTransInfo) CountSetFieldsSmartTransInfo() int {
  count := 0
  if (p.IsSetVTokenDeploy()) {
    count++
  }
  if (p.IsSetVTokenTransfer()) {
    count++
  }
  if (p.IsSetVSmartDeploy()) {
    count++
  }
  if (p.IsSetVSmartExecution()) {
    count++
  }
  if (p.IsSetVSmartState()) {
    count++
  }
  return count

}

func (p *SmartTransInfo) IsSetVTokenDeploy() bool {
  return p.VTokenDeploy != nil
}

func (p *SmartTransInfo) IsSetVTokenTransfer() bool {
  return p.VTokenTransfer != nil
}

func (p *SmartTransInfo) IsSetVSmartDeploy() bool {
  return p.VSmartDeploy != nil
}

func (p *SmartTransInfo) IsSetVSmartExecution() bool {
  return p.VSmartExecution != nil
}

func (p *SmartTransInfo) IsSetVSmartState() bool {
  return p.VSmartState != nil
}

func (p *SmartTransInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartTransInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.VTokenDeploy = &TokenDeployTransInfo{}
  if err := p.VTokenDeploy.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VTokenDeploy), err)
  }
  return nil
}

func (p *SmartTransInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.VTokenTransfer = &TokenTransferTransInfo{}
  if err := p.VTokenTransfer.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VTokenTransfer), err)
  }
  return nil
}

func (p *SmartTransInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.VSmartDeploy = &SmartDeployTransInfo{}
  if err := p.VSmartDeploy.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VSmartDeploy), err)
  }
  return nil
}

func (p *SmartTransInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.VSmartExecution = &SmartExecutionTransInfo{}
  if err := p.VSmartExecution.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VSmartExecution), err)
  }
  return nil
}

func (p *SmartTransInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.VSmartState = &SmartStateTransInfo{}
  if err := p.VSmartState.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VSmartState), err)
  }
  return nil
}

func (p *SmartTransInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsSmartTransInfo(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin(ctx, "SmartTransInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartTransInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVTokenDeploy() {
    if err := oprot.WriteFieldBegin(ctx, "v_tokenDeploy", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:v_tokenDeploy: ", p), err) }
    if err := p.VTokenDeploy.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VTokenDeploy), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:v_tokenDeploy: ", p), err) }
  }
  return err
}

func (p *SmartTransInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVTokenTransfer() {
    if err := oprot.WriteFieldBegin(ctx, "v_tokenTransfer", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:v_tokenTransfer: ", p), err) }
    if err := p.VTokenTransfer.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VTokenTransfer), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:v_tokenTransfer: ", p), err) }
  }
  return err
}

func (p *SmartTransInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVSmartDeploy() {
    if err := oprot.WriteFieldBegin(ctx, "v_smartDeploy", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:v_smartDeploy: ", p), err) }
    if err := p.VSmartDeploy.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VSmartDeploy), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:v_smartDeploy: ", p), err) }
  }
  return err
}

func (p *SmartTransInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVSmartExecution() {
    if err := oprot.WriteFieldBegin(ctx, "v_smartExecution", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:v_smartExecution: ", p), err) }
    if err := p.VSmartExecution.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VSmartExecution), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:v_smartExecution: ", p), err) }
  }
  return err
}

func (p *SmartTransInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVSmartState() {
    if err := oprot.WriteFieldBegin(ctx, "v_smartState", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:v_smartState: ", p), err) }
    if err := p.VSmartState.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VSmartState), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:v_smartState: ", p), err) }
  }
  return err
}

func (p *SmartTransInfo) Equals(other *SmartTransInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.VTokenDeploy.Equals(other.VTokenDeploy) { return false }
  if !p.VTokenTransfer.Equals(other.VTokenTransfer) { return false }
  if !p.VSmartDeploy.Equals(other.VSmartDeploy) { return false }
  if !p.VSmartExecution.Equals(other.VSmartExecution) { return false }
  if !p.VSmartState.Equals(other.VSmartState) { return false }
  return true
}

func (p *SmartTransInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartTransInfo(%+v)", *p)
}

// Attributes:
//  - ID
//  - Source
//  - Target
//  - Amount
//  - Balance
//  - Currency
//  - Signature
//  - SmartContract
//  - Fee
//  - TimeCreation
//  - UserFields
//  - Type
//  - SmartInfo
//  - ExtraFee
//  - PoolNumber
//  - UsedContracts
type Transaction struct {
  ID TransactionInnerId `thrift:"id,1" db:"id" json:"id"`
  Source general.Address `thrift:"source,2" db:"source" json:"source"`
  Target general.Address `thrift:"target,3" db:"target" json:"target"`
  Amount *general.Amount `thrift:"amount,4" db:"amount" json:"amount"`
  Balance *general.Amount `thrift:"balance,5" db:"balance" json:"balance"`
  Currency Currency `thrift:"currency,6" db:"currency" json:"currency"`
  Signature []byte `thrift:"signature,7" db:"signature" json:"signature"`
  SmartContract *SmartContractInvocation `thrift:"smartContract,8" db:"smartContract" json:"smartContract,omitempty"`
  Fee *AmountCommission `thrift:"fee,9" db:"fee" json:"fee"`
  TimeCreation Time `thrift:"timeCreation,10" db:"timeCreation" json:"timeCreation"`
  UserFields []byte `thrift:"userFields,11" db:"userFields" json:"userFields,omitempty"`
  Type TransactionType `thrift:"type,12" db:"type" json:"type"`
  SmartInfo *SmartTransInfo `thrift:"smartInfo,13" db:"smartInfo" json:"smartInfo,omitempty"`
  ExtraFee []*ExtraFee `thrift:"extraFee,14" db:"extraFee" json:"extraFee,omitempty"`
  PoolNumber int64 `thrift:"poolNumber,15" db:"poolNumber" json:"poolNumber"`
  UsedContracts []general.Address `thrift:"usedContracts,16" db:"usedContracts" json:"usedContracts,omitempty"`
}

func NewTransaction() *Transaction {
  return &Transaction{}
}


func (p *Transaction) GetID() TransactionInnerId {
  return p.ID
}

func (p *Transaction) GetSource() general.Address {
  return p.Source
}

func (p *Transaction) GetTarget() general.Address {
  return p.Target
}
var Transaction_Amount_DEFAULT *general.Amount
func (p *Transaction) GetAmount() *general.Amount {
  if !p.IsSetAmount() {
    return Transaction_Amount_DEFAULT
  }
return p.Amount
}
var Transaction_Balance_DEFAULT *general.Amount
func (p *Transaction) GetBalance() *general.Amount {
  if !p.IsSetBalance() {
    return Transaction_Balance_DEFAULT
  }
return p.Balance
}

func (p *Transaction) GetCurrency() Currency {
  return p.Currency
}

func (p *Transaction) GetSignature() []byte {
  return p.Signature
}
var Transaction_SmartContract_DEFAULT *SmartContractInvocation
func (p *Transaction) GetSmartContract() *SmartContractInvocation {
  if !p.IsSetSmartContract() {
    return Transaction_SmartContract_DEFAULT
  }
return p.SmartContract
}
var Transaction_Fee_DEFAULT *AmountCommission
func (p *Transaction) GetFee() *AmountCommission {
  if !p.IsSetFee() {
    return Transaction_Fee_DEFAULT
  }
return p.Fee
}

func (p *Transaction) GetTimeCreation() Time {
  return p.TimeCreation
}
var Transaction_UserFields_DEFAULT []byte

func (p *Transaction) GetUserFields() []byte {
  return p.UserFields
}

func (p *Transaction) GetType() TransactionType {
  return p.Type
}
var Transaction_SmartInfo_DEFAULT *SmartTransInfo
func (p *Transaction) GetSmartInfo() *SmartTransInfo {
  if !p.IsSetSmartInfo() {
    return Transaction_SmartInfo_DEFAULT
  }
return p.SmartInfo
}
var Transaction_ExtraFee_DEFAULT []*ExtraFee

func (p *Transaction) GetExtraFee() []*ExtraFee {
  return p.ExtraFee
}

func (p *Transaction) GetPoolNumber() int64 {
  return p.PoolNumber
}
var Transaction_UsedContracts_DEFAULT []general.Address

func (p *Transaction) GetUsedContracts() []general.Address {
  return p.UsedContracts
}
func (p *Transaction) IsSetAmount() bool {
  return p.Amount != nil
}

func (p *Transaction) IsSetBalance() bool {
  return p.Balance != nil
}

func (p *Transaction) IsSetSmartContract() bool {
  return p.SmartContract != nil
}

func (p *Transaction) IsSetFee() bool {
  return p.Fee != nil
}

func (p *Transaction) IsSetUserFields() bool {
  return p.UserFields != nil
}

func (p *Transaction) IsSetSmartInfo() bool {
  return p.SmartInfo != nil
}

func (p *Transaction) IsSetExtraFee() bool {
  return p.ExtraFee != nil
}

func (p *Transaction) IsSetUsedContracts() bool {
  return p.UsedContracts != nil
}

func (p *Transaction) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Transaction)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TransactionInnerId(v)
  p.ID = temp
}
  return nil
}

func (p *Transaction)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := general.Address(v)
  p.Source = temp
}
  return nil
}

func (p *Transaction)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := general.Address(v)
  p.Target = temp
}
  return nil
}

func (p *Transaction)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Amount = &general.Amount{}
  if err := p.Amount.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Amount), err)
  }
  return nil
}

func (p *Transaction)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.Balance = &general.Amount{}
  if err := p.Balance.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Balance), err)
  }
  return nil
}

func (p *Transaction)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Currency(v)
  p.Currency = temp
}
  return nil
}

func (p *Transaction)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Signature = v
}
  return nil
}

func (p *Transaction)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.SmartContract = &SmartContractInvocation{
  Version: 1,
}
  if err := p.SmartContract.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SmartContract), err)
  }
  return nil
}

func (p *Transaction)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  p.Fee = &AmountCommission{}
  if err := p.Fee.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Fee), err)
  }
  return nil
}

func (p *Transaction)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := Time(v)
  p.TimeCreation = temp
}
  return nil
}

func (p *Transaction)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.UserFields = v
}
  return nil
}

func (p *Transaction)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  temp := TransactionType(v)
  p.Type = temp
}
  return nil
}

func (p *Transaction)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  p.SmartInfo = &SmartTransInfo{}
  if err := p.SmartInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SmartInfo), err)
  }
  return nil
}

func (p *Transaction)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ExtraFee, 0, size)
  p.ExtraFee =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &ExtraFee{}
    if err := _elem10.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.ExtraFee = append(p.ExtraFee, _elem10)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Transaction)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.PoolNumber = v
}
  return nil
}

func (p *Transaction)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]general.Address, 0, size)
  p.UsedContracts =  tSlice
  for i := 0; i < size; i ++ {
var _elem11 general.Address
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := general.Address(v)
    _elem11 = temp
}
    p.UsedContracts = append(p.UsedContracts, _elem11)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Transaction) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Transaction"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Transaction) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Transaction) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "source", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:source: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Source); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:source: ", p), err) }
  return err
}

func (p *Transaction) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "target", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:target: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Target); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.target (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:target: ", p), err) }
  return err
}

func (p *Transaction) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "amount", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:amount: ", p), err) }
  if err := p.Amount.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Amount), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:amount: ", p), err) }
  return err
}

func (p *Transaction) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "balance", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:balance: ", p), err) }
  if err := p.Balance.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Balance), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:balance: ", p), err) }
  return err
}

func (p *Transaction) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "currency", thrift.BYTE, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:currency: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:currency: ", p), err) }
  return err
}

func (p *Transaction) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "signature", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:signature: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Signature); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.signature (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:signature: ", p), err) }
  return err
}

func (p *Transaction) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSmartContract() {
    if err := oprot.WriteFieldBegin(ctx, "smartContract", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:smartContract: ", p), err) }
    if err := p.SmartContract.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SmartContract), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:smartContract: ", p), err) }
  }
  return err
}

func (p *Transaction) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fee", thrift.STRUCT, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:fee: ", p), err) }
  if err := p.Fee.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Fee), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:fee: ", p), err) }
  return err
}

func (p *Transaction) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "timeCreation", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:timeCreation: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TimeCreation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timeCreation (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:timeCreation: ", p), err) }
  return err
}

func (p *Transaction) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUserFields() {
    if err := oprot.WriteFieldBegin(ctx, "userFields", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:userFields: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.UserFields); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userFields (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:userFields: ", p), err) }
  }
  return err
}

func (p *Transaction) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:type: ", p), err) }
  return err
}

func (p *Transaction) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSmartInfo() {
    if err := oprot.WriteFieldBegin(ctx, "smartInfo", thrift.STRUCT, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:smartInfo: ", p), err) }
    if err := p.SmartInfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SmartInfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:smartInfo: ", p), err) }
  }
  return err
}

func (p *Transaction) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraFee() {
    if err := oprot.WriteFieldBegin(ctx, "extraFee", thrift.LIST, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:extraFee: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ExtraFee)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ExtraFee {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:extraFee: ", p), err) }
  }
  return err
}

func (p *Transaction) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "poolNumber", thrift.I64, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:poolNumber: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PoolNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.poolNumber (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:poolNumber: ", p), err) }
  return err
}

func (p *Transaction) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUsedContracts() {
    if err := oprot.WriteFieldBegin(ctx, "usedContracts", thrift.LIST, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:usedContracts: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.UsedContracts)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.UsedContracts {
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:usedContracts: ", p), err) }
  }
  return err
}

func (p *Transaction) Equals(other *Transaction) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if bytes.Compare(p.Source, other.Source) != 0 { return false }
  if bytes.Compare(p.Target, other.Target) != 0 { return false }
  if !p.Amount.Equals(other.Amount) { return false }
  if !p.Balance.Equals(other.Balance) { return false }
  if p.Currency != other.Currency { return false }
  if bytes.Compare(p.Signature, other.Signature) != 0 { return false }
  if !p.SmartContract.Equals(other.SmartContract) { return false }
  if !p.Fee.Equals(other.Fee) { return false }
  if p.TimeCreation != other.TimeCreation { return false }
  if bytes.Compare(p.UserFields, other.UserFields) != 0 { return false }
  if p.Type != other.Type { return false }
  if !p.SmartInfo.Equals(other.SmartInfo) { return false }
  if len(p.ExtraFee) != len(other.ExtraFee) { return false }
  for i, _tgt := range p.ExtraFee {
    _src12 := other.ExtraFee[i]
    if !_tgt.Equals(_src12) { return false }
  }
  if p.PoolNumber != other.PoolNumber { return false }
  if len(p.UsedContracts) != len(other.UsedContracts) { return false }
  for i, _tgt := range p.UsedContracts {
    _src13 := other.UsedContracts[i]
    if bytes.Compare(_tgt, _src13) != 0 { return false }
  }
  return true
}

func (p *Transaction) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Transaction(%+v)", *p)
}

// Attributes:
//  - ID
//  - Trxn
type SealedTransaction struct {
  ID *TransactionId `thrift:"id,1" db:"id" json:"id"`
  Trxn *Transaction `thrift:"trxn,2" db:"trxn" json:"trxn"`
}

func NewSealedTransaction() *SealedTransaction {
  return &SealedTransaction{}
}

var SealedTransaction_ID_DEFAULT *TransactionId
func (p *SealedTransaction) GetID() *TransactionId {
  if !p.IsSetID() {
    return SealedTransaction_ID_DEFAULT
  }
return p.ID
}
var SealedTransaction_Trxn_DEFAULT *Transaction
func (p *SealedTransaction) GetTrxn() *Transaction {
  if !p.IsSetTrxn() {
    return SealedTransaction_Trxn_DEFAULT
  }
return p.Trxn
}
func (p *SealedTransaction) IsSetID() bool {
  return p.ID != nil
}

func (p *SealedTransaction) IsSetTrxn() bool {
  return p.Trxn != nil
}

func (p *SealedTransaction) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SealedTransaction)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &TransactionId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *SealedTransaction)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Trxn = &Transaction{}
  if err := p.Trxn.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Trxn), err)
  }
  return nil
}

func (p *SealedTransaction) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SealedTransaction"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SealedTransaction) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *SealedTransaction) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trxn", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:trxn: ", p), err) }
  if err := p.Trxn.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Trxn), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:trxn: ", p), err) }
  return err
}

func (p *SealedTransaction) Equals(other *SealedTransaction) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.ID.Equals(other.ID) { return false }
  if !p.Trxn.Equals(other.Trxn) { return false }
  return true
}

func (p *SealedTransaction) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SealedTransaction(%+v)", *p)
}

// Attributes:
//  - ID
//  - Source
//  - Target
//  - Amount
//  - Fee
//  - TimeCreation
//  - Currency
//  - Type
//  - UserFields
type ShortTransaction struct {
  ID *TransactionId `thrift:"id,1" db:"id" json:"id"`
  Source general.Address `thrift:"source,2" db:"source" json:"source"`
  Target general.Address `thrift:"target,3" db:"target" json:"target"`
  Amount *general.Amount `thrift:"amount,4" db:"amount" json:"amount"`
  Fee *AmountCommission `thrift:"fee,5" db:"fee" json:"fee"`
  TimeCreation Time `thrift:"timeCreation,6" db:"timeCreation" json:"timeCreation"`
  Currency Currency `thrift:"currency,7" db:"currency" json:"currency"`
  Type TransactionType `thrift:"type,8" db:"type" json:"type"`
  // unused field # 9
  UserFields []byte `thrift:"userFields,10" db:"userFields" json:"userFields,omitempty"`
}

func NewShortTransaction() *ShortTransaction {
  return &ShortTransaction{}
}

var ShortTransaction_ID_DEFAULT *TransactionId
func (p *ShortTransaction) GetID() *TransactionId {
  if !p.IsSetID() {
    return ShortTransaction_ID_DEFAULT
  }
return p.ID
}

func (p *ShortTransaction) GetSource() general.Address {
  return p.Source
}

func (p *ShortTransaction) GetTarget() general.Address {
  return p.Target
}
var ShortTransaction_Amount_DEFAULT *general.Amount
func (p *ShortTransaction) GetAmount() *general.Amount {
  if !p.IsSetAmount() {
    return ShortTransaction_Amount_DEFAULT
  }
return p.Amount
}
var ShortTransaction_Fee_DEFAULT *AmountCommission
func (p *ShortTransaction) GetFee() *AmountCommission {
  if !p.IsSetFee() {
    return ShortTransaction_Fee_DEFAULT
  }
return p.Fee
}

func (p *ShortTransaction) GetTimeCreation() Time {
  return p.TimeCreation
}

func (p *ShortTransaction) GetCurrency() Currency {
  return p.Currency
}

func (p *ShortTransaction) GetType() TransactionType {
  return p.Type
}
var ShortTransaction_UserFields_DEFAULT []byte

func (p *ShortTransaction) GetUserFields() []byte {
  return p.UserFields
}
func (p *ShortTransaction) IsSetID() bool {
  return p.ID != nil
}

func (p *ShortTransaction) IsSetAmount() bool {
  return p.Amount != nil
}

func (p *ShortTransaction) IsSetFee() bool {
  return p.Fee != nil
}

func (p *ShortTransaction) IsSetUserFields() bool {
  return p.UserFields != nil
}

func (p *ShortTransaction) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ShortTransaction)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &TransactionId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *ShortTransaction)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := general.Address(v)
  p.Source = temp
}
  return nil
}

func (p *ShortTransaction)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := general.Address(v)
  p.Target = temp
}
  return nil
}

func (p *ShortTransaction)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Amount = &general.Amount{}
  if err := p.Amount.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Amount), err)
  }
  return nil
}

func (p *ShortTransaction)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.Fee = &AmountCommission{}
  if err := p.Fee.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Fee), err)
  }
  return nil
}

func (p *ShortTransaction)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Time(v)
  p.TimeCreation = temp
}
  return nil
}

func (p *ShortTransaction)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Currency(v)
  p.Currency = temp
}
  return nil
}

func (p *ShortTransaction)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := TransactionType(v)
  p.Type = temp
}
  return nil
}

func (p *ShortTransaction)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.UserFields = v
}
  return nil
}

func (p *ShortTransaction) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ShortTransaction"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShortTransaction) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *ShortTransaction) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "source", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:source: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Source); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:source: ", p), err) }
  return err
}

func (p *ShortTransaction) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "target", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:target: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Target); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.target (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:target: ", p), err) }
  return err
}

func (p *ShortTransaction) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "amount", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:amount: ", p), err) }
  if err := p.Amount.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Amount), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:amount: ", p), err) }
  return err
}

func (p *ShortTransaction) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fee", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fee: ", p), err) }
  if err := p.Fee.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Fee), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fee: ", p), err) }
  return err
}

func (p *ShortTransaction) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "timeCreation", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timeCreation: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TimeCreation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timeCreation (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timeCreation: ", p), err) }
  return err
}

func (p *ShortTransaction) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "currency", thrift.BYTE, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:currency: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:currency: ", p), err) }
  return err
}

func (p *ShortTransaction) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:type: ", p), err) }
  return err
}

func (p *ShortTransaction) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUserFields() {
    if err := oprot.WriteFieldBegin(ctx, "userFields", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:userFields: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.UserFields); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userFields (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:userFields: ", p), err) }
  }
  return err
}

func (p *ShortTransaction) Equals(other *ShortTransaction) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.ID.Equals(other.ID) { return false }
  if bytes.Compare(p.Source, other.Source) != 0 { return false }
  if bytes.Compare(p.Target, other.Target) != 0 { return false }
  if !p.Amount.Equals(other.Amount) { return false }
  if !p.Fee.Equals(other.Fee) { return false }
  if p.TimeCreation != other.TimeCreation { return false }
  if p.Currency != other.Currency { return false }
  if p.Type != other.Type { return false }
  if bytes.Compare(p.UserFields, other.UserFields) != 0 { return false }
  return true
}

func (p *ShortTransaction) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShortTransaction(%+v)", *p)
}

// Attributes:
//  - Hash
//  - PrevHash
//  - Time
//  - TransactionsCount
//  - PoolNumber
//  - Writer
//  - TotalFee
//  - Confidants
//  - RealTrusted
//  - NumberTrusted
//  - BlockReward
type Pool struct {
  Hash PoolHash `thrift:"hash,1" db:"hash" json:"hash"`
  PrevHash PoolHash `thrift:"prevHash,2" db:"prevHash" json:"prevHash"`
  Time Time `thrift:"time,3" db:"time" json:"time"`
  TransactionsCount int32 `thrift:"transactionsCount,4" db:"transactionsCount" json:"transactionsCount"`
  PoolNumber PoolNumber `thrift:"poolNumber,5" db:"poolNumber" json:"poolNumber"`
  Writer general.Address `thrift:"writer,6" db:"writer" json:"writer"`
  TotalFee *general.Amount `thrift:"totalFee,7" db:"totalFee" json:"totalFee"`
  Confidants []general.Address `thrift:"confidants,8" db:"confidants" json:"confidants"`
  RealTrusted int64 `thrift:"realTrusted,9" db:"realTrusted" json:"realTrusted"`
  NumberTrusted int8 `thrift:"numberTrusted,10" db:"numberTrusted" json:"numberTrusted"`
  BlockReward []*general.Amount `thrift:"blockReward,11" db:"blockReward" json:"blockReward,omitempty"`
}

func NewPool() *Pool {
  return &Pool{}
}


func (p *Pool) GetHash() PoolHash {
  return p.Hash
}

func (p *Pool) GetPrevHash() PoolHash {
  return p.PrevHash
}

func (p *Pool) GetTime() Time {
  return p.Time
}

func (p *Pool) GetTransactionsCount() int32 {
  return p.TransactionsCount
}

func (p *Pool) GetPoolNumber() PoolNumber {
  return p.PoolNumber
}

func (p *Pool) GetWriter() general.Address {
  return p.Writer
}
var Pool_TotalFee_DEFAULT *general.Amount
func (p *Pool) GetTotalFee() *general.Amount {
  if !p.IsSetTotalFee() {
    return Pool_TotalFee_DEFAULT
  }
return p.TotalFee
}

func (p *Pool) GetConfidants() []general.Address {
  return p.Confidants
}

func (p *Pool) GetRealTrusted() int64 {
  return p.RealTrusted
}

func (p *Pool) GetNumberTrusted() int8 {
  return p.NumberTrusted
}
var Pool_BlockReward_DEFAULT []*general.Amount

func (p *Pool) GetBlockReward() []*general.Amount {
  return p.BlockReward
}
func (p *Pool) IsSetTotalFee() bool {
  return p.TotalFee != nil
}

func (p *Pool) IsSetBlockReward() bool {
  return p.BlockReward != nil
}

func (p *Pool) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pool)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := PoolHash(v)
  p.Hash = temp
}
  return nil
}

func (p *Pool)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := PoolHash(v)
  p.PrevHash = temp
}
  return nil
}

func (p *Pool)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Time(v)
  p.Time = temp
}
  return nil
}

func (p *Pool)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TransactionsCount = v
}
  return nil
}

func (p *Pool)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := PoolNumber(v)
  p.PoolNumber = temp
}
  return nil
}

func (p *Pool)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := general.Address(v)
  p.Writer = temp
}
  return nil
}

func (p *Pool)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.TotalFee = &general.Amount{}
  if err := p.TotalFee.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TotalFee), err)
  }
  return nil
}

func (p *Pool)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]general.Address, 0, size)
  p.Confidants =  tSlice
  for i := 0; i < size; i ++ {
var _elem14 general.Address
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := general.Address(v)
    _elem14 = temp
}
    p.Confidants = append(p.Confidants, _elem14)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Pool)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.RealTrusted = v
}
  return nil
}

func (p *Pool)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := int8(v)
  p.NumberTrusted = temp
}
  return nil
}

func (p *Pool)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*general.Amount, 0, size)
  p.BlockReward =  tSlice
  for i := 0; i < size; i ++ {
    _elem15 := &general.Amount{}
    if err := _elem15.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
    }
    p.BlockReward = append(p.BlockReward, _elem15)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Pool) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Pool"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pool) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Hash); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash: ", p), err) }
  return err
}

func (p *Pool) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "prevHash", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:prevHash: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.PrevHash); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prevHash (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:prevHash: ", p), err) }
  return err
}

func (p *Pool) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "time", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:time: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Time)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:time: ", p), err) }
  return err
}

func (p *Pool) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactionsCount", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:transactionsCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TransactionsCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transactionsCount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:transactionsCount: ", p), err) }
  return err
}

func (p *Pool) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "poolNumber", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:poolNumber: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PoolNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.poolNumber (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:poolNumber: ", p), err) }
  return err
}

func (p *Pool) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "writer", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:writer: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Writer); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.writer (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:writer: ", p), err) }
  return err
}

func (p *Pool) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "totalFee", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:totalFee: ", p), err) }
  if err := p.TotalFee.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TotalFee), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:totalFee: ", p), err) }
  return err
}

func (p *Pool) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "confidants", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:confidants: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Confidants)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Confidants {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:confidants: ", p), err) }
  return err
}

func (p *Pool) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "realTrusted", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:realTrusted: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RealTrusted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.realTrusted (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:realTrusted: ", p), err) }
  return err
}

func (p *Pool) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "numberTrusted", thrift.BYTE, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:numberTrusted: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.NumberTrusted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numberTrusted (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:numberTrusted: ", p), err) }
  return err
}

func (p *Pool) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBlockReward() {
    if err := oprot.WriteFieldBegin(ctx, "blockReward", thrift.LIST, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:blockReward: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.BlockReward)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.BlockReward {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:blockReward: ", p), err) }
  }
  return err
}

func (p *Pool) Equals(other *Pool) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Hash, other.Hash) != 0 { return false }
  if bytes.Compare(p.PrevHash, other.PrevHash) != 0 { return false }
  if p.Time != other.Time { return false }
  if p.TransactionsCount != other.TransactionsCount { return false }
  if p.PoolNumber != other.PoolNumber { return false }
  if bytes.Compare(p.Writer, other.Writer) != 0 { return false }
  if !p.TotalFee.Equals(other.TotalFee) { return false }
  if len(p.Confidants) != len(other.Confidants) { return false }
  for i, _tgt := range p.Confidants {
    _src16 := other.Confidants[i]
    if bytes.Compare(_tgt, _src16) != 0 { return false }
  }
  if p.RealTrusted != other.RealTrusted { return false }
  if p.NumberTrusted != other.NumberTrusted { return false }
  if len(p.BlockReward) != len(other.BlockReward) { return false }
  for i, _tgt := range p.BlockReward {
    _src17 := other.BlockReward[i]
    if !_tgt.Equals(_src17) { return false }
  }
  return true
}

func (p *Pool) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pool(%+v)", *p)
}

// Attributes:
//  - Wallet
//  - Sum
//  - ValidUntil
//  - FromTime
//  - Coeff
type DelegatedItem struct {
  Wallet general.Address `thrift:"wallet,1" db:"wallet" json:"wallet"`
  Sum *general.Amount `thrift:"sum,2" db:"sum" json:"sum"`
  ValidUntil *int64 `thrift:"validUntil,3" db:"validUntil" json:"validUntil,omitempty"`
  FromTime *int64 `thrift:"fromTime,4" db:"fromTime" json:"fromTime,omitempty"`
  Coeff *int8 `thrift:"coeff,5" db:"coeff" json:"coeff,omitempty"`
}

func NewDelegatedItem() *DelegatedItem {
  return &DelegatedItem{}
}


func (p *DelegatedItem) GetWallet() general.Address {
  return p.Wallet
}
var DelegatedItem_Sum_DEFAULT *general.Amount
func (p *DelegatedItem) GetSum() *general.Amount {
  if !p.IsSetSum() {
    return DelegatedItem_Sum_DEFAULT
  }
return p.Sum
}
var DelegatedItem_ValidUntil_DEFAULT int64
func (p *DelegatedItem) GetValidUntil() int64 {
  if !p.IsSetValidUntil() {
    return DelegatedItem_ValidUntil_DEFAULT
  }
return *p.ValidUntil
}
var DelegatedItem_FromTime_DEFAULT int64
func (p *DelegatedItem) GetFromTime() int64 {
  if !p.IsSetFromTime() {
    return DelegatedItem_FromTime_DEFAULT
  }
return *p.FromTime
}
var DelegatedItem_Coeff_DEFAULT int8
func (p *DelegatedItem) GetCoeff() int8 {
  if !p.IsSetCoeff() {
    return DelegatedItem_Coeff_DEFAULT
  }
return *p.Coeff
}
func (p *DelegatedItem) IsSetSum() bool {
  return p.Sum != nil
}

func (p *DelegatedItem) IsSetValidUntil() bool {
  return p.ValidUntil != nil
}

func (p *DelegatedItem) IsSetFromTime() bool {
  return p.FromTime != nil
}

func (p *DelegatedItem) IsSetCoeff() bool {
  return p.Coeff != nil
}

func (p *DelegatedItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DelegatedItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Wallet = temp
}
  return nil
}

func (p *DelegatedItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Sum = &general.Amount{}
  if err := p.Sum.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sum), err)
  }
  return nil
}

func (p *DelegatedItem)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ValidUntil = &v
}
  return nil
}

func (p *DelegatedItem)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FromTime = &v
}
  return nil
}

func (p *DelegatedItem)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := int8(v)
  p.Coeff = &temp
}
  return nil
}

func (p *DelegatedItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DelegatedItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DelegatedItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "wallet", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:wallet: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Wallet); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.wallet (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:wallet: ", p), err) }
  return err
}

func (p *DelegatedItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sum", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sum: ", p), err) }
  if err := p.Sum.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sum), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sum: ", p), err) }
  return err
}

func (p *DelegatedItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetValidUntil() {
    if err := oprot.WriteFieldBegin(ctx, "validUntil", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:validUntil: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.ValidUntil)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.validUntil (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:validUntil: ", p), err) }
  }
  return err
}

func (p *DelegatedItem) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFromTime() {
    if err := oprot.WriteFieldBegin(ctx, "fromTime", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fromTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.FromTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.fromTime (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fromTime: ", p), err) }
  }
  return err
}

func (p *DelegatedItem) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCoeff() {
    if err := oprot.WriteFieldBegin(ctx, "coeff", thrift.BYTE, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:coeff: ", p), err) }
    if err := oprot.WriteByte(ctx, int8(*p.Coeff)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.coeff (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:coeff: ", p), err) }
  }
  return err
}

func (p *DelegatedItem) Equals(other *DelegatedItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Wallet, other.Wallet) != 0 { return false }
  if !p.Sum.Equals(other.Sum) { return false }
  if p.ValidUntil != other.ValidUntil {
    if p.ValidUntil == nil || other.ValidUntil == nil {
      return false
    }
    if (*p.ValidUntil) != (*other.ValidUntil) { return false }
  }
  if p.FromTime != other.FromTime {
    if p.FromTime == nil || other.FromTime == nil {
      return false
    }
    if (*p.FromTime) != (*other.FromTime) { return false }
  }
  if p.Coeff != other.Coeff {
    if p.Coeff == nil || other.Coeff == nil {
      return false
    }
    if (*p.Coeff) != (*other.Coeff) { return false }
  }
  return true
}

func (p *DelegatedItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DelegatedItem(%+v)", *p)
}

// Attributes:
//  - Incoming
//  - Outgoing
//  - Donors
//  - Recipients
type Delegated struct {
  Incoming *general.Amount `thrift:"incoming,1" db:"incoming" json:"incoming"`
  Outgoing *general.Amount `thrift:"outgoing,2" db:"outgoing" json:"outgoing"`
  Donors []*DelegatedItem `thrift:"donors,3" db:"donors" json:"donors,omitempty"`
  Recipients []*DelegatedItem `thrift:"recipients,4" db:"recipients" json:"recipients,omitempty"`
}

func NewDelegated() *Delegated {
  return &Delegated{}
}

var Delegated_Incoming_DEFAULT *general.Amount
func (p *Delegated) GetIncoming() *general.Amount {
  if !p.IsSetIncoming() {
    return Delegated_Incoming_DEFAULT
  }
return p.Incoming
}
var Delegated_Outgoing_DEFAULT *general.Amount
func (p *Delegated) GetOutgoing() *general.Amount {
  if !p.IsSetOutgoing() {
    return Delegated_Outgoing_DEFAULT
  }
return p.Outgoing
}
var Delegated_Donors_DEFAULT []*DelegatedItem

func (p *Delegated) GetDonors() []*DelegatedItem {
  return p.Donors
}
var Delegated_Recipients_DEFAULT []*DelegatedItem

func (p *Delegated) GetRecipients() []*DelegatedItem {
  return p.Recipients
}
func (p *Delegated) IsSetIncoming() bool {
  return p.Incoming != nil
}

func (p *Delegated) IsSetOutgoing() bool {
  return p.Outgoing != nil
}

func (p *Delegated) IsSetDonors() bool {
  return p.Donors != nil
}

func (p *Delegated) IsSetRecipients() bool {
  return p.Recipients != nil
}

func (p *Delegated) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Delegated)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Incoming = &general.Amount{}
  if err := p.Incoming.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Incoming), err)
  }
  return nil
}

func (p *Delegated)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Outgoing = &general.Amount{}
  if err := p.Outgoing.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Outgoing), err)
  }
  return nil
}

func (p *Delegated)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DelegatedItem, 0, size)
  p.Donors =  tSlice
  for i := 0; i < size; i ++ {
    _elem18 := &DelegatedItem{}
    if err := _elem18.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
    }
    p.Donors = append(p.Donors, _elem18)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Delegated)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DelegatedItem, 0, size)
  p.Recipients =  tSlice
  for i := 0; i < size; i ++ {
    _elem19 := &DelegatedItem{}
    if err := _elem19.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
    }
    p.Recipients = append(p.Recipients, _elem19)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Delegated) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Delegated"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Delegated) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "incoming", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:incoming: ", p), err) }
  if err := p.Incoming.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Incoming), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:incoming: ", p), err) }
  return err
}

func (p *Delegated) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "outgoing", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:outgoing: ", p), err) }
  if err := p.Outgoing.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Outgoing), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:outgoing: ", p), err) }
  return err
}

func (p *Delegated) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDonors() {
    if err := oprot.WriteFieldBegin(ctx, "donors", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:donors: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Donors)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Donors {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:donors: ", p), err) }
  }
  return err
}

func (p *Delegated) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRecipients() {
    if err := oprot.WriteFieldBegin(ctx, "recipients", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:recipients: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Recipients)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Recipients {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:recipients: ", p), err) }
  }
  return err
}

func (p *Delegated) Equals(other *Delegated) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Incoming.Equals(other.Incoming) { return false }
  if !p.Outgoing.Equals(other.Outgoing) { return false }
  if len(p.Donors) != len(other.Donors) { return false }
  for i, _tgt := range p.Donors {
    _src20 := other.Donors[i]
    if !_tgt.Equals(_src20) { return false }
  }
  if len(p.Recipients) != len(other.Recipients) { return false }
  for i, _tgt := range p.Recipients {
    _src21 := other.Recipients[i]
    if !_tgt.Equals(_src21) { return false }
  }
  return true
}

func (p *Delegated) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Delegated(%+v)", *p)
}

// Attributes:
//  - WalletId
//  - Balance
//  - LastTransactionId
//  - Delegated
type WalletData struct {
  WalletId WalletId `thrift:"walletId,1" db:"walletId" json:"walletId"`
  Balance *general.Amount `thrift:"balance,2" db:"balance" json:"balance"`
  LastTransactionId TransactionInnerId `thrift:"lastTransactionId,3" db:"lastTransactionId" json:"lastTransactionId"`
  Delegated *Delegated `thrift:"delegated,4" db:"delegated" json:"delegated,omitempty"`
}

func NewWalletData() *WalletData {
  return &WalletData{}
}


func (p *WalletData) GetWalletId() WalletId {
  return p.WalletId
}
var WalletData_Balance_DEFAULT *general.Amount
func (p *WalletData) GetBalance() *general.Amount {
  if !p.IsSetBalance() {
    return WalletData_Balance_DEFAULT
  }
return p.Balance
}

func (p *WalletData) GetLastTransactionId() TransactionInnerId {
  return p.LastTransactionId
}
var WalletData_Delegated_DEFAULT *Delegated
func (p *WalletData) GetDelegated() *Delegated {
  if !p.IsSetDelegated() {
    return WalletData_Delegated_DEFAULT
  }
return p.Delegated
}
func (p *WalletData) IsSetBalance() bool {
  return p.Balance != nil
}

func (p *WalletData) IsSetDelegated() bool {
  return p.Delegated != nil
}

func (p *WalletData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WalletData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := WalletId(v)
  p.WalletId = temp
}
  return nil
}

func (p *WalletData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Balance = &general.Amount{}
  if err := p.Balance.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Balance), err)
  }
  return nil
}

func (p *WalletData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TransactionInnerId(v)
  p.LastTransactionId = temp
}
  return nil
}

func (p *WalletData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Delegated = &Delegated{}
  if err := p.Delegated.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Delegated), err)
  }
  return nil
}

func (p *WalletData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WalletData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "walletId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:walletId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.WalletId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.walletId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:walletId: ", p), err) }
  return err
}

func (p *WalletData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "balance", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:balance: ", p), err) }
  if err := p.Balance.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Balance), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:balance: ", p), err) }
  return err
}

func (p *WalletData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastTransactionId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastTransactionId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastTransactionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastTransactionId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastTransactionId: ", p), err) }
  return err
}

func (p *WalletData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDelegated() {
    if err := oprot.WriteFieldBegin(ctx, "delegated", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:delegated: ", p), err) }
    if err := p.Delegated.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Delegated), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:delegated: ", p), err) }
  }
  return err
}

func (p *WalletData) Equals(other *WalletData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.WalletId != other.WalletId { return false }
  if !p.Balance.Equals(other.Balance) { return false }
  if p.LastTransactionId != other.LastTransactionId { return false }
  if !p.Delegated.Equals(other.Delegated) { return false }
  return true
}

func (p *WalletData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WalletData(%+v)", *p)
}

// Attributes:
//  - PeriodDuration
//  - PoolsCount
//  - TransactionsCount
//  - BalancePerCurrency
//  - SmartContractsCount
//  - TransactionsSmartCount
type PeriodStats struct {
  PeriodDuration Time `thrift:"periodDuration,1" db:"periodDuration" json:"periodDuration"`
  PoolsCount Count `thrift:"poolsCount,2" db:"poolsCount" json:"poolsCount"`
  TransactionsCount Count `thrift:"transactionsCount,3" db:"transactionsCount" json:"transactionsCount"`
  BalancePerCurrency Total `thrift:"balancePerCurrency,4" db:"balancePerCurrency" json:"balancePerCurrency"`
  SmartContractsCount Count `thrift:"smartContractsCount,5" db:"smartContractsCount" json:"smartContractsCount"`
  TransactionsSmartCount Count `thrift:"transactionsSmartCount,6" db:"transactionsSmartCount" json:"transactionsSmartCount"`
}

func NewPeriodStats() *PeriodStats {
  return &PeriodStats{}
}


func (p *PeriodStats) GetPeriodDuration() Time {
  return p.PeriodDuration
}

func (p *PeriodStats) GetPoolsCount() Count {
  return p.PoolsCount
}

func (p *PeriodStats) GetTransactionsCount() Count {
  return p.TransactionsCount
}

func (p *PeriodStats) GetBalancePerCurrency() Total {
  return p.BalancePerCurrency
}

func (p *PeriodStats) GetSmartContractsCount() Count {
  return p.SmartContractsCount
}

func (p *PeriodStats) GetTransactionsSmartCount() Count {
  return p.TransactionsSmartCount
}
func (p *PeriodStats) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PeriodStats)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Time(v)
  p.PeriodDuration = temp
}
  return nil
}

func (p *PeriodStats)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Count(v)
  p.PoolsCount = temp
}
  return nil
}

func (p *PeriodStats)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Count(v)
  p.TransactionsCount = temp
}
  return nil
}

func (p *PeriodStats)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(Total, size)
  p.BalancePerCurrency =  tMap
  for i := 0; i < size; i ++ {
var _key22 Currency
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := Currency(v)
    _key22 = temp
}
    _val23 := &CumulativeAmount{}
    if err := _val23.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val23), err)
    }
    p.BalancePerCurrency[_key22] = _val23
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PeriodStats)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Count(v)
  p.SmartContractsCount = temp
}
  return nil
}

func (p *PeriodStats)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Count(v)
  p.TransactionsSmartCount = temp
}
  return nil
}

func (p *PeriodStats) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PeriodStats"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PeriodStats) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "periodDuration", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:periodDuration: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PeriodDuration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.periodDuration (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:periodDuration: ", p), err) }
  return err
}

func (p *PeriodStats) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "poolsCount", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:poolsCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PoolsCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.poolsCount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:poolsCount: ", p), err) }
  return err
}

func (p *PeriodStats) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactionsCount", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:transactionsCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TransactionsCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transactionsCount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:transactionsCount: ", p), err) }
  return err
}

func (p *PeriodStats) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "balancePerCurrency", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:balancePerCurrency: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.BYTE, thrift.STRUCT, len(p.BalancePerCurrency)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.BalancePerCurrency {
    if err := oprot.WriteByte(ctx, int8(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:balancePerCurrency: ", p), err) }
  return err
}

func (p *PeriodStats) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "smartContractsCount", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:smartContractsCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SmartContractsCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.smartContractsCount (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:smartContractsCount: ", p), err) }
  return err
}

func (p *PeriodStats) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactionsSmartCount", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:transactionsSmartCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TransactionsSmartCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transactionsSmartCount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:transactionsSmartCount: ", p), err) }
  return err
}

func (p *PeriodStats) Equals(other *PeriodStats) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PeriodDuration != other.PeriodDuration { return false }
  if p.PoolsCount != other.PoolsCount { return false }
  if p.TransactionsCount != other.TransactionsCount { return false }
  if len(p.BalancePerCurrency) != len(other.BalancePerCurrency) { return false }
  for k, _tgt := range p.BalancePerCurrency {
    _src24 := other.BalancePerCurrency[k]
    if !_tgt.Equals(_src24) { return false }
  }
  if p.SmartContractsCount != other.SmartContractsCount { return false }
  if p.TransactionsSmartCount != other.TransactionsSmartCount { return false }
  return true
}

func (p *PeriodStats) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PeriodStats(%+v)", *p)
}

// Attributes:
//  - Status
//  - WalletData
type WalletDataGetResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  WalletData *WalletData `thrift:"walletData,2" db:"walletData" json:"walletData"`
}

func NewWalletDataGetResult_() *WalletDataGetResult_ {
  return &WalletDataGetResult_{}
}

var WalletDataGetResult__Status_DEFAULT *general.APIResponse
func (p *WalletDataGetResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return WalletDataGetResult__Status_DEFAULT
  }
return p.Status
}
var WalletDataGetResult__WalletData_DEFAULT *WalletData
func (p *WalletDataGetResult_) GetWalletData() *WalletData {
  if !p.IsSetWalletData() {
    return WalletDataGetResult__WalletData_DEFAULT
  }
return p.WalletData
}
func (p *WalletDataGetResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *WalletDataGetResult_) IsSetWalletData() bool {
  return p.WalletData != nil
}

func (p *WalletDataGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WalletDataGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *WalletDataGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.WalletData = &WalletData{}
  if err := p.WalletData.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WalletData), err)
  }
  return nil
}

func (p *WalletDataGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletDataGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WalletDataGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *WalletDataGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "walletData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:walletData: ", p), err) }
  if err := p.WalletData.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WalletData), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:walletData: ", p), err) }
  return err
}

func (p *WalletDataGetResult_) Equals(other *WalletDataGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if !p.WalletData.Equals(other.WalletData) { return false }
  return true
}

func (p *WalletDataGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WalletDataGetResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - WalletId
type WalletIdGetResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  WalletId WalletId `thrift:"walletId,2" db:"walletId" json:"walletId"`
}

func NewWalletIdGetResult_() *WalletIdGetResult_ {
  return &WalletIdGetResult_{}
}

var WalletIdGetResult__Status_DEFAULT *general.APIResponse
func (p *WalletIdGetResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return WalletIdGetResult__Status_DEFAULT
  }
return p.Status
}

func (p *WalletIdGetResult_) GetWalletId() WalletId {
  return p.WalletId
}
func (p *WalletIdGetResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *WalletIdGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WalletIdGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *WalletIdGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := WalletId(v)
  p.WalletId = temp
}
  return nil
}

func (p *WalletIdGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletIdGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WalletIdGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *WalletIdGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "walletId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:walletId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.WalletId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.walletId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:walletId: ", p), err) }
  return err
}

func (p *WalletIdGetResult_) Equals(other *WalletIdGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.WalletId != other.WalletId { return false }
  return true
}

func (p *WalletIdGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WalletIdGetResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - LastTransactionInnerId
type WalletTransactionsCountGetResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  LastTransactionInnerId TransactionInnerId `thrift:"lastTransactionInnerId,2" db:"lastTransactionInnerId" json:"lastTransactionInnerId"`
}

func NewWalletTransactionsCountGetResult_() *WalletTransactionsCountGetResult_ {
  return &WalletTransactionsCountGetResult_{}
}

var WalletTransactionsCountGetResult__Status_DEFAULT *general.APIResponse
func (p *WalletTransactionsCountGetResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return WalletTransactionsCountGetResult__Status_DEFAULT
  }
return p.Status
}

func (p *WalletTransactionsCountGetResult_) GetLastTransactionInnerId() TransactionInnerId {
  return p.LastTransactionInnerId
}
func (p *WalletTransactionsCountGetResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *WalletTransactionsCountGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WalletTransactionsCountGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *WalletTransactionsCountGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TransactionInnerId(v)
  p.LastTransactionInnerId = temp
}
  return nil
}

func (p *WalletTransactionsCountGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletTransactionsCountGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WalletTransactionsCountGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *WalletTransactionsCountGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastTransactionInnerId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastTransactionInnerId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastTransactionInnerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastTransactionInnerId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastTransactionInnerId: ", p), err) }
  return err
}

func (p *WalletTransactionsCountGetResult_) Equals(other *WalletTransactionsCountGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.LastTransactionInnerId != other.LastTransactionInnerId { return false }
  return true
}

func (p *WalletTransactionsCountGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WalletTransactionsCountGetResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - Balance
//  - Delegated
type WalletBalanceGetResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Balance *general.Amount `thrift:"balance,2" db:"balance" json:"balance"`
  Delegated *Delegated `thrift:"delegated,3" db:"delegated" json:"delegated,omitempty"`
}

func NewWalletBalanceGetResult_() *WalletBalanceGetResult_ {
  return &WalletBalanceGetResult_{}
}

var WalletBalanceGetResult__Status_DEFAULT *general.APIResponse
func (p *WalletBalanceGetResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return WalletBalanceGetResult__Status_DEFAULT
  }
return p.Status
}
var WalletBalanceGetResult__Balance_DEFAULT *general.Amount
func (p *WalletBalanceGetResult_) GetBalance() *general.Amount {
  if !p.IsSetBalance() {
    return WalletBalanceGetResult__Balance_DEFAULT
  }
return p.Balance
}
var WalletBalanceGetResult__Delegated_DEFAULT *Delegated
func (p *WalletBalanceGetResult_) GetDelegated() *Delegated {
  if !p.IsSetDelegated() {
    return WalletBalanceGetResult__Delegated_DEFAULT
  }
return p.Delegated
}
func (p *WalletBalanceGetResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *WalletBalanceGetResult_) IsSetBalance() bool {
  return p.Balance != nil
}

func (p *WalletBalanceGetResult_) IsSetDelegated() bool {
  return p.Delegated != nil
}

func (p *WalletBalanceGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WalletBalanceGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *WalletBalanceGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Balance = &general.Amount{}
  if err := p.Balance.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Balance), err)
  }
  return nil
}

func (p *WalletBalanceGetResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Delegated = &Delegated{}
  if err := p.Delegated.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Delegated), err)
  }
  return nil
}

func (p *WalletBalanceGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletBalanceGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WalletBalanceGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *WalletBalanceGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "balance", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:balance: ", p), err) }
  if err := p.Balance.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Balance), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:balance: ", p), err) }
  return err
}

func (p *WalletBalanceGetResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDelegated() {
    if err := oprot.WriteFieldBegin(ctx, "delegated", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:delegated: ", p), err) }
    if err := p.Delegated.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Delegated), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:delegated: ", p), err) }
  }
  return err
}

func (p *WalletBalanceGetResult_) Equals(other *WalletBalanceGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if !p.Balance.Equals(other.Balance) { return false }
  if !p.Delegated.Equals(other.Delegated) { return false }
  return true
}

func (p *WalletBalanceGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WalletBalanceGetResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - Found
//  - State
//  - RoundNum
//  - Transaction
type TransactionGetResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Found bool `thrift:"found,2" db:"found" json:"found"`
  State TransactionState `thrift:"state,3" db:"state" json:"state"`
  RoundNum int32 `thrift:"roundNum,4" db:"roundNum" json:"roundNum"`
  Transaction *SealedTransaction `thrift:"transaction,5" db:"transaction" json:"transaction"`
}

func NewTransactionGetResult_() *TransactionGetResult_ {
  return &TransactionGetResult_{}
}

var TransactionGetResult__Status_DEFAULT *general.APIResponse
func (p *TransactionGetResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return TransactionGetResult__Status_DEFAULT
  }
return p.Status
}

func (p *TransactionGetResult_) GetFound() bool {
  return p.Found
}

func (p *TransactionGetResult_) GetState() TransactionState {
  return p.State
}

func (p *TransactionGetResult_) GetRoundNum() int32 {
  return p.RoundNum
}
var TransactionGetResult__Transaction_DEFAULT *SealedTransaction
func (p *TransactionGetResult_) GetTransaction() *SealedTransaction {
  if !p.IsSetTransaction() {
    return TransactionGetResult__Transaction_DEFAULT
  }
return p.Transaction
}
func (p *TransactionGetResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TransactionGetResult_) IsSetTransaction() bool {
  return p.Transaction != nil
}

func (p *TransactionGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransactionGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TransactionGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Found = v
}
  return nil
}

func (p *TransactionGetResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TransactionState(v)
  p.State = temp
}
  return nil
}

func (p *TransactionGetResult_)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RoundNum = v
}
  return nil
}

func (p *TransactionGetResult_)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.Transaction = &SealedTransaction{}
  if err := p.Transaction.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Transaction), err)
  }
  return nil
}

func (p *TransactionGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransactionGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TransactionGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "found", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:found: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Found)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.found (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:found: ", p), err) }
  return err
}

func (p *TransactionGetResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "state", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:state: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:state: ", p), err) }
  return err
}

func (p *TransactionGetResult_) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roundNum", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:roundNum: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RoundNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roundNum (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:roundNum: ", p), err) }
  return err
}

func (p *TransactionGetResult_) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transaction", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:transaction: ", p), err) }
  if err := p.Transaction.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Transaction), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:transaction: ", p), err) }
  return err
}

func (p *TransactionGetResult_) Equals(other *TransactionGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.Found != other.Found { return false }
  if p.State != other.State { return false }
  if p.RoundNum != other.RoundNum { return false }
  if !p.Transaction.Equals(other.Transaction) { return false }
  return true
}

func (p *TransactionGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransactionGetResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - Result_
//  - TotalTrxnsCount
//  - Transactions
type TransactionsGetResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Result_ bool `thrift:"result,2" db:"result" json:"result"`
  TotalTrxnsCount int32 `thrift:"total_trxns_count,3" db:"total_trxns_count" json:"total_trxns_count"`
  Transactions []*SealedTransaction `thrift:"transactions,4" db:"transactions" json:"transactions"`
}

func NewTransactionsGetResult_() *TransactionsGetResult_ {
  return &TransactionsGetResult_{}
}

var TransactionsGetResult__Status_DEFAULT *general.APIResponse
func (p *TransactionsGetResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return TransactionsGetResult__Status_DEFAULT
  }
return p.Status
}

func (p *TransactionsGetResult_) GetResult_() bool {
  return p.Result_
}

func (p *TransactionsGetResult_) GetTotalTrxnsCount() int32 {
  return p.TotalTrxnsCount
}

func (p *TransactionsGetResult_) GetTransactions() []*SealedTransaction {
  return p.Transactions
}
func (p *TransactionsGetResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TransactionsGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransactionsGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TransactionsGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *TransactionsGetResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TotalTrxnsCount = v
}
  return nil
}

func (p *TransactionsGetResult_)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SealedTransaction, 0, size)
  p.Transactions =  tSlice
  for i := 0; i < size; i ++ {
    _elem25 := &SealedTransaction{}
    if err := _elem25.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem25), err)
    }
    p.Transactions = append(p.Transactions, _elem25)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TransactionsGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionsGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransactionsGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TransactionsGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *TransactionsGetResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "total_trxns_count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total_trxns_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TotalTrxnsCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_trxns_count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total_trxns_count: ", p), err) }
  return err
}

func (p *TransactionsGetResult_) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactions", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:transactions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Transactions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Transactions {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:transactions: ", p), err) }
  return err
}

func (p *TransactionsGetResult_) Equals(other *TransactionsGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.Result_ != other.Result_ { return false }
  if p.TotalTrxnsCount != other.TotalTrxnsCount { return false }
  if len(p.Transactions) != len(other.Transactions) { return false }
  for i, _tgt := range p.Transactions {
    _src26 := other.Transactions[i]
    if !_tgt.Equals(_src26) { return false }
  }
  return true
}

func (p *TransactionsGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransactionsGetResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - SmartContractResult_
//  - RoundNum
//  - ID
//  - StateId
//  - Fee
//  - ExtraFee
type TransactionFlowResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  SmartContractResult_ *general.Variant `thrift:"smart_contract_result,2" db:"smart_contract_result" json:"smart_contract_result,omitempty"`
  RoundNum int32 `thrift:"roundNum,3" db:"roundNum" json:"roundNum"`
  ID *TransactionId `thrift:"id,4" db:"id" json:"id"`
  StateId *TransactionId `thrift:"stateId,5" db:"stateId" json:"stateId,omitempty"`
  Fee *general.Amount `thrift:"fee,6" db:"fee" json:"fee"`
  ExtraFee []*ExtraFee `thrift:"extraFee,7" db:"extraFee" json:"extraFee,omitempty"`
}

func NewTransactionFlowResult_() *TransactionFlowResult_ {
  return &TransactionFlowResult_{}
}

var TransactionFlowResult__Status_DEFAULT *general.APIResponse
func (p *TransactionFlowResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return TransactionFlowResult__Status_DEFAULT
  }
return p.Status
}
var TransactionFlowResult__SmartContractResult__DEFAULT *general.Variant
func (p *TransactionFlowResult_) GetSmartContractResult_() *general.Variant {
  if !p.IsSetSmartContractResult_() {
    return TransactionFlowResult__SmartContractResult__DEFAULT
  }
return p.SmartContractResult_
}

func (p *TransactionFlowResult_) GetRoundNum() int32 {
  return p.RoundNum
}
var TransactionFlowResult__ID_DEFAULT *TransactionId
func (p *TransactionFlowResult_) GetID() *TransactionId {
  if !p.IsSetID() {
    return TransactionFlowResult__ID_DEFAULT
  }
return p.ID
}
var TransactionFlowResult__StateId_DEFAULT *TransactionId
func (p *TransactionFlowResult_) GetStateId() *TransactionId {
  if !p.IsSetStateId() {
    return TransactionFlowResult__StateId_DEFAULT
  }
return p.StateId
}
var TransactionFlowResult__Fee_DEFAULT *general.Amount
func (p *TransactionFlowResult_) GetFee() *general.Amount {
  if !p.IsSetFee() {
    return TransactionFlowResult__Fee_DEFAULT
  }
return p.Fee
}
var TransactionFlowResult__ExtraFee_DEFAULT []*ExtraFee

func (p *TransactionFlowResult_) GetExtraFee() []*ExtraFee {
  return p.ExtraFee
}
func (p *TransactionFlowResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TransactionFlowResult_) IsSetSmartContractResult_() bool {
  return p.SmartContractResult_ != nil
}

func (p *TransactionFlowResult_) IsSetID() bool {
  return p.ID != nil
}

func (p *TransactionFlowResult_) IsSetStateId() bool {
  return p.StateId != nil
}

func (p *TransactionFlowResult_) IsSetFee() bool {
  return p.Fee != nil
}

func (p *TransactionFlowResult_) IsSetExtraFee() bool {
  return p.ExtraFee != nil
}

func (p *TransactionFlowResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransactionFlowResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TransactionFlowResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SmartContractResult_ = &general.Variant{}
  if err := p.SmartContractResult_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SmartContractResult_), err)
  }
  return nil
}

func (p *TransactionFlowResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoundNum = v
}
  return nil
}

func (p *TransactionFlowResult_)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &TransactionId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *TransactionFlowResult_)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.StateId = &TransactionId{}
  if err := p.StateId.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StateId), err)
  }
  return nil
}

func (p *TransactionFlowResult_)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.Fee = &general.Amount{}
  if err := p.Fee.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Fee), err)
  }
  return nil
}

func (p *TransactionFlowResult_)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ExtraFee, 0, size)
  p.ExtraFee =  tSlice
  for i := 0; i < size; i ++ {
    _elem27 := &ExtraFee{}
    if err := _elem27.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem27), err)
    }
    p.ExtraFee = append(p.ExtraFee, _elem27)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TransactionFlowResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionFlowResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransactionFlowResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TransactionFlowResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSmartContractResult_() {
    if err := oprot.WriteFieldBegin(ctx, "smart_contract_result", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:smart_contract_result: ", p), err) }
    if err := p.SmartContractResult_.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SmartContractResult_), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:smart_contract_result: ", p), err) }
  }
  return err
}

func (p *TransactionFlowResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roundNum", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roundNum: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RoundNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roundNum (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roundNum: ", p), err) }
  return err
}

func (p *TransactionFlowResult_) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:id: ", p), err) }
  return err
}

func (p *TransactionFlowResult_) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStateId() {
    if err := oprot.WriteFieldBegin(ctx, "stateId", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:stateId: ", p), err) }
    if err := p.StateId.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StateId), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:stateId: ", p), err) }
  }
  return err
}

func (p *TransactionFlowResult_) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fee", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fee: ", p), err) }
  if err := p.Fee.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Fee), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fee: ", p), err) }
  return err
}

func (p *TransactionFlowResult_) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraFee() {
    if err := oprot.WriteFieldBegin(ctx, "extraFee", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:extraFee: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ExtraFee)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ExtraFee {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:extraFee: ", p), err) }
  }
  return err
}

func (p *TransactionFlowResult_) Equals(other *TransactionFlowResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if !p.SmartContractResult_.Equals(other.SmartContractResult_) { return false }
  if p.RoundNum != other.RoundNum { return false }
  if !p.ID.Equals(other.ID) { return false }
  if !p.StateId.Equals(other.StateId) { return false }
  if !p.Fee.Equals(other.Fee) { return false }
  if len(p.ExtraFee) != len(other.ExtraFee) { return false }
  for i, _tgt := range p.ExtraFee {
    _src28 := other.ExtraFee[i]
    if !_tgt.Equals(_src28) { return false }
  }
  return true
}

func (p *TransactionFlowResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransactionFlowResult_(%+v)", *p)
}

// Attributes:
//  - TokenAddress
//  - FromId
type SingleTokenQuery struct {
  TokenAddress general.Address `thrift:"tokenAddress,1" db:"tokenAddress" json:"tokenAddress"`
  FromId *TransactionId `thrift:"fromId,2" db:"fromId" json:"fromId"`
}

func NewSingleTokenQuery() *SingleTokenQuery {
  return &SingleTokenQuery{}
}


func (p *SingleTokenQuery) GetTokenAddress() general.Address {
  return p.TokenAddress
}
var SingleTokenQuery_FromId_DEFAULT *TransactionId
func (p *SingleTokenQuery) GetFromId() *TransactionId {
  if !p.IsSetFromId() {
    return SingleTokenQuery_FromId_DEFAULT
  }
return p.FromId
}
func (p *SingleTokenQuery) IsSetFromId() bool {
  return p.FromId != nil
}

func (p *SingleTokenQuery) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SingleTokenQuery)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.TokenAddress = temp
}
  return nil
}

func (p *SingleTokenQuery)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.FromId = &TransactionId{}
  if err := p.FromId.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FromId), err)
  }
  return nil
}

func (p *SingleTokenQuery) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SingleTokenQuery"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SingleTokenQuery) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tokenAddress", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tokenAddress: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TokenAddress); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tokenAddress (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tokenAddress: ", p), err) }
  return err
}

func (p *SingleTokenQuery) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromId", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromId: ", p), err) }
  if err := p.FromId.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FromId), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromId: ", p), err) }
  return err
}

func (p *SingleTokenQuery) Equals(other *SingleTokenQuery) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.TokenAddress, other.TokenAddress) != 0 { return false }
  if !p.FromId.Equals(other.FromId) { return false }
  return true
}

func (p *SingleTokenQuery) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SingleTokenQuery(%+v)", *p)
}

// Attributes:
//  - RequestedAddress
//  - FromId
//  - TokensList
type SingleQuery struct {
  RequestedAddress general.Address `thrift:"requestedAddress,1" db:"requestedAddress" json:"requestedAddress"`
  FromId *TransactionId `thrift:"fromId,2" db:"fromId" json:"fromId"`
  TokensList []*SingleTokenQuery `thrift:"tokensList,3" db:"tokensList" json:"tokensList,omitempty"`
}

func NewSingleQuery() *SingleQuery {
  return &SingleQuery{}
}


func (p *SingleQuery) GetRequestedAddress() general.Address {
  return p.RequestedAddress
}
var SingleQuery_FromId_DEFAULT *TransactionId
func (p *SingleQuery) GetFromId() *TransactionId {
  if !p.IsSetFromId() {
    return SingleQuery_FromId_DEFAULT
  }
return p.FromId
}
var SingleQuery_TokensList_DEFAULT []*SingleTokenQuery

func (p *SingleQuery) GetTokensList() []*SingleTokenQuery {
  return p.TokensList
}
func (p *SingleQuery) IsSetFromId() bool {
  return p.FromId != nil
}

func (p *SingleQuery) IsSetTokensList() bool {
  return p.TokensList != nil
}

func (p *SingleQuery) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SingleQuery)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.RequestedAddress = temp
}
  return nil
}

func (p *SingleQuery)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.FromId = &TransactionId{}
  if err := p.FromId.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FromId), err)
  }
  return nil
}

func (p *SingleQuery)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SingleTokenQuery, 0, size)
  p.TokensList =  tSlice
  for i := 0; i < size; i ++ {
    _elem29 := &SingleTokenQuery{}
    if err := _elem29.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
    }
    p.TokensList = append(p.TokensList, _elem29)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SingleQuery) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SingleQuery"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SingleQuery) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "requestedAddress", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestedAddress: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.RequestedAddress); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestedAddress (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestedAddress: ", p), err) }
  return err
}

func (p *SingleQuery) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromId", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromId: ", p), err) }
  if err := p.FromId.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FromId), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromId: ", p), err) }
  return err
}

func (p *SingleQuery) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTokensList() {
    if err := oprot.WriteFieldBegin(ctx, "tokensList", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tokensList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.TokensList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TokensList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tokensList: ", p), err) }
  }
  return err
}

func (p *SingleQuery) Equals(other *SingleQuery) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.RequestedAddress, other.RequestedAddress) != 0 { return false }
  if !p.FromId.Equals(other.FromId) { return false }
  if len(p.TokensList) != len(other.TokensList) { return false }
  for i, _tgt := range p.TokensList {
    _src30 := other.TokensList[i]
    if !_tgt.Equals(_src30) { return false }
  }
  return true
}

func (p *SingleQuery) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SingleQuery(%+v)", *p)
}

// Attributes:
//  - Flag
//  - Queries
type TransactionsQuery struct {
  Flag int16 `thrift:"flag,1" db:"flag" json:"flag"`
  Queries []*SingleQuery `thrift:"queries,2" db:"queries" json:"queries"`
}

func NewTransactionsQuery() *TransactionsQuery {
  return &TransactionsQuery{}
}


func (p *TransactionsQuery) GetFlag() int16 {
  return p.Flag
}

func (p *TransactionsQuery) GetQueries() []*SingleQuery {
  return p.Queries
}
func (p *TransactionsQuery) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransactionsQuery)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Flag = v
}
  return nil
}

func (p *TransactionsQuery)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SingleQuery, 0, size)
  p.Queries =  tSlice
  for i := 0; i < size; i ++ {
    _elem31 := &SingleQuery{}
    if err := _elem31.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem31), err)
    }
    p.Queries = append(p.Queries, _elem31)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TransactionsQuery) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionsQuery"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransactionsQuery) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "flag", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:flag: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.Flag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flag (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:flag: ", p), err) }
  return err
}

func (p *TransactionsQuery) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "queries", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:queries: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Queries)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Queries {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:queries: ", p), err) }
  return err
}

func (p *TransactionsQuery) Equals(other *TransactionsQuery) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Flag != other.Flag { return false }
  if len(p.Queries) != len(other.Queries) { return false }
  for i, _tgt := range p.Queries {
    _src32 := other.Queries[i]
    if !_tgt.Equals(_src32) { return false }
  }
  return true
}

func (p *TransactionsQuery) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransactionsQuery(%+v)", *p)
}

// Attributes:
//  - TokenAddress
//  - TokenName
//  - TokenTiker
//  - Transfers
type SelectedTokenTransfers struct {
  TokenAddress general.Address `thrift:"tokenAddress,1" db:"tokenAddress" json:"tokenAddress"`
  TokenName string `thrift:"tokenName,2" db:"tokenName" json:"tokenName"`
  TokenTiker string `thrift:"tokenTiker,3" db:"tokenTiker" json:"tokenTiker"`
  Transfers []*TokenTransfer `thrift:"transfers,4" db:"transfers" json:"transfers"`
}

func NewSelectedTokenTransfers() *SelectedTokenTransfers {
  return &SelectedTokenTransfers{}
}


func (p *SelectedTokenTransfers) GetTokenAddress() general.Address {
  return p.TokenAddress
}

func (p *SelectedTokenTransfers) GetTokenName() string {
  return p.TokenName
}

func (p *SelectedTokenTransfers) GetTokenTiker() string {
  return p.TokenTiker
}

func (p *SelectedTokenTransfers) GetTransfers() []*TokenTransfer {
  return p.Transfers
}
func (p *SelectedTokenTransfers) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SelectedTokenTransfers)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.TokenAddress = temp
}
  return nil
}

func (p *SelectedTokenTransfers)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TokenName = v
}
  return nil
}

func (p *SelectedTokenTransfers)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TokenTiker = v
}
  return nil
}

func (p *SelectedTokenTransfers)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TokenTransfer, 0, size)
  p.Transfers =  tSlice
  for i := 0; i < size; i ++ {
    _elem33 := &TokenTransfer{}
    if err := _elem33.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem33), err)
    }
    p.Transfers = append(p.Transfers, _elem33)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SelectedTokenTransfers) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SelectedTokenTransfers"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SelectedTokenTransfers) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tokenAddress", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tokenAddress: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TokenAddress); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tokenAddress (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tokenAddress: ", p), err) }
  return err
}

func (p *SelectedTokenTransfers) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tokenName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tokenName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TokenName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tokenName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tokenName: ", p), err) }
  return err
}

func (p *SelectedTokenTransfers) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tokenTiker", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tokenTiker: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TokenTiker)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tokenTiker (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tokenTiker: ", p), err) }
  return err
}

func (p *SelectedTokenTransfers) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transfers", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:transfers: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Transfers)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Transfers {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:transfers: ", p), err) }
  return err
}

func (p *SelectedTokenTransfers) Equals(other *SelectedTokenTransfers) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.TokenAddress, other.TokenAddress) != 0 { return false }
  if p.TokenName != other.TokenName { return false }
  if p.TokenTiker != other.TokenTiker { return false }
  if len(p.Transfers) != len(other.Transfers) { return false }
  for i, _tgt := range p.Transfers {
    _src34 := other.Transfers[i]
    if !_tgt.Equals(_src34) { return false }
  }
  return true
}

func (p *SelectedTokenTransfers) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SelectedTokenTransfers(%+v)", *p)
}

// Attributes:
//  - RequestedAddress
//  - Transactions
//  - TransfersList
type PublicKeyTransactions struct {
  RequestedAddress general.Address `thrift:"requestedAddress,1" db:"requestedAddress" json:"requestedAddress"`
  Transactions []*ShortTransaction `thrift:"transactions,2" db:"transactions" json:"transactions"`
  TransfersList []*SelectedTokenTransfers `thrift:"transfersList,3" db:"transfersList" json:"transfersList,omitempty"`
}

func NewPublicKeyTransactions() *PublicKeyTransactions {
  return &PublicKeyTransactions{}
}


func (p *PublicKeyTransactions) GetRequestedAddress() general.Address {
  return p.RequestedAddress
}

func (p *PublicKeyTransactions) GetTransactions() []*ShortTransaction {
  return p.Transactions
}
var PublicKeyTransactions_TransfersList_DEFAULT []*SelectedTokenTransfers

func (p *PublicKeyTransactions) GetTransfersList() []*SelectedTokenTransfers {
  return p.TransfersList
}
func (p *PublicKeyTransactions) IsSetTransfersList() bool {
  return p.TransfersList != nil
}

func (p *PublicKeyTransactions) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PublicKeyTransactions)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.RequestedAddress = temp
}
  return nil
}

func (p *PublicKeyTransactions)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ShortTransaction, 0, size)
  p.Transactions =  tSlice
  for i := 0; i < size; i ++ {
    _elem35 := &ShortTransaction{}
    if err := _elem35.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem35), err)
    }
    p.Transactions = append(p.Transactions, _elem35)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PublicKeyTransactions)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SelectedTokenTransfers, 0, size)
  p.TransfersList =  tSlice
  for i := 0; i < size; i ++ {
    _elem36 := &SelectedTokenTransfers{}
    if err := _elem36.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem36), err)
    }
    p.TransfersList = append(p.TransfersList, _elem36)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PublicKeyTransactions) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PublicKeyTransactions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PublicKeyTransactions) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "requestedAddress", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestedAddress: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.RequestedAddress); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestedAddress (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestedAddress: ", p), err) }
  return err
}

func (p *PublicKeyTransactions) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactions", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:transactions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Transactions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Transactions {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:transactions: ", p), err) }
  return err
}

func (p *PublicKeyTransactions) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTransfersList() {
    if err := oprot.WriteFieldBegin(ctx, "transfersList", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:transfersList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.TransfersList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TransfersList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:transfersList: ", p), err) }
  }
  return err
}

func (p *PublicKeyTransactions) Equals(other *PublicKeyTransactions) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.RequestedAddress, other.RequestedAddress) != 0 { return false }
  if len(p.Transactions) != len(other.Transactions) { return false }
  for i, _tgt := range p.Transactions {
    _src37 := other.Transactions[i]
    if !_tgt.Equals(_src37) { return false }
  }
  if len(p.TransfersList) != len(other.TransfersList) { return false }
  for i, _tgt := range p.TransfersList {
    _src38 := other.TransfersList[i]
    if !_tgt.Equals(_src38) { return false }
  }
  return true
}

func (p *PublicKeyTransactions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PublicKeyTransactions(%+v)", *p)
}

// Attributes:
//  - Status
//  - QueryResponse
type FilteredTransactionsListResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  QueryResponse []*PublicKeyTransactions `thrift:"queryResponse,2" db:"queryResponse" json:"queryResponse"`
}

func NewFilteredTransactionsListResult_() *FilteredTransactionsListResult_ {
  return &FilteredTransactionsListResult_{}
}

var FilteredTransactionsListResult__Status_DEFAULT *general.APIResponse
func (p *FilteredTransactionsListResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return FilteredTransactionsListResult__Status_DEFAULT
  }
return p.Status
}

func (p *FilteredTransactionsListResult_) GetQueryResponse() []*PublicKeyTransactions {
  return p.QueryResponse
}
func (p *FilteredTransactionsListResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *FilteredTransactionsListResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FilteredTransactionsListResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *FilteredTransactionsListResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PublicKeyTransactions, 0, size)
  p.QueryResponse =  tSlice
  for i := 0; i < size; i ++ {
    _elem39 := &PublicKeyTransactions{}
    if err := _elem39.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem39), err)
    }
    p.QueryResponse = append(p.QueryResponse, _elem39)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FilteredTransactionsListResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FilteredTransactionsListResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FilteredTransactionsListResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *FilteredTransactionsListResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "queryResponse", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:queryResponse: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.QueryResponse)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.QueryResponse {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:queryResponse: ", p), err) }
  return err
}

func (p *FilteredTransactionsListResult_) Equals(other *FilteredTransactionsListResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if len(p.QueryResponse) != len(other.QueryResponse) { return false }
  for i, _tgt := range p.QueryResponse {
    _src40 := other.QueryResponse[i]
    if !_tgt.Equals(_src40) { return false }
  }
  return true
}

func (p *FilteredTransactionsListResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FilteredTransactionsListResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - Result_
//  - Count
//  - Pools
type PoolListGetResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Result_ bool `thrift:"result,2" db:"result" json:"result"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
  Pools []*Pool `thrift:"pools,4" db:"pools" json:"pools"`
}

func NewPoolListGetResult_() *PoolListGetResult_ {
  return &PoolListGetResult_{}
}

var PoolListGetResult__Status_DEFAULT *general.APIResponse
func (p *PoolListGetResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return PoolListGetResult__Status_DEFAULT
  }
return p.Status
}

func (p *PoolListGetResult_) GetResult_() bool {
  return p.Result_
}

func (p *PoolListGetResult_) GetCount() int32 {
  return p.Count
}

func (p *PoolListGetResult_) GetPools() []*Pool {
  return p.Pools
}
func (p *PoolListGetResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *PoolListGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PoolListGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *PoolListGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *PoolListGetResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *PoolListGetResult_)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Pool, 0, size)
  p.Pools =  tSlice
  for i := 0; i < size; i ++ {
    _elem41 := &Pool{}
    if err := _elem41.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem41), err)
    }
    p.Pools = append(p.Pools, _elem41)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PoolListGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PoolListGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PoolListGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *PoolListGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *PoolListGetResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *PoolListGetResult_) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pools", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pools: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Pools)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Pools {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pools: ", p), err) }
  return err
}

func (p *PoolListGetResult_) Equals(other *PoolListGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.Result_ != other.Result_ { return false }
  if p.Count != other.Count { return false }
  if len(p.Pools) != len(other.Pools) { return false }
  for i, _tgt := range p.Pools {
    _src42 := other.Pools[i]
    if !_tgt.Equals(_src42) { return false }
  }
  return true
}

func (p *PoolListGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PoolListGetResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - IsFound
//  - Pool
type PoolInfoGetResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  IsFound bool `thrift:"isFound,2" db:"isFound" json:"isFound"`
  Pool *Pool `thrift:"pool,3" db:"pool" json:"pool"`
}

func NewPoolInfoGetResult_() *PoolInfoGetResult_ {
  return &PoolInfoGetResult_{}
}

var PoolInfoGetResult__Status_DEFAULT *general.APIResponse
func (p *PoolInfoGetResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return PoolInfoGetResult__Status_DEFAULT
  }
return p.Status
}

func (p *PoolInfoGetResult_) GetIsFound() bool {
  return p.IsFound
}
var PoolInfoGetResult__Pool_DEFAULT *Pool
func (p *PoolInfoGetResult_) GetPool() *Pool {
  if !p.IsSetPool() {
    return PoolInfoGetResult__Pool_DEFAULT
  }
return p.Pool
}
func (p *PoolInfoGetResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *PoolInfoGetResult_) IsSetPool() bool {
  return p.Pool != nil
}

func (p *PoolInfoGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PoolInfoGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *PoolInfoGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsFound = v
}
  return nil
}

func (p *PoolInfoGetResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Pool = &Pool{}
  if err := p.Pool.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pool), err)
  }
  return nil
}

func (p *PoolInfoGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PoolInfoGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PoolInfoGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *PoolInfoGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isFound", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:isFound: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsFound)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isFound (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:isFound: ", p), err) }
  return err
}

func (p *PoolInfoGetResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pool", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pool: ", p), err) }
  if err := p.Pool.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pool), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pool: ", p), err) }
  return err
}

func (p *PoolInfoGetResult_) Equals(other *PoolInfoGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.IsFound != other.IsFound { return false }
  if !p.Pool.Equals(other.Pool) { return false }
  return true
}

func (p *PoolInfoGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PoolInfoGetResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - Transactions
type PoolTransactionsGetResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Transactions []*SealedTransaction `thrift:"transactions,2" db:"transactions" json:"transactions"`
}

func NewPoolTransactionsGetResult_() *PoolTransactionsGetResult_ {
  return &PoolTransactionsGetResult_{}
}

var PoolTransactionsGetResult__Status_DEFAULT *general.APIResponse
func (p *PoolTransactionsGetResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return PoolTransactionsGetResult__Status_DEFAULT
  }
return p.Status
}

func (p *PoolTransactionsGetResult_) GetTransactions() []*SealedTransaction {
  return p.Transactions
}
func (p *PoolTransactionsGetResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *PoolTransactionsGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PoolTransactionsGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *PoolTransactionsGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SealedTransaction, 0, size)
  p.Transactions =  tSlice
  for i := 0; i < size; i ++ {
    _elem43 := &SealedTransaction{}
    if err := _elem43.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem43), err)
    }
    p.Transactions = append(p.Transactions, _elem43)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PoolTransactionsGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PoolTransactionsGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PoolTransactionsGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *PoolTransactionsGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactions", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:transactions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Transactions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Transactions {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:transactions: ", p), err) }
  return err
}

func (p *PoolTransactionsGetResult_) Equals(other *PoolTransactionsGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if len(p.Transactions) != len(other.Transactions) { return false }
  for i, _tgt := range p.Transactions {
    _src44 := other.Transactions[i]
    if !_tgt.Equals(_src44) { return false }
  }
  return true
}

func (p *PoolTransactionsGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PoolTransactionsGetResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - Stats
type StatsGetResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Stats StatsPerPeriod `thrift:"stats,2" db:"stats" json:"stats"`
}

func NewStatsGetResult_() *StatsGetResult_ {
  return &StatsGetResult_{}
}

var StatsGetResult__Status_DEFAULT *general.APIResponse
func (p *StatsGetResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return StatsGetResult__Status_DEFAULT
  }
return p.Status
}

func (p *StatsGetResult_) GetStats() StatsPerPeriod {
  return p.Stats
}
func (p *StatsGetResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *StatsGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StatsGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *StatsGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(StatsPerPeriod, 0, size)
  p.Stats =  tSlice
  for i := 0; i < size; i ++ {
    _elem45 := &PeriodStats{}
    if err := _elem45.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem45), err)
    }
    p.Stats = append(p.Stats, _elem45)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StatsGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StatsGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StatsGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *StatsGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stats", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stats: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Stats)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Stats {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stats: ", p), err) }
  return err
}

func (p *StatsGetResult_) Equals(other *StatsGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if len(p.Stats) != len(other.Stats) { return false }
  for i, _tgt := range p.Stats {
    _src46 := other.Stats[i]
    if !_tgt.Equals(_src46) { return false }
  }
  return true
}

func (p *StatsGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StatsGetResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - SmartContract
type SmartContractGetResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  SmartContract *SmartContract `thrift:"smartContract,2" db:"smartContract" json:"smartContract"`
}

func NewSmartContractGetResult_() *SmartContractGetResult_ {
  return &SmartContractGetResult_{}
}

var SmartContractGetResult__Status_DEFAULT *general.APIResponse
func (p *SmartContractGetResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return SmartContractGetResult__Status_DEFAULT
  }
return p.Status
}
var SmartContractGetResult__SmartContract_DEFAULT *SmartContract
func (p *SmartContractGetResult_) GetSmartContract() *SmartContract {
  if !p.IsSetSmartContract() {
    return SmartContractGetResult__SmartContract_DEFAULT
  }
return p.SmartContract
}
func (p *SmartContractGetResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *SmartContractGetResult_) IsSetSmartContract() bool {
  return p.SmartContract != nil
}

func (p *SmartContractGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartContractGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *SmartContractGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SmartContract = &SmartContract{}
  if err := p.SmartContract.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SmartContract), err)
  }
  return nil
}

func (p *SmartContractGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartContractGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *SmartContractGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "smartContract", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:smartContract: ", p), err) }
  if err := p.SmartContract.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SmartContract), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:smartContract: ", p), err) }
  return err
}

func (p *SmartContractGetResult_) Equals(other *SmartContractGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if !p.SmartContract.Equals(other.SmartContract) { return false }
  return true
}

func (p *SmartContractGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartContractGetResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - AddressesList
type SmartContractAddressesListGetResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  AddressesList []general.Address `thrift:"addressesList,2" db:"addressesList" json:"addressesList"`
}

func NewSmartContractAddressesListGetResult_() *SmartContractAddressesListGetResult_ {
  return &SmartContractAddressesListGetResult_{}
}

var SmartContractAddressesListGetResult__Status_DEFAULT *general.APIResponse
func (p *SmartContractAddressesListGetResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return SmartContractAddressesListGetResult__Status_DEFAULT
  }
return p.Status
}

func (p *SmartContractAddressesListGetResult_) GetAddressesList() []general.Address {
  return p.AddressesList
}
func (p *SmartContractAddressesListGetResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *SmartContractAddressesListGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartContractAddressesListGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *SmartContractAddressesListGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]general.Address, 0, size)
  p.AddressesList =  tSlice
  for i := 0; i < size; i ++ {
var _elem47 general.Address
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := general.Address(v)
    _elem47 = temp
}
    p.AddressesList = append(p.AddressesList, _elem47)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SmartContractAddressesListGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractAddressesListGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartContractAddressesListGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *SmartContractAddressesListGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "addressesList", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:addressesList: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.AddressesList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AddressesList {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:addressesList: ", p), err) }
  return err
}

func (p *SmartContractAddressesListGetResult_) Equals(other *SmartContractAddressesListGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if len(p.AddressesList) != len(other.AddressesList) { return false }
  for i, _tgt := range p.AddressesList {
    _src48 := other.AddressesList[i]
    if bytes.Compare(_tgt, _src48) != 0 { return false }
  }
  return true
}

func (p *SmartContractAddressesListGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartContractAddressesListGetResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - Count
//  - SmartContractsList
type SmartContractsListGetResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Count int32 `thrift:"count,2" db:"count" json:"count"`
  SmartContractsList []*SmartContract `thrift:"smartContractsList,3" db:"smartContractsList" json:"smartContractsList"`
}

func NewSmartContractsListGetResult_() *SmartContractsListGetResult_ {
  return &SmartContractsListGetResult_{}
}

var SmartContractsListGetResult__Status_DEFAULT *general.APIResponse
func (p *SmartContractsListGetResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return SmartContractsListGetResult__Status_DEFAULT
  }
return p.Status
}

func (p *SmartContractsListGetResult_) GetCount() int32 {
  return p.Count
}

func (p *SmartContractsListGetResult_) GetSmartContractsList() []*SmartContract {
  return p.SmartContractsList
}
func (p *SmartContractsListGetResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *SmartContractsListGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartContractsListGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *SmartContractsListGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *SmartContractsListGetResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SmartContract, 0, size)
  p.SmartContractsList =  tSlice
  for i := 0; i < size; i ++ {
    _elem49 := &SmartContract{}
    if err := _elem49.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem49), err)
    }
    p.SmartContractsList = append(p.SmartContractsList, _elem49)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SmartContractsListGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractsListGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartContractsListGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *SmartContractsListGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *SmartContractsListGetResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "smartContractsList", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:smartContractsList: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.SmartContractsList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SmartContractsList {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:smartContractsList: ", p), err) }
  return err
}

func (p *SmartContractsListGetResult_) Equals(other *SmartContractsListGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.Count != other.Count { return false }
  if len(p.SmartContractsList) != len(other.SmartContractsList) { return false }
  for i, _tgt := range p.SmartContractsList {
    _src50 := other.SmartContractsList[i]
    if !_tgt.Equals(_src50) { return false }
  }
  return true
}

func (p *SmartContractsListGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartContractsListGetResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - States
//  - RoundNum
type TransactionsStateGetResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  States map[TransactionInnerId]TransactionState `thrift:"states,2" db:"states" json:"states"`
  RoundNum int32 `thrift:"roundNum,3" db:"roundNum" json:"roundNum"`
}

func NewTransactionsStateGetResult_() *TransactionsStateGetResult_ {
  return &TransactionsStateGetResult_{}
}

var TransactionsStateGetResult__Status_DEFAULT *general.APIResponse
func (p *TransactionsStateGetResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return TransactionsStateGetResult__Status_DEFAULT
  }
return p.Status
}

func (p *TransactionsStateGetResult_) GetStates() map[TransactionInnerId]TransactionState {
  return p.States
}

func (p *TransactionsStateGetResult_) GetRoundNum() int32 {
  return p.RoundNum
}
func (p *TransactionsStateGetResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TransactionsStateGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransactionsStateGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TransactionsStateGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[TransactionInnerId]TransactionState, size)
  p.States =  tMap
  for i := 0; i < size; i ++ {
var _key51 TransactionInnerId
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TransactionInnerId(v)
    _key51 = temp
}
var _val52 TransactionState
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TransactionState(v)
    _val52 = temp
}
    p.States[_key51] = _val52
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TransactionsStateGetResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoundNum = v
}
  return nil
}

func (p *TransactionsStateGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionsStateGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransactionsStateGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TransactionsStateGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "states", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:states: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.I32, len(p.States)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.States {
    if err := oprot.WriteI64(ctx, int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:states: ", p), err) }
  return err
}

func (p *TransactionsStateGetResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roundNum", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roundNum: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RoundNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roundNum (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roundNum: ", p), err) }
  return err
}

func (p *TransactionsStateGetResult_) Equals(other *TransactionsStateGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if len(p.States) != len(other.States) { return false }
  for k, _tgt := range p.States {
    _src53 := other.States[k]
    if _tgt != _src53 { return false }
  }
  if p.RoundNum != other.RoundNum { return false }
  return true
}

func (p *TransactionsStateGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransactionsStateGetResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - Method
//  - Params
type SmartMethodParamsGetResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Method string `thrift:"method,2" db:"method" json:"method"`
  Params []*general.Variant `thrift:"params,3" db:"params" json:"params"`
}

func NewSmartMethodParamsGetResult_() *SmartMethodParamsGetResult_ {
  return &SmartMethodParamsGetResult_{}
}

var SmartMethodParamsGetResult__Status_DEFAULT *general.APIResponse
func (p *SmartMethodParamsGetResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return SmartMethodParamsGetResult__Status_DEFAULT
  }
return p.Status
}

func (p *SmartMethodParamsGetResult_) GetMethod() string {
  return p.Method
}

func (p *SmartMethodParamsGetResult_) GetParams() []*general.Variant {
  return p.Params
}
func (p *SmartMethodParamsGetResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *SmartMethodParamsGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartMethodParamsGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *SmartMethodParamsGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Method = v
}
  return nil
}

func (p *SmartMethodParamsGetResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*general.Variant, 0, size)
  p.Params =  tSlice
  for i := 0; i < size; i ++ {
    _elem54 := &general.Variant{}
    if err := _elem54.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem54), err)
    }
    p.Params = append(p.Params, _elem54)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SmartMethodParamsGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartMethodParamsGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartMethodParamsGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *SmartMethodParamsGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "method", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:method: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:method: ", p), err) }
  return err
}

func (p *SmartMethodParamsGetResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "params", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:params: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Params)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Params {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:params: ", p), err) }
  return err
}

func (p *SmartMethodParamsGetResult_) Equals(other *SmartMethodParamsGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.Method != other.Method { return false }
  if len(p.Params) != len(other.Params) { return false }
  for i, _tgt := range p.Params {
    _src55 := other.Params[i]
    if !_tgt.Equals(_src55) { return false }
  }
  return true
}

func (p *SmartMethodParamsGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartMethodParamsGetResult_(%+v)", *p)
}

// Attributes:
//  - Code
//  - Message
//  - Methods
type ContractAllMethodsGetResult_ struct {
  Code int8 `thrift:"code,1" db:"code" json:"code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
  Methods []*general.MethodDescription `thrift:"methods,3" db:"methods" json:"methods"`
}

func NewContractAllMethodsGetResult_() *ContractAllMethodsGetResult_ {
  return &ContractAllMethodsGetResult_{}
}


func (p *ContractAllMethodsGetResult_) GetCode() int8 {
  return p.Code
}

func (p *ContractAllMethodsGetResult_) GetMessage() string {
  return p.Message
}

func (p *ContractAllMethodsGetResult_) GetMethods() []*general.MethodDescription {
  return p.Methods
}
func (p *ContractAllMethodsGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ContractAllMethodsGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := int8(v)
  p.Code = temp
}
  return nil
}

func (p *ContractAllMethodsGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *ContractAllMethodsGetResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*general.MethodDescription, 0, size)
  p.Methods =  tSlice
  for i := 0; i < size; i ++ {
    _elem56 := &general.MethodDescription{}
    if err := _elem56.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem56), err)
    }
    p.Methods = append(p.Methods, _elem56)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContractAllMethodsGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ContractAllMethodsGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ContractAllMethodsGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.BYTE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ContractAllMethodsGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *ContractAllMethodsGetResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "methods", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:methods: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Methods)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Methods {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:methods: ", p), err) }
  return err
}

func (p *ContractAllMethodsGetResult_) Equals(other *ContractAllMethodsGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if p.Message != other.Message { return false }
  if len(p.Methods) != len(other.Methods) { return false }
  for i, _tgt := range p.Methods {
    _src57 := other.Methods[i]
    if !_tgt.Equals(_src57) { return false }
  }
  return true
}

func (p *ContractAllMethodsGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ContractAllMethodsGetResult_(%+v)", *p)
}

// Attributes:
//  - Type
//  - Name
type SmartContractMethodArgument struct {
  Type string `thrift:"type,1" db:"type" json:"type"`
  Name string `thrift:"name,2" db:"name" json:"name"`
}

func NewSmartContractMethodArgument() *SmartContractMethodArgument {
  return &SmartContractMethodArgument{}
}


func (p *SmartContractMethodArgument) GetType() string {
  return p.Type
}

func (p *SmartContractMethodArgument) GetName() string {
  return p.Name
}
func (p *SmartContractMethodArgument) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartContractMethodArgument)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *SmartContractMethodArgument)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *SmartContractMethodArgument) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractMethodArgument"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartContractMethodArgument) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *SmartContractMethodArgument) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *SmartContractMethodArgument) Equals(other *SmartContractMethodArgument) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if p.Name != other.Name { return false }
  return true
}

func (p *SmartContractMethodArgument) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartContractMethodArgument(%+v)", *p)
}

// Attributes:
//  - ReturnType
//  - Name
//  - Arguments
type SmartContractMethod struct {
  ReturnType string `thrift:"returnType,1" db:"returnType" json:"returnType"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Arguments []*SmartContractMethodArgument `thrift:"arguments,3" db:"arguments" json:"arguments"`
}

func NewSmartContractMethod() *SmartContractMethod {
  return &SmartContractMethod{}
}


func (p *SmartContractMethod) GetReturnType() string {
  return p.ReturnType
}

func (p *SmartContractMethod) GetName() string {
  return p.Name
}

func (p *SmartContractMethod) GetArguments() []*SmartContractMethodArgument {
  return p.Arguments
}
func (p *SmartContractMethod) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartContractMethod)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReturnType = v
}
  return nil
}

func (p *SmartContractMethod)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *SmartContractMethod)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SmartContractMethodArgument, 0, size)
  p.Arguments =  tSlice
  for i := 0; i < size; i ++ {
    _elem58 := &SmartContractMethodArgument{}
    if err := _elem58.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem58), err)
    }
    p.Arguments = append(p.Arguments, _elem58)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SmartContractMethod) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractMethod"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartContractMethod) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "returnType", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:returnType: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ReturnType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.returnType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:returnType: ", p), err) }
  return err
}

func (p *SmartContractMethod) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *SmartContractMethod) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "arguments", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:arguments: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Arguments)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Arguments {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:arguments: ", p), err) }
  return err
}

func (p *SmartContractMethod) Equals(other *SmartContractMethod) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReturnType != other.ReturnType { return false }
  if p.Name != other.Name { return false }
  if len(p.Arguments) != len(other.Arguments) { return false }
  for i, _tgt := range p.Arguments {
    _src59 := other.Arguments[i]
    if !_tgt.Equals(_src59) { return false }
  }
  return true
}

func (p *SmartContractMethod) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartContractMethod(%+v)", *p)
}

// Attributes:
//  - Status
//  - Methods
//  - Variables
type SmartContractDataResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Methods []*SmartContractMethod `thrift:"methods,2" db:"methods" json:"methods"`
  Variables map[string]*general.Variant `thrift:"variables,3" db:"variables" json:"variables"`
}

func NewSmartContractDataResult_() *SmartContractDataResult_ {
  return &SmartContractDataResult_{}
}

var SmartContractDataResult__Status_DEFAULT *general.APIResponse
func (p *SmartContractDataResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return SmartContractDataResult__Status_DEFAULT
  }
return p.Status
}

func (p *SmartContractDataResult_) GetMethods() []*SmartContractMethod {
  return p.Methods
}

func (p *SmartContractDataResult_) GetVariables() map[string]*general.Variant {
  return p.Variables
}
func (p *SmartContractDataResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *SmartContractDataResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartContractDataResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *SmartContractDataResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SmartContractMethod, 0, size)
  p.Methods =  tSlice
  for i := 0; i < size; i ++ {
    _elem60 := &SmartContractMethod{}
    if err := _elem60.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem60), err)
    }
    p.Methods = append(p.Methods, _elem60)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SmartContractDataResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*general.Variant, size)
  p.Variables =  tMap
  for i := 0; i < size; i ++ {
var _key61 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key61 = v
}
    _val62 := &general.Variant{}
    if err := _val62.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val62), err)
    }
    p.Variables[_key61] = _val62
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SmartContractDataResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractDataResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartContractDataResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *SmartContractDataResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "methods", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:methods: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Methods)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Methods {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:methods: ", p), err) }
  return err
}

func (p *SmartContractDataResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "variables", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:variables: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Variables)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Variables {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:variables: ", p), err) }
  return err
}

func (p *SmartContractDataResult_) Equals(other *SmartContractDataResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if len(p.Methods) != len(other.Methods) { return false }
  for i, _tgt := range p.Methods {
    _src63 := other.Methods[i]
    if !_tgt.Equals(_src63) { return false }
  }
  if len(p.Variables) != len(other.Variables) { return false }
  for k, _tgt := range p.Variables {
    _src64 := other.Variables[k]
    if !_tgt.Equals(_src64) { return false }
  }
  return true
}

func (p *SmartContractDataResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartContractDataResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - ByteCodeObjects
//  - TokenStandard
//  - Methods
type SmartContractCompileResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  ByteCodeObjects []*general.ByteCodeObject `thrift:"byteCodeObjects,2" db:"byteCodeObjects" json:"byteCodeObjects"`
  TokenStandard int32 `thrift:"tokenStandard,3" db:"tokenStandard" json:"tokenStandard"`
  Methods []*general.MethodSignature `thrift:"methods,4" db:"methods" json:"methods"`
}

func NewSmartContractCompileResult_() *SmartContractCompileResult_ {
  return &SmartContractCompileResult_{}
}

var SmartContractCompileResult__Status_DEFAULT *general.APIResponse
func (p *SmartContractCompileResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return SmartContractCompileResult__Status_DEFAULT
  }
return p.Status
}

func (p *SmartContractCompileResult_) GetByteCodeObjects() []*general.ByteCodeObject {
  return p.ByteCodeObjects
}

func (p *SmartContractCompileResult_) GetTokenStandard() int32 {
  return p.TokenStandard
}

func (p *SmartContractCompileResult_) GetMethods() []*general.MethodSignature {
  return p.Methods
}
func (p *SmartContractCompileResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *SmartContractCompileResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartContractCompileResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *SmartContractCompileResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*general.ByteCodeObject, 0, size)
  p.ByteCodeObjects =  tSlice
  for i := 0; i < size; i ++ {
    _elem65 := &general.ByteCodeObject{}
    if err := _elem65.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem65), err)
    }
    p.ByteCodeObjects = append(p.ByteCodeObjects, _elem65)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SmartContractCompileResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TokenStandard = v
}
  return nil
}

func (p *SmartContractCompileResult_)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*general.MethodSignature, 0, size)
  p.Methods =  tSlice
  for i := 0; i < size; i ++ {
    _elem66 := &general.MethodSignature{}
    if err := _elem66.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem66), err)
    }
    p.Methods = append(p.Methods, _elem66)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SmartContractCompileResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractCompileResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartContractCompileResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *SmartContractCompileResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "byteCodeObjects", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:byteCodeObjects: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ByteCodeObjects)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ByteCodeObjects {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:byteCodeObjects: ", p), err) }
  return err
}

func (p *SmartContractCompileResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tokenStandard", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tokenStandard: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TokenStandard)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tokenStandard (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tokenStandard: ", p), err) }
  return err
}

func (p *SmartContractCompileResult_) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "methods", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:methods: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Methods)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Methods {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:methods: ", p), err) }
  return err
}

func (p *SmartContractCompileResult_) Equals(other *SmartContractCompileResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if len(p.ByteCodeObjects) != len(other.ByteCodeObjects) { return false }
  for i, _tgt := range p.ByteCodeObjects {
    _src67 := other.ByteCodeObjects[i]
    if !_tgt.Equals(_src67) { return false }
  }
  if p.TokenStandard != other.TokenStandard { return false }
  if len(p.Methods) != len(other.Methods) { return false }
  for i, _tgt := range p.Methods {
    _src68 := other.Methods[i]
    if !_tgt.Equals(_src68) { return false }
  }
  return true
}

func (p *SmartContractCompileResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartContractCompileResult_(%+v)", *p)
}

// Attributes:
//  - Address
//  - Code
//  - Name
//  - TotalSupply
//  - Owner
//  - TransfersCount
//  - TransactionsCount
//  - HoldersCount
//  - TokenStandard
type TokenInfo struct {
  Address general.Address `thrift:"address,1" db:"address" json:"address"`
  Code TokenCode `thrift:"code,2" db:"code" json:"code"`
  Name string `thrift:"name,3" db:"name" json:"name"`
  TotalSupply TokenAmount `thrift:"totalSupply,4" db:"totalSupply" json:"totalSupply"`
  Owner general.Address `thrift:"owner,5" db:"owner" json:"owner"`
  TransfersCount int32 `thrift:"transfersCount,6" db:"transfersCount" json:"transfersCount"`
  TransactionsCount int32 `thrift:"transactionsCount,7" db:"transactionsCount" json:"transactionsCount"`
  HoldersCount int32 `thrift:"holdersCount,8" db:"holdersCount" json:"holdersCount"`
  TokenStandard int32 `thrift:"tokenStandard,9" db:"tokenStandard" json:"tokenStandard"`
}

func NewTokenInfo() *TokenInfo {
  return &TokenInfo{}
}


func (p *TokenInfo) GetAddress() general.Address {
  return p.Address
}

func (p *TokenInfo) GetCode() TokenCode {
  return p.Code
}

func (p *TokenInfo) GetName() string {
  return p.Name
}

func (p *TokenInfo) GetTotalSupply() TokenAmount {
  return p.TotalSupply
}

func (p *TokenInfo) GetOwner() general.Address {
  return p.Owner
}

func (p *TokenInfo) GetTransfersCount() int32 {
  return p.TransfersCount
}

func (p *TokenInfo) GetTransactionsCount() int32 {
  return p.TransactionsCount
}

func (p *TokenInfo) GetHoldersCount() int32 {
  return p.HoldersCount
}

func (p *TokenInfo) GetTokenStandard() int32 {
  return p.TokenStandard
}
func (p *TokenInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TokenInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Address = temp
}
  return nil
}

func (p *TokenInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TokenCode(v)
  p.Code = temp
}
  return nil
}

func (p *TokenInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TokenInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TokenAmount(v)
  p.TotalSupply = temp
}
  return nil
}

func (p *TokenInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := general.Address(v)
  p.Owner = temp
}
  return nil
}

func (p *TokenInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TransfersCount = v
}
  return nil
}

func (p *TokenInfo)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.TransactionsCount = v
}
  return nil
}

func (p *TokenInfo)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.HoldersCount = v
}
  return nil
}

func (p *TokenInfo)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.TokenStandard = v
}
  return nil
}

func (p *TokenInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TokenInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Address); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *TokenInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:code: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:code: ", p), err) }
  return err
}

func (p *TokenInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *TokenInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "totalSupply", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:totalSupply: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TotalSupply)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalSupply (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:totalSupply: ", p), err) }
  return err
}

func (p *TokenInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "owner", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:owner: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Owner); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.owner (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:owner: ", p), err) }
  return err
}

func (p *TokenInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transfersCount", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:transfersCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TransfersCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transfersCount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:transfersCount: ", p), err) }
  return err
}

func (p *TokenInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactionsCount", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:transactionsCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TransactionsCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transactionsCount (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:transactionsCount: ", p), err) }
  return err
}

func (p *TokenInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "holdersCount", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:holdersCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HoldersCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.holdersCount (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:holdersCount: ", p), err) }
  return err
}

func (p *TokenInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tokenStandard", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:tokenStandard: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TokenStandard)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tokenStandard (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:tokenStandard: ", p), err) }
  return err
}

func (p *TokenInfo) Equals(other *TokenInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Address, other.Address) != 0 { return false }
  if p.Code != other.Code { return false }
  if p.Name != other.Name { return false }
  if p.TotalSupply != other.TotalSupply { return false }
  if bytes.Compare(p.Owner, other.Owner) != 0 { return false }
  if p.TransfersCount != other.TransfersCount { return false }
  if p.TransactionsCount != other.TransactionsCount { return false }
  if p.HoldersCount != other.HoldersCount { return false }
  if p.TokenStandard != other.TokenStandard { return false }
  return true
}

func (p *TokenInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TokenInfo(%+v)", *p)
}

// Attributes:
//  - Token
//  - Transaction
//  - Time
//  - Initiator
//  - Method
//  - Params
//  - State
type TokenTransaction struct {
  Token general.Address `thrift:"token,1" db:"token" json:"token"`
  Transaction *TransactionId `thrift:"transaction,2" db:"transaction" json:"transaction"`
  Time Time `thrift:"time,3" db:"time" json:"time"`
  Initiator general.Address `thrift:"initiator,4" db:"initiator" json:"initiator"`
  Method string `thrift:"method,5" db:"method" json:"method"`
  Params []*general.Variant `thrift:"params,6" db:"params" json:"params"`
  State SmartOperationState `thrift:"state,7" db:"state" json:"state"`
}

func NewTokenTransaction() *TokenTransaction {
  return &TokenTransaction{}
}


func (p *TokenTransaction) GetToken() general.Address {
  return p.Token
}
var TokenTransaction_Transaction_DEFAULT *TransactionId
func (p *TokenTransaction) GetTransaction() *TransactionId {
  if !p.IsSetTransaction() {
    return TokenTransaction_Transaction_DEFAULT
  }
return p.Transaction
}

func (p *TokenTransaction) GetTime() Time {
  return p.Time
}

func (p *TokenTransaction) GetInitiator() general.Address {
  return p.Initiator
}

func (p *TokenTransaction) GetMethod() string {
  return p.Method
}

func (p *TokenTransaction) GetParams() []*general.Variant {
  return p.Params
}

func (p *TokenTransaction) GetState() SmartOperationState {
  return p.State
}
func (p *TokenTransaction) IsSetTransaction() bool {
  return p.Transaction != nil
}

func (p *TokenTransaction) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TokenTransaction)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Token = temp
}
  return nil
}

func (p *TokenTransaction)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Transaction = &TransactionId{}
  if err := p.Transaction.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Transaction), err)
  }
  return nil
}

func (p *TokenTransaction)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Time(v)
  p.Time = temp
}
  return nil
}

func (p *TokenTransaction)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := general.Address(v)
  p.Initiator = temp
}
  return nil
}

func (p *TokenTransaction)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Method = v
}
  return nil
}

func (p *TokenTransaction)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*general.Variant, 0, size)
  p.Params =  tSlice
  for i := 0; i < size; i ++ {
    _elem69 := &general.Variant{}
    if err := _elem69.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem69), err)
    }
    p.Params = append(p.Params, _elem69)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TokenTransaction)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := SmartOperationState(v)
  p.State = temp
}
  return nil
}

func (p *TokenTransaction) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenTransaction"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TokenTransaction) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Token); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *TokenTransaction) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transaction", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:transaction: ", p), err) }
  if err := p.Transaction.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Transaction), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:transaction: ", p), err) }
  return err
}

func (p *TokenTransaction) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "time", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:time: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Time)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:time: ", p), err) }
  return err
}

func (p *TokenTransaction) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "initiator", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:initiator: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Initiator); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.initiator (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:initiator: ", p), err) }
  return err
}

func (p *TokenTransaction) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "method", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:method: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:method: ", p), err) }
  return err
}

func (p *TokenTransaction) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "params", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:params: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Params)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Params {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:params: ", p), err) }
  return err
}

func (p *TokenTransaction) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "state", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:state: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:state: ", p), err) }
  return err
}

func (p *TokenTransaction) Equals(other *TokenTransaction) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Token, other.Token) != 0 { return false }
  if !p.Transaction.Equals(other.Transaction) { return false }
  if p.Time != other.Time { return false }
  if bytes.Compare(p.Initiator, other.Initiator) != 0 { return false }
  if p.Method != other.Method { return false }
  if len(p.Params) != len(other.Params) { return false }
  for i, _tgt := range p.Params {
    _src70 := other.Params[i]
    if !_tgt.Equals(_src70) { return false }
  }
  if p.State != other.State { return false }
  return true
}

func (p *TokenTransaction) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TokenTransaction(%+v)", *p)
}

// Attributes:
//  - Holder
//  - Token
//  - Balance
//  - TransfersCount
type TokenHolder struct {
  Holder general.Address `thrift:"holder,1" db:"holder" json:"holder"`
  Token general.Address `thrift:"token,2" db:"token" json:"token"`
  Balance TokenAmount `thrift:"balance,3" db:"balance" json:"balance"`
  TransfersCount int32 `thrift:"transfersCount,4" db:"transfersCount" json:"transfersCount"`
}

func NewTokenHolder() *TokenHolder {
  return &TokenHolder{}
}


func (p *TokenHolder) GetHolder() general.Address {
  return p.Holder
}

func (p *TokenHolder) GetToken() general.Address {
  return p.Token
}

func (p *TokenHolder) GetBalance() TokenAmount {
  return p.Balance
}

func (p *TokenHolder) GetTransfersCount() int32 {
  return p.TransfersCount
}
func (p *TokenHolder) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TokenHolder)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Holder = temp
}
  return nil
}

func (p *TokenHolder)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := general.Address(v)
  p.Token = temp
}
  return nil
}

func (p *TokenHolder)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TokenAmount(v)
  p.Balance = temp
}
  return nil
}

func (p *TokenHolder)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TransfersCount = v
}
  return nil
}

func (p *TokenHolder) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenHolder"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TokenHolder) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "holder", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:holder: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Holder); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.holder (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:holder: ", p), err) }
  return err
}

func (p *TokenHolder) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Token); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err) }
  return err
}

func (p *TokenHolder) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "balance", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:balance: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Balance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.balance (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:balance: ", p), err) }
  return err
}

func (p *TokenHolder) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transfersCount", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:transfersCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TransfersCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transfersCount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:transfersCount: ", p), err) }
  return err
}

func (p *TokenHolder) Equals(other *TokenHolder) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Holder, other.Holder) != 0 { return false }
  if bytes.Compare(p.Token, other.Token) != 0 { return false }
  if p.Balance != other.Balance { return false }
  if p.TransfersCount != other.TransfersCount { return false }
  return true
}

func (p *TokenHolder) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TokenHolder(%+v)", *p)
}

// Attributes:
//  - Token
//  - Code
//  - Name
//  - Balance
type TokenBalance struct {
  Token general.Address `thrift:"token,1" db:"token" json:"token"`
  Code TokenCode `thrift:"code,2" db:"code" json:"code"`
  Name string `thrift:"name,3" db:"name" json:"name"`
  Balance TokenAmount `thrift:"balance,4" db:"balance" json:"balance"`
}

func NewTokenBalance() *TokenBalance {
  return &TokenBalance{}
}


func (p *TokenBalance) GetToken() general.Address {
  return p.Token
}

func (p *TokenBalance) GetCode() TokenCode {
  return p.Code
}

func (p *TokenBalance) GetName() string {
  return p.Name
}

func (p *TokenBalance) GetBalance() TokenAmount {
  return p.Balance
}
func (p *TokenBalance) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TokenBalance)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Token = temp
}
  return nil
}

func (p *TokenBalance)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TokenCode(v)
  p.Code = temp
}
  return nil
}

func (p *TokenBalance)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TokenBalance)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TokenAmount(v)
  p.Balance = temp
}
  return nil
}

func (p *TokenBalance) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenBalance"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TokenBalance) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Token); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *TokenBalance) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:code: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:code: ", p), err) }
  return err
}

func (p *TokenBalance) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *TokenBalance) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "balance", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:balance: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Balance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.balance (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:balance: ", p), err) }
  return err
}

func (p *TokenBalance) Equals(other *TokenBalance) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Token, other.Token) != 0 { return false }
  if p.Code != other.Code { return false }
  if p.Name != other.Name { return false }
  if p.Balance != other.Balance { return false }
  return true
}

func (p *TokenBalance) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TokenBalance(%+v)", *p)
}

// Attributes:
//  - Status
//  - Balances
type TokenBalancesResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Balances []*TokenBalance `thrift:"balances,2" db:"balances" json:"balances"`
}

func NewTokenBalancesResult_() *TokenBalancesResult_ {
  return &TokenBalancesResult_{}
}

var TokenBalancesResult__Status_DEFAULT *general.APIResponse
func (p *TokenBalancesResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return TokenBalancesResult__Status_DEFAULT
  }
return p.Status
}

func (p *TokenBalancesResult_) GetBalances() []*TokenBalance {
  return p.Balances
}
func (p *TokenBalancesResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TokenBalancesResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TokenBalancesResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TokenBalancesResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TokenBalance, 0, size)
  p.Balances =  tSlice
  for i := 0; i < size; i ++ {
    _elem71 := &TokenBalance{}
    if err := _elem71.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem71), err)
    }
    p.Balances = append(p.Balances, _elem71)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TokenBalancesResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenBalancesResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TokenBalancesResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TokenBalancesResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "balances", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:balances: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Balances)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Balances {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:balances: ", p), err) }
  return err
}

func (p *TokenBalancesResult_) Equals(other *TokenBalancesResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if len(p.Balances) != len(other.Balances) { return false }
  for i, _tgt := range p.Balances {
    _src72 := other.Balances[i]
    if !_tgt.Equals(_src72) { return false }
  }
  return true
}

func (p *TokenBalancesResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TokenBalancesResult_(%+v)", *p)
}

// Attributes:
//  - Token
//  - Code
//  - Sender
//  - Receiver
//  - Amount
//  - Initiator
//  - Transaction
//  - Time
//  - State
//  - UserFields
//  - Fee
//  - ExtraFee
type TokenTransfer struct {
  Token general.Address `thrift:"token,1" db:"token" json:"token"`
  Code TokenCode `thrift:"code,2" db:"code" json:"code"`
  Sender general.Address `thrift:"sender,3" db:"sender" json:"sender"`
  Receiver general.Address `thrift:"receiver,4" db:"receiver" json:"receiver"`
  Amount TokenAmount `thrift:"amount,5" db:"amount" json:"amount"`
  Initiator general.Address `thrift:"initiator,6" db:"initiator" json:"initiator"`
  Transaction *TransactionId `thrift:"transaction,7" db:"transaction" json:"transaction"`
  Time Time `thrift:"time,8" db:"time" json:"time"`
  State SmartOperationState `thrift:"state,9" db:"state" json:"state"`
  UserFields []byte `thrift:"userFields,10" db:"userFields" json:"userFields,omitempty"`
  Fee *AmountCommission `thrift:"fee,11" db:"fee" json:"fee"`
  // unused fields # 12 to 13
  ExtraFee []*ExtraFee `thrift:"extraFee,14" db:"extraFee" json:"extraFee"`
}

func NewTokenTransfer() *TokenTransfer {
  return &TokenTransfer{}
}


func (p *TokenTransfer) GetToken() general.Address {
  return p.Token
}

func (p *TokenTransfer) GetCode() TokenCode {
  return p.Code
}

func (p *TokenTransfer) GetSender() general.Address {
  return p.Sender
}

func (p *TokenTransfer) GetReceiver() general.Address {
  return p.Receiver
}

func (p *TokenTransfer) GetAmount() TokenAmount {
  return p.Amount
}

func (p *TokenTransfer) GetInitiator() general.Address {
  return p.Initiator
}
var TokenTransfer_Transaction_DEFAULT *TransactionId
func (p *TokenTransfer) GetTransaction() *TransactionId {
  if !p.IsSetTransaction() {
    return TokenTransfer_Transaction_DEFAULT
  }
return p.Transaction
}

func (p *TokenTransfer) GetTime() Time {
  return p.Time
}

func (p *TokenTransfer) GetState() SmartOperationState {
  return p.State
}
var TokenTransfer_UserFields_DEFAULT []byte

func (p *TokenTransfer) GetUserFields() []byte {
  return p.UserFields
}
var TokenTransfer_Fee_DEFAULT *AmountCommission
func (p *TokenTransfer) GetFee() *AmountCommission {
  if !p.IsSetFee() {
    return TokenTransfer_Fee_DEFAULT
  }
return p.Fee
}

func (p *TokenTransfer) GetExtraFee() []*ExtraFee {
  return p.ExtraFee
}
func (p *TokenTransfer) IsSetTransaction() bool {
  return p.Transaction != nil
}

func (p *TokenTransfer) IsSetUserFields() bool {
  return p.UserFields != nil
}

func (p *TokenTransfer) IsSetFee() bool {
  return p.Fee != nil
}

func (p *TokenTransfer) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TokenTransfer)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Token = temp
}
  return nil
}

func (p *TokenTransfer)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TokenCode(v)
  p.Code = temp
}
  return nil
}

func (p *TokenTransfer)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := general.Address(v)
  p.Sender = temp
}
  return nil
}

func (p *TokenTransfer)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := general.Address(v)
  p.Receiver = temp
}
  return nil
}

func (p *TokenTransfer)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TokenAmount(v)
  p.Amount = temp
}
  return nil
}

func (p *TokenTransfer)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := general.Address(v)
  p.Initiator = temp
}
  return nil
}

func (p *TokenTransfer)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.Transaction = &TransactionId{}
  if err := p.Transaction.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Transaction), err)
  }
  return nil
}

func (p *TokenTransfer)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := Time(v)
  p.Time = temp
}
  return nil
}

func (p *TokenTransfer)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := SmartOperationState(v)
  p.State = temp
}
  return nil
}

func (p *TokenTransfer)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.UserFields = v
}
  return nil
}

func (p *TokenTransfer)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  p.Fee = &AmountCommission{}
  if err := p.Fee.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Fee), err)
  }
  return nil
}

func (p *TokenTransfer)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ExtraFee, 0, size)
  p.ExtraFee =  tSlice
  for i := 0; i < size; i ++ {
    _elem73 := &ExtraFee{}
    if err := _elem73.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem73), err)
    }
    p.ExtraFee = append(p.ExtraFee, _elem73)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TokenTransfer) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenTransfer"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TokenTransfer) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Token); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *TokenTransfer) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:code: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:code: ", p), err) }
  return err
}

func (p *TokenTransfer) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sender", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sender: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Sender); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sender (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sender: ", p), err) }
  return err
}

func (p *TokenTransfer) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "receiver", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:receiver: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Receiver); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.receiver (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:receiver: ", p), err) }
  return err
}

func (p *TokenTransfer) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "amount", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:amount: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:amount: ", p), err) }
  return err
}

func (p *TokenTransfer) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "initiator", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:initiator: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Initiator); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.initiator (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:initiator: ", p), err) }
  return err
}

func (p *TokenTransfer) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transaction", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:transaction: ", p), err) }
  if err := p.Transaction.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Transaction), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:transaction: ", p), err) }
  return err
}

func (p *TokenTransfer) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "time", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:time: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Time)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:time: ", p), err) }
  return err
}

func (p *TokenTransfer) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "state", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:state: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:state: ", p), err) }
  return err
}

func (p *TokenTransfer) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUserFields() {
    if err := oprot.WriteFieldBegin(ctx, "userFields", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:userFields: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.UserFields); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userFields (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:userFields: ", p), err) }
  }
  return err
}

func (p *TokenTransfer) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fee", thrift.STRUCT, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:fee: ", p), err) }
  if err := p.Fee.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Fee), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:fee: ", p), err) }
  return err
}

func (p *TokenTransfer) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "extraFee", thrift.LIST, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:extraFee: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ExtraFee)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ExtraFee {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:extraFee: ", p), err) }
  return err
}

func (p *TokenTransfer) Equals(other *TokenTransfer) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Token, other.Token) != 0 { return false }
  if p.Code != other.Code { return false }
  if bytes.Compare(p.Sender, other.Sender) != 0 { return false }
  if bytes.Compare(p.Receiver, other.Receiver) != 0 { return false }
  if p.Amount != other.Amount { return false }
  if bytes.Compare(p.Initiator, other.Initiator) != 0 { return false }
  if !p.Transaction.Equals(other.Transaction) { return false }
  if p.Time != other.Time { return false }
  if p.State != other.State { return false }
  if bytes.Compare(p.UserFields, other.UserFields) != 0 { return false }
  if !p.Fee.Equals(other.Fee) { return false }
  if len(p.ExtraFee) != len(other.ExtraFee) { return false }
  for i, _tgt := range p.ExtraFee {
    _src74 := other.ExtraFee[i]
    if !_tgt.Equals(_src74) { return false }
  }
  return true
}

func (p *TokenTransfer) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TokenTransfer(%+v)", *p)
}

// Attributes:
//  - Status
//  - Count
//  - Transfers
type TokenTransfersResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Count int32 `thrift:"count,2" db:"count" json:"count"`
  Transfers []*TokenTransfer `thrift:"transfers,3" db:"transfers" json:"transfers"`
}

func NewTokenTransfersResult_() *TokenTransfersResult_ {
  return &TokenTransfersResult_{}
}

var TokenTransfersResult__Status_DEFAULT *general.APIResponse
func (p *TokenTransfersResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return TokenTransfersResult__Status_DEFAULT
  }
return p.Status
}

func (p *TokenTransfersResult_) GetCount() int32 {
  return p.Count
}

func (p *TokenTransfersResult_) GetTransfers() []*TokenTransfer {
  return p.Transfers
}
func (p *TokenTransfersResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TokenTransfersResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TokenTransfersResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TokenTransfersResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TokenTransfersResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TokenTransfer, 0, size)
  p.Transfers =  tSlice
  for i := 0; i < size; i ++ {
    _elem75 := &TokenTransfer{}
    if err := _elem75.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem75), err)
    }
    p.Transfers = append(p.Transfers, _elem75)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TokenTransfersResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenTransfersResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TokenTransfersResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TokenTransfersResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *TokenTransfersResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transfers", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:transfers: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Transfers)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Transfers {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:transfers: ", p), err) }
  return err
}

func (p *TokenTransfersResult_) Equals(other *TokenTransfersResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.Count != other.Count { return false }
  if len(p.Transfers) != len(other.Transfers) { return false }
  for i, _tgt := range p.Transfers {
    _src76 := other.Transfers[i]
    if !_tgt.Equals(_src76) { return false }
  }
  return true
}

func (p *TokenTransfersResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TokenTransfersResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - Count
//  - Transactions
type TokenTransactionsResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Count int32 `thrift:"count,2" db:"count" json:"count"`
  Transactions []*TokenTransaction `thrift:"transactions,3" db:"transactions" json:"transactions"`
}

func NewTokenTransactionsResult_() *TokenTransactionsResult_ {
  return &TokenTransactionsResult_{}
}

var TokenTransactionsResult__Status_DEFAULT *general.APIResponse
func (p *TokenTransactionsResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return TokenTransactionsResult__Status_DEFAULT
  }
return p.Status
}

func (p *TokenTransactionsResult_) GetCount() int32 {
  return p.Count
}

func (p *TokenTransactionsResult_) GetTransactions() []*TokenTransaction {
  return p.Transactions
}
func (p *TokenTransactionsResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TokenTransactionsResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TokenTransactionsResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TokenTransactionsResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TokenTransactionsResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TokenTransaction, 0, size)
  p.Transactions =  tSlice
  for i := 0; i < size; i ++ {
    _elem77 := &TokenTransaction{}
    if err := _elem77.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem77), err)
    }
    p.Transactions = append(p.Transactions, _elem77)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TokenTransactionsResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenTransactionsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TokenTransactionsResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TokenTransactionsResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *TokenTransactionsResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactions", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:transactions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Transactions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Transactions {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:transactions: ", p), err) }
  return err
}

func (p *TokenTransactionsResult_) Equals(other *TokenTransactionsResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.Count != other.Count { return false }
  if len(p.Transactions) != len(other.Transactions) { return false }
  for i, _tgt := range p.Transactions {
    _src78 := other.Transactions[i]
    if !_tgt.Equals(_src78) { return false }
  }
  return true
}

func (p *TokenTransactionsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TokenTransactionsResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - Token
type TokenInfoResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Token *TokenInfo `thrift:"token,2" db:"token" json:"token"`
}

func NewTokenInfoResult_() *TokenInfoResult_ {
  return &TokenInfoResult_{}
}

var TokenInfoResult__Status_DEFAULT *general.APIResponse
func (p *TokenInfoResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return TokenInfoResult__Status_DEFAULT
  }
return p.Status
}
var TokenInfoResult__Token_DEFAULT *TokenInfo
func (p *TokenInfoResult_) GetToken() *TokenInfo {
  if !p.IsSetToken() {
    return TokenInfoResult__Token_DEFAULT
  }
return p.Token
}
func (p *TokenInfoResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TokenInfoResult_) IsSetToken() bool {
  return p.Token != nil
}

func (p *TokenInfoResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TokenInfoResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TokenInfoResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Token = &TokenInfo{}
  if err := p.Token.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Token), err)
  }
  return nil
}

func (p *TokenInfoResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenInfoResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TokenInfoResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TokenInfoResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err) }
  if err := p.Token.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Token), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err) }
  return err
}

func (p *TokenInfoResult_) Equals(other *TokenInfoResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if !p.Token.Equals(other.Token) { return false }
  return true
}

func (p *TokenInfoResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TokenInfoResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - Count
//  - Holders
type TokenHoldersResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Count int32 `thrift:"count,2" db:"count" json:"count"`
  Holders []*TokenHolder `thrift:"holders,3" db:"holders" json:"holders"`
}

func NewTokenHoldersResult_() *TokenHoldersResult_ {
  return &TokenHoldersResult_{}
}

var TokenHoldersResult__Status_DEFAULT *general.APIResponse
func (p *TokenHoldersResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return TokenHoldersResult__Status_DEFAULT
  }
return p.Status
}

func (p *TokenHoldersResult_) GetCount() int32 {
  return p.Count
}

func (p *TokenHoldersResult_) GetHolders() []*TokenHolder {
  return p.Holders
}
func (p *TokenHoldersResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TokenHoldersResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TokenHoldersResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TokenHoldersResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TokenHoldersResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TokenHolder, 0, size)
  p.Holders =  tSlice
  for i := 0; i < size; i ++ {
    _elem79 := &TokenHolder{}
    if err := _elem79.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem79), err)
    }
    p.Holders = append(p.Holders, _elem79)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TokenHoldersResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenHoldersResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TokenHoldersResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TokenHoldersResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *TokenHoldersResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "holders", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:holders: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Holders)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Holders {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:holders: ", p), err) }
  return err
}

func (p *TokenHoldersResult_) Equals(other *TokenHoldersResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.Count != other.Count { return false }
  if len(p.Holders) != len(other.Holders) { return false }
  for i, _tgt := range p.Holders {
    _src80 := other.Holders[i]
    if !_tgt.Equals(_src80) { return false }
  }
  return true
}

func (p *TokenHoldersResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TokenHoldersResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - RequestId
//  - RoundNum
type SendTransactionResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  RequestId int64 `thrift:"requestId,2" db:"requestId" json:"requestId"`
  RoundNum int32 `thrift:"roundNum,3" db:"roundNum" json:"roundNum"`
}

func NewSendTransactionResult_() *SendTransactionResult_ {
  return &SendTransactionResult_{}
}

var SendTransactionResult__Status_DEFAULT *general.APIResponse
func (p *SendTransactionResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return SendTransactionResult__Status_DEFAULT
  }
return p.Status
}

func (p *SendTransactionResult_) GetRequestId() int64 {
  return p.RequestId
}

func (p *SendTransactionResult_) GetRoundNum() int32 {
  return p.RoundNum
}
func (p *SendTransactionResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *SendTransactionResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SendTransactionResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *SendTransactionResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RequestId = v
}
  return nil
}

func (p *SendTransactionResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RoundNum = v
}
  return nil
}

func (p *SendTransactionResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SendTransactionResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SendTransactionResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *SendTransactionResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "requestId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestId: ", p), err) }
  return err
}

func (p *SendTransactionResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roundNum", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roundNum: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RoundNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roundNum (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roundNum: ", p), err) }
  return err
}

func (p *SendTransactionResult_) Equals(other *SendTransactionResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.RequestId != other.RequestId { return false }
  if p.RoundNum != other.RoundNum { return false }
  return true
}

func (p *SendTransactionResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SendTransactionResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - Count
//  - Tokens
type TokensListResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Count int32 `thrift:"count,2" db:"count" json:"count"`
  Tokens []*TokenInfo `thrift:"tokens,3" db:"tokens" json:"tokens"`
}

func NewTokensListResult_() *TokensListResult_ {
  return &TokensListResult_{}
}

var TokensListResult__Status_DEFAULT *general.APIResponse
func (p *TokensListResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return TokensListResult__Status_DEFAULT
  }
return p.Status
}

func (p *TokensListResult_) GetCount() int32 {
  return p.Count
}

func (p *TokensListResult_) GetTokens() []*TokenInfo {
  return p.Tokens
}
func (p *TokensListResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TokensListResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TokensListResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TokensListResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TokensListResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TokenInfo, 0, size)
  p.Tokens =  tSlice
  for i := 0; i < size; i ++ {
    _elem81 := &TokenInfo{}
    if err := _elem81.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem81), err)
    }
    p.Tokens = append(p.Tokens, _elem81)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TokensListResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokensListResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TokensListResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TokensListResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *TokensListResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tokens", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tokens: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Tokens)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tokens {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tokens: ", p), err) }
  return err
}

func (p *TokensListResult_) Equals(other *TokensListResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.Count != other.Count { return false }
  if len(p.Tokens) != len(other.Tokens) { return false }
  for i, _tgt := range p.Tokens {
    _src82 := other.Tokens[i]
    if !_tgt.Equals(_src82) { return false }
  }
  return true
}

func (p *TokensListResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TokensListResult_(%+v)", *p)
}

// Attributes:
//  - Address
//  - Balance
//  - TransactionsNumber
//  - FirstTransactionTime
//  - Delegated
type WalletInfo struct {
  Address general.Address `thrift:"address,1" db:"address" json:"address"`
  Balance *general.Amount `thrift:"balance,2" db:"balance" json:"balance"`
  TransactionsNumber int64 `thrift:"transactionsNumber,3" db:"transactionsNumber" json:"transactionsNumber"`
  FirstTransactionTime Time `thrift:"firstTransactionTime,4" db:"firstTransactionTime" json:"firstTransactionTime"`
  Delegated *Delegated `thrift:"delegated,5" db:"delegated" json:"delegated,omitempty"`
}

func NewWalletInfo() *WalletInfo {
  return &WalletInfo{}
}


func (p *WalletInfo) GetAddress() general.Address {
  return p.Address
}
var WalletInfo_Balance_DEFAULT *general.Amount
func (p *WalletInfo) GetBalance() *general.Amount {
  if !p.IsSetBalance() {
    return WalletInfo_Balance_DEFAULT
  }
return p.Balance
}

func (p *WalletInfo) GetTransactionsNumber() int64 {
  return p.TransactionsNumber
}

func (p *WalletInfo) GetFirstTransactionTime() Time {
  return p.FirstTransactionTime
}
var WalletInfo_Delegated_DEFAULT *Delegated
func (p *WalletInfo) GetDelegated() *Delegated {
  if !p.IsSetDelegated() {
    return WalletInfo_Delegated_DEFAULT
  }
return p.Delegated
}
func (p *WalletInfo) IsSetBalance() bool {
  return p.Balance != nil
}

func (p *WalletInfo) IsSetDelegated() bool {
  return p.Delegated != nil
}

func (p *WalletInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WalletInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Address = temp
}
  return nil
}

func (p *WalletInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Balance = &general.Amount{}
  if err := p.Balance.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Balance), err)
  }
  return nil
}

func (p *WalletInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TransactionsNumber = v
}
  return nil
}

func (p *WalletInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Time(v)
  p.FirstTransactionTime = temp
}
  return nil
}

func (p *WalletInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.Delegated = &Delegated{}
  if err := p.Delegated.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Delegated), err)
  }
  return nil
}

func (p *WalletInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WalletInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Address); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *WalletInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "balance", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:balance: ", p), err) }
  if err := p.Balance.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Balance), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:balance: ", p), err) }
  return err
}

func (p *WalletInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactionsNumber", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:transactionsNumber: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TransactionsNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transactionsNumber (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:transactionsNumber: ", p), err) }
  return err
}

func (p *WalletInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "firstTransactionTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:firstTransactionTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FirstTransactionTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.firstTransactionTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:firstTransactionTime: ", p), err) }
  return err
}

func (p *WalletInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDelegated() {
    if err := oprot.WriteFieldBegin(ctx, "delegated", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:delegated: ", p), err) }
    if err := p.Delegated.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Delegated), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:delegated: ", p), err) }
  }
  return err
}

func (p *WalletInfo) Equals(other *WalletInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Address, other.Address) != 0 { return false }
  if !p.Balance.Equals(other.Balance) { return false }
  if p.TransactionsNumber != other.TransactionsNumber { return false }
  if p.FirstTransactionTime != other.FirstTransactionTime { return false }
  if !p.Delegated.Equals(other.Delegated) { return false }
  return true
}

func (p *WalletInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WalletInfo(%+v)", *p)
}

// Attributes:
//  - Fee
type ActualFeeGetResult_ struct {
  Fee *AmountCommission `thrift:"fee,1" db:"fee" json:"fee"`
}

func NewActualFeeGetResult_() *ActualFeeGetResult_ {
  return &ActualFeeGetResult_{}
}

var ActualFeeGetResult__Fee_DEFAULT *AmountCommission
func (p *ActualFeeGetResult_) GetFee() *AmountCommission {
  if !p.IsSetFee() {
    return ActualFeeGetResult__Fee_DEFAULT
  }
return p.Fee
}
func (p *ActualFeeGetResult_) IsSetFee() bool {
  return p.Fee != nil
}

func (p *ActualFeeGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActualFeeGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Fee = &AmountCommission{}
  if err := p.Fee.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Fee), err)
  }
  return nil
}

func (p *ActualFeeGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ActualFeeGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActualFeeGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fee", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fee: ", p), err) }
  if err := p.Fee.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Fee), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fee: ", p), err) }
  return err
}

func (p *ActualFeeGetResult_) Equals(other *ActualFeeGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Fee.Equals(other.Fee) { return false }
  return true
}

func (p *ActualFeeGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActualFeeGetResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - Count
//  - Wallets
type WalletsGetResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Count int32 `thrift:"count,2" db:"count" json:"count"`
  Wallets []*WalletInfo `thrift:"wallets,3" db:"wallets" json:"wallets"`
}

func NewWalletsGetResult_() *WalletsGetResult_ {
  return &WalletsGetResult_{}
}

var WalletsGetResult__Status_DEFAULT *general.APIResponse
func (p *WalletsGetResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return WalletsGetResult__Status_DEFAULT
  }
return p.Status
}

func (p *WalletsGetResult_) GetCount() int32 {
  return p.Count
}

func (p *WalletsGetResult_) GetWallets() []*WalletInfo {
  return p.Wallets
}
func (p *WalletsGetResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *WalletsGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WalletsGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *WalletsGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *WalletsGetResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*WalletInfo, 0, size)
  p.Wallets =  tSlice
  for i := 0; i < size; i ++ {
    _elem83 := &WalletInfo{}
    if err := _elem83.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem83), err)
    }
    p.Wallets = append(p.Wallets, _elem83)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WalletsGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletsGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WalletsGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *WalletsGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *WalletsGetResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "wallets", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:wallets: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Wallets)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Wallets {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:wallets: ", p), err) }
  return err
}

func (p *WalletsGetResult_) Equals(other *WalletsGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.Count != other.Count { return false }
  if len(p.Wallets) != len(other.Wallets) { return false }
  for i, _tgt := range p.Wallets {
    _src84 := other.Wallets[i]
    if !_tgt.Equals(_src84) { return false }
  }
  return true
}

func (p *WalletsGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WalletsGetResult_(%+v)", *p)
}

// Attributes:
//  - Address
//  - TimesWriter
//  - TimesTrusted
//  - FeeCollected
type TrustedInfo struct {
  Address general.Address `thrift:"address,1" db:"address" json:"address"`
  TimesWriter int32 `thrift:"timesWriter,2" db:"timesWriter" json:"timesWriter"`
  TimesTrusted int32 `thrift:"timesTrusted,3" db:"timesTrusted" json:"timesTrusted"`
  FeeCollected *general.Amount `thrift:"feeCollected,4" db:"feeCollected" json:"feeCollected"`
}

func NewTrustedInfo() *TrustedInfo {
  return &TrustedInfo{}
}


func (p *TrustedInfo) GetAddress() general.Address {
  return p.Address
}

func (p *TrustedInfo) GetTimesWriter() int32 {
  return p.TimesWriter
}

func (p *TrustedInfo) GetTimesTrusted() int32 {
  return p.TimesTrusted
}
var TrustedInfo_FeeCollected_DEFAULT *general.Amount
func (p *TrustedInfo) GetFeeCollected() *general.Amount {
  if !p.IsSetFeeCollected() {
    return TrustedInfo_FeeCollected_DEFAULT
  }
return p.FeeCollected
}
func (p *TrustedInfo) IsSetFeeCollected() bool {
  return p.FeeCollected != nil
}

func (p *TrustedInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TrustedInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Address = temp
}
  return nil
}

func (p *TrustedInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimesWriter = v
}
  return nil
}

func (p *TrustedInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TimesTrusted = v
}
  return nil
}

func (p *TrustedInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.FeeCollected = &general.Amount{}
  if err := p.FeeCollected.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FeeCollected), err)
  }
  return nil
}

func (p *TrustedInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TrustedInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TrustedInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Address); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *TrustedInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "timesWriter", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timesWriter: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TimesWriter)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timesWriter (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timesWriter: ", p), err) }
  return err
}

func (p *TrustedInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "timesTrusted", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timesTrusted: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TimesTrusted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timesTrusted (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timesTrusted: ", p), err) }
  return err
}

func (p *TrustedInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "feeCollected", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:feeCollected: ", p), err) }
  if err := p.FeeCollected.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FeeCollected), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:feeCollected: ", p), err) }
  return err
}

func (p *TrustedInfo) Equals(other *TrustedInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Address, other.Address) != 0 { return false }
  if p.TimesWriter != other.TimesWriter { return false }
  if p.TimesTrusted != other.TimesTrusted { return false }
  if !p.FeeCollected.Equals(other.FeeCollected) { return false }
  return true
}

func (p *TrustedInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TrustedInfo(%+v)", *p)
}

// Attributes:
//  - Status
//  - Pages
//  - Writers
type TrustedGetResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Pages int32 `thrift:"pages,2" db:"pages" json:"pages"`
  Writers []*TrustedInfo `thrift:"writers,3" db:"writers" json:"writers"`
}

func NewTrustedGetResult_() *TrustedGetResult_ {
  return &TrustedGetResult_{}
}

var TrustedGetResult__Status_DEFAULT *general.APIResponse
func (p *TrustedGetResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return TrustedGetResult__Status_DEFAULT
  }
return p.Status
}

func (p *TrustedGetResult_) GetPages() int32 {
  return p.Pages
}

func (p *TrustedGetResult_) GetWriters() []*TrustedInfo {
  return p.Writers
}
func (p *TrustedGetResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TrustedGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TrustedGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TrustedGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pages = v
}
  return nil
}

func (p *TrustedGetResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TrustedInfo, 0, size)
  p.Writers =  tSlice
  for i := 0; i < size; i ++ {
    _elem85 := &TrustedInfo{}
    if err := _elem85.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem85), err)
    }
    p.Writers = append(p.Writers, _elem85)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TrustedGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TrustedGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TrustedGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TrustedGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pages", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pages: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Pages)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pages (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pages: ", p), err) }
  return err
}

func (p *TrustedGetResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "writers", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:writers: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Writers)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Writers {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:writers: ", p), err) }
  return err
}

func (p *TrustedGetResult_) Equals(other *TrustedGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.Pages != other.Pages { return false }
  if len(p.Writers) != len(other.Writers) { return false }
  for i, _tgt := range p.Writers {
    _src86 := other.Writers[i]
    if !_tgt.Equals(_src86) { return false }
  }
  return true
}

func (p *TrustedGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TrustedGetResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - CurrRound
//  - LastBlock
type SyncStateResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  CurrRound int64 `thrift:"currRound,2" db:"currRound" json:"currRound"`
  LastBlock int64 `thrift:"lastBlock,3" db:"lastBlock" json:"lastBlock"`
}

func NewSyncStateResult_() *SyncStateResult_ {
  return &SyncStateResult_{}
}

var SyncStateResult__Status_DEFAULT *general.APIResponse
func (p *SyncStateResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return SyncStateResult__Status_DEFAULT
  }
return p.Status
}

func (p *SyncStateResult_) GetCurrRound() int64 {
  return p.CurrRound
}

func (p *SyncStateResult_) GetLastBlock() int64 {
  return p.LastBlock
}
func (p *SyncStateResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *SyncStateResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncStateResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *SyncStateResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CurrRound = v
}
  return nil
}

func (p *SyncStateResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastBlock = v
}
  return nil
}

func (p *SyncStateResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SyncStateResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncStateResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *SyncStateResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "currRound", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:currRound: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CurrRound)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currRound (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:currRound: ", p), err) }
  return err
}

func (p *SyncStateResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastBlock", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastBlock: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastBlock)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastBlock (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastBlock: ", p), err) }
  return err
}

func (p *SyncStateResult_) Equals(other *SyncStateResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.CurrRound != other.CurrRound { return false }
  if p.LastBlock != other.LastBlock { return false }
  return true
}

func (p *SyncStateResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncStateResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - ExecuteCount
type ExecuteCountGetResult_ struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  ExecuteCount int64 `thrift:"executeCount,2" db:"executeCount" json:"executeCount"`
}

func NewExecuteCountGetResult_() *ExecuteCountGetResult_ {
  return &ExecuteCountGetResult_{}
}

var ExecuteCountGetResult__Status_DEFAULT *general.APIResponse
func (p *ExecuteCountGetResult_) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return ExecuteCountGetResult__Status_DEFAULT
  }
return p.Status
}

func (p *ExecuteCountGetResult_) GetExecuteCount() int64 {
  return p.ExecuteCount
}
func (p *ExecuteCountGetResult_) IsSetStatus() bool {
  return p.Status != nil
}

func (p *ExecuteCountGetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExecuteCountGetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *ExecuteCountGetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExecuteCount = v
}
  return nil
}

func (p *ExecuteCountGetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ExecuteCountGetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExecuteCountGetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *ExecuteCountGetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "executeCount", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:executeCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ExecuteCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.executeCount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:executeCount: ", p), err) }
  return err
}

func (p *ExecuteCountGetResult_) Equals(other *ExecuteCountGetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.ExecuteCount != other.ExecuteCount { return false }
  return true
}

func (p *ExecuteCountGetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExecuteCountGetResult_(%+v)", *p)
}

// Attributes:
//  - Name
//  - Code
//  - TokenStandard
type TokenFilters struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Code string `thrift:"code,2" db:"code" json:"code"`
  TokenStandard int32 `thrift:"tokenStandard,3" db:"tokenStandard" json:"tokenStandard"`
}

func NewTokenFilters() *TokenFilters {
  return &TokenFilters{}
}


func (p *TokenFilters) GetName() string {
  return p.Name
}

func (p *TokenFilters) GetCode() string {
  return p.Code
}

func (p *TokenFilters) GetTokenStandard() int32 {
  return p.TokenStandard
}
func (p *TokenFilters) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TokenFilters)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TokenFilters)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *TokenFilters)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TokenStandard = v
}
  return nil
}

func (p *TokenFilters) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenFilters"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TokenFilters) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *TokenFilters) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:code: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:code: ", p), err) }
  return err
}

func (p *TokenFilters) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tokenStandard", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tokenStandard: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TokenStandard)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tokenStandard (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tokenStandard: ", p), err) }
  return err
}

func (p *TokenFilters) Equals(other *TokenFilters) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if p.Code != other.Code { return false }
  if p.TokenStandard != other.TokenStandard { return false }
  return true
}

func (p *TokenFilters) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TokenFilters(%+v)", *p)
}

// Attributes:
//  - Transactions
type TransactionsList struct {
  Transactions []*Transaction `thrift:"transactions,1" db:"transactions" json:"transactions"`
}

func NewTransactionsList() *TransactionsList {
  return &TransactionsList{}
}


func (p *TransactionsList) GetTransactions() []*Transaction {
  return p.Transactions
}
func (p *TransactionsList) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransactionsList)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Transaction, 0, size)
  p.Transactions =  tSlice
  for i := 0; i < size; i ++ {
    _elem87 := &Transaction{}
    if err := _elem87.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem87), err)
    }
    p.Transactions = append(p.Transactions, _elem87)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TransactionsList) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionsList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransactionsList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactions", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:transactions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Transactions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Transactions {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:transactions: ", p), err) }
  return err
}

func (p *TransactionsList) Equals(other *TransactionsList) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Transactions) != len(other.Transactions) { return false }
  for i, _tgt := range p.Transactions {
    _src88 := other.Transactions[i]
    if !_tgt.Equals(_src88) { return false }
  }
  return true
}

func (p *TransactionsList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransactionsList(%+v)", *p)
}

// Attributes:
//  - TransactionResults
type TransactionsListFlowResult_ struct {
  TransactionResults []*TransactionFlowResult_ `thrift:"transactionResults,1" db:"transactionResults" json:"transactionResults"`
}

func NewTransactionsListFlowResult_() *TransactionsListFlowResult_ {
  return &TransactionsListFlowResult_{}
}


func (p *TransactionsListFlowResult_) GetTransactionResults() []*TransactionFlowResult_ {
  return p.TransactionResults
}
func (p *TransactionsListFlowResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransactionsListFlowResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TransactionFlowResult_, 0, size)
  p.TransactionResults =  tSlice
  for i := 0; i < size; i ++ {
    _elem89 := &TransactionFlowResult_{}
    if err := _elem89.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem89), err)
    }
    p.TransactionResults = append(p.TransactionResults, _elem89)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TransactionsListFlowResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionsListFlowResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransactionsListFlowResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactionResults", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:transactionResults: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.TransactionResults)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TransactionResults {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:transactionResults: ", p), err) }
  return err
}

func (p *TransactionsListFlowResult_) Equals(other *TransactionsListFlowResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.TransactionResults) != len(other.TransactionResults) { return false }
  for i, _tgt := range p.TransactionResults {
    _src90 := other.TransactionResults[i]
    if !_tgt.Equals(_src90) { return false }
  }
  return true
}

func (p *TransactionsListFlowResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransactionsListFlowResult_(%+v)", *p)
}

// Attributes:
//  - Ids
type MultipleRequestIds struct {
  Ids []int64 `thrift:"ids,1" db:"ids" json:"ids"`
}

func NewMultipleRequestIds() *MultipleRequestIds {
  return &MultipleRequestIds{}
}


func (p *MultipleRequestIds) GetIds() []int64 {
  return p.Ids
}
func (p *MultipleRequestIds) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MultipleRequestIds)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Ids =  tSlice
  for i := 0; i < size; i ++ {
var _elem91 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem91 = v
}
    p.Ids = append(p.Ids, _elem91)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultipleRequestIds) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MultipleRequestIds"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultipleRequestIds) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Ids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Ids {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ids: ", p), err) }
  return err
}

func (p *MultipleRequestIds) Equals(other *MultipleRequestIds) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Ids) != len(other.Ids) { return false }
  for i, _tgt := range p.Ids {
    _src92 := other.Ids[i]
    if _tgt != _src92 { return false }
  }
  return true
}

func (p *MultipleRequestIds) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultipleRequestIds(%+v)", *p)
}

// Attributes:
//  - Addresses
type Addresses struct {
  Addresses []general.Address `thrift:"addresses,1" db:"addresses" json:"addresses"`
}

func NewAddresses() *Addresses {
  return &Addresses{}
}


func (p *Addresses) GetAddresses() []general.Address {
  return p.Addresses
}
func (p *Addresses) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Addresses)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]general.Address, 0, size)
  p.Addresses =  tSlice
  for i := 0; i < size; i ++ {
var _elem93 general.Address
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := general.Address(v)
    _elem93 = temp
}
    p.Addresses = append(p.Addresses, _elem93)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Addresses) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Addresses"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Addresses) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "addresses", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:addresses: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Addresses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Addresses {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:addresses: ", p), err) }
  return err
}

func (p *Addresses) Equals(other *Addresses) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Addresses) != len(other.Addresses) { return false }
  for i, _tgt := range p.Addresses {
    _src94 := other.Addresses[i]
    if bytes.Compare(_tgt, _src94) != 0 { return false }
  }
  return true
}

func (p *Addresses) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Addresses(%+v)", *p)
}

// Attributes:
//  - Balance
//  - Delegated
type WalletBalance struct {
  Balance *general.Amount `thrift:"balance,1" db:"balance" json:"balance"`
  Delegated *Delegated `thrift:"delegated,2" db:"delegated" json:"delegated,omitempty"`
}

func NewWalletBalance() *WalletBalance {
  return &WalletBalance{}
}

var WalletBalance_Balance_DEFAULT *general.Amount
func (p *WalletBalance) GetBalance() *general.Amount {
  if !p.IsSetBalance() {
    return WalletBalance_Balance_DEFAULT
  }
return p.Balance
}
var WalletBalance_Delegated_DEFAULT *Delegated
func (p *WalletBalance) GetDelegated() *Delegated {
  if !p.IsSetDelegated() {
    return WalletBalance_Delegated_DEFAULT
  }
return p.Delegated
}
func (p *WalletBalance) IsSetBalance() bool {
  return p.Balance != nil
}

func (p *WalletBalance) IsSetDelegated() bool {
  return p.Delegated != nil
}

func (p *WalletBalance) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WalletBalance)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Balance = &general.Amount{}
  if err := p.Balance.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Balance), err)
  }
  return nil
}

func (p *WalletBalance)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Delegated = &Delegated{}
  if err := p.Delegated.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Delegated), err)
  }
  return nil
}

func (p *WalletBalance) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletBalance"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WalletBalance) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "balance", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:balance: ", p), err) }
  if err := p.Balance.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Balance), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:balance: ", p), err) }
  return err
}

func (p *WalletBalance) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDelegated() {
    if err := oprot.WriteFieldBegin(ctx, "delegated", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:delegated: ", p), err) }
    if err := p.Delegated.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Delegated), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:delegated: ", p), err) }
  }
  return err
}

func (p *WalletBalance) Equals(other *WalletBalance) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Balance.Equals(other.Balance) { return false }
  if !p.Delegated.Equals(other.Delegated) { return false }
  return true
}

func (p *WalletBalance) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WalletBalance(%+v)", *p)
}

// Attributes:
//  - Addresses
//  - NotFound
//  - Balance
//  - Delegated
type WalletBalanceFull struct {
  Addresses general.Address `thrift:"addresses,1" db:"addresses" json:"addresses"`
  NotFound bool `thrift:"notFound,2" db:"notFound" json:"notFound"`
  Balance *general.Amount `thrift:"balance,3" db:"balance" json:"balance"`
  Delegated *Delegated `thrift:"delegated,4" db:"delegated" json:"delegated,omitempty"`
}

func NewWalletBalanceFull() *WalletBalanceFull {
  return &WalletBalanceFull{}
}


func (p *WalletBalanceFull) GetAddresses() general.Address {
  return p.Addresses
}

func (p *WalletBalanceFull) GetNotFound() bool {
  return p.NotFound
}
var WalletBalanceFull_Balance_DEFAULT *general.Amount
func (p *WalletBalanceFull) GetBalance() *general.Amount {
  if !p.IsSetBalance() {
    return WalletBalanceFull_Balance_DEFAULT
  }
return p.Balance
}
var WalletBalanceFull_Delegated_DEFAULT *Delegated
func (p *WalletBalanceFull) GetDelegated() *Delegated {
  if !p.IsSetDelegated() {
    return WalletBalanceFull_Delegated_DEFAULT
  }
return p.Delegated
}
func (p *WalletBalanceFull) IsSetBalance() bool {
  return p.Balance != nil
}

func (p *WalletBalanceFull) IsSetDelegated() bool {
  return p.Delegated != nil
}

func (p *WalletBalanceFull) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WalletBalanceFull)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Addresses = temp
}
  return nil
}

func (p *WalletBalanceFull)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NotFound = v
}
  return nil
}

func (p *WalletBalanceFull)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Balance = &general.Amount{}
  if err := p.Balance.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Balance), err)
  }
  return nil
}

func (p *WalletBalanceFull)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Delegated = &Delegated{}
  if err := p.Delegated.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Delegated), err)
  }
  return nil
}

func (p *WalletBalanceFull) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletBalanceFull"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WalletBalanceFull) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "addresses", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:addresses: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Addresses); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.addresses (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:addresses: ", p), err) }
  return err
}

func (p *WalletBalanceFull) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notFound", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFound: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotFound)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notFound (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFound: ", p), err) }
  return err
}

func (p *WalletBalanceFull) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "balance", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:balance: ", p), err) }
  if err := p.Balance.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Balance), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:balance: ", p), err) }
  return err
}

func (p *WalletBalanceFull) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDelegated() {
    if err := oprot.WriteFieldBegin(ctx, "delegated", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:delegated: ", p), err) }
    if err := p.Delegated.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Delegated), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:delegated: ", p), err) }
  }
  return err
}

func (p *WalletBalanceFull) Equals(other *WalletBalanceFull) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Addresses, other.Addresses) != 0 { return false }
  if p.NotFound != other.NotFound { return false }
  if !p.Balance.Equals(other.Balance) { return false }
  if !p.Delegated.Equals(other.Delegated) { return false }
  return true
}

func (p *WalletBalanceFull) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WalletBalanceFull(%+v)", *p)
}

// Attributes:
//  - Status
//  - Balances
type WalletBalanceResults struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Balances []*WalletBalanceFull `thrift:"balances,2" db:"balances" json:"balances"`
}

func NewWalletBalanceResults() *WalletBalanceResults {
  return &WalletBalanceResults{}
}

var WalletBalanceResults_Status_DEFAULT *general.APIResponse
func (p *WalletBalanceResults) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return WalletBalanceResults_Status_DEFAULT
  }
return p.Status
}

func (p *WalletBalanceResults) GetBalances() []*WalletBalanceFull {
  return p.Balances
}
func (p *WalletBalanceResults) IsSetStatus() bool {
  return p.Status != nil
}

func (p *WalletBalanceResults) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WalletBalanceResults)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *WalletBalanceResults)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*WalletBalanceFull, 0, size)
  p.Balances =  tSlice
  for i := 0; i < size; i ++ {
    _elem95 := &WalletBalanceFull{}
    if err := _elem95.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem95), err)
    }
    p.Balances = append(p.Balances, _elem95)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WalletBalanceResults) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletBalanceResults"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WalletBalanceResults) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *WalletBalanceResults) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "balances", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:balances: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Balances)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Balances {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:balances: ", p), err) }
  return err
}

func (p *WalletBalanceResults) Equals(other *WalletBalanceResults) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if len(p.Balances) != len(other.Balances) { return false }
  for i, _tgt := range p.Balances {
    _src96 := other.Balances[i]
    if !_tgt.Equals(_src96) { return false }
  }
  return true
}

func (p *WalletBalanceResults) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WalletBalanceResults(%+v)", *p)
}

// Attributes:
//  - Status
//  - Ids
type AcceptedRequestId struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  Ids int64 `thrift:"ids,2" db:"ids" json:"ids"`
}

func NewAcceptedRequestId() *AcceptedRequestId {
  return &AcceptedRequestId{}
}

var AcceptedRequestId_Status_DEFAULT *general.APIResponse
func (p *AcceptedRequestId) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return AcceptedRequestId_Status_DEFAULT
  }
return p.Status
}

func (p *AcceptedRequestId) GetIds() int64 {
  return p.Ids
}
func (p *AcceptedRequestId) IsSetStatus() bool {
  return p.Status != nil
}

func (p *AcceptedRequestId) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AcceptedRequestId)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *AcceptedRequestId)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Ids = v
}
  return nil
}

func (p *AcceptedRequestId) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AcceptedRequestId"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AcceptedRequestId) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *AcceptedRequestId) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ids", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ids: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Ids)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ids (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ids: ", p), err) }
  return err
}

func (p *AcceptedRequestId) Equals(other *AcceptedRequestId) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.Ids != other.Ids { return false }
  return true
}

func (p *AcceptedRequestId) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AcceptedRequestId(%+v)", *p)
}

// Attributes:
//  - Status
//  - RoundNum
//  - SubRound
type RoundData struct {
  Status *general.APIResponse `thrift:"status,1" db:"status" json:"status"`
  RoundNum int64 `thrift:"roundNum,2" db:"roundNum" json:"roundNum"`
  SubRound int32 `thrift:"subRound,3" db:"subRound" json:"subRound"`
}

func NewRoundData() *RoundData {
  return &RoundData{}
}

var RoundData_Status_DEFAULT *general.APIResponse
func (p *RoundData) GetStatus() *general.APIResponse {
  if !p.IsSetStatus() {
    return RoundData_Status_DEFAULT
  }
return p.Status
}

func (p *RoundData) GetRoundNum() int64 {
  return p.RoundNum
}

func (p *RoundData) GetSubRound() int32 {
  return p.SubRound
}
func (p *RoundData) IsSetStatus() bool {
  return p.Status != nil
}

func (p *RoundData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RoundData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Status = &general.APIResponse{}
  if err := p.Status.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *RoundData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RoundNum = v
}
  return nil
}

func (p *RoundData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SubRound = v
}
  return nil
}

func (p *RoundData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RoundData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RoundData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *RoundData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roundNum", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roundNum: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RoundNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roundNum (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roundNum: ", p), err) }
  return err
}

func (p *RoundData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "subRound", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:subRound: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SubRound)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.subRound (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:subRound: ", p), err) }
  return err
}

func (p *RoundData) Equals(other *RoundData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Status.Equals(other.Status) { return false }
  if p.RoundNum != other.RoundNum { return false }
  if p.SubRound != other.SubRound { return false }
  return true
}

func (p *RoundData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RoundData(%+v)", *p)
}

type API interface {
  // Parameters:
  //  - TransactionSize
  ActualFeeGet(ctx context.Context, transactionSize int32) (_r *ActualFeeGetResult_, _err error)
  // Parameters:
  //  - Address
  WalletDataGet(ctx context.Context, address general.Address) (_r *WalletDataGetResult_, _err error)
  // Parameters:
  //  - Address
  WalletIdGet(ctx context.Context, address general.Address) (_r *WalletIdGetResult_, _err error)
  // Parameters:
  //  - Address
  WalletTransactionsCountGet(ctx context.Context, address general.Address) (_r *WalletTransactionsCountGetResult_, _err error)
  // Parameters:
  //  - Address
  WalletBalanceGet(ctx context.Context, address general.Address) (_r *WalletBalanceGetResult_, _err error)
  RoundDataGet(ctx context.Context) (_r *RoundData, _err error)
  // Parameters:
  //  - WalletAddresses
  WalletsListBalancesGet(ctx context.Context, walletAddresses *Addresses) (_r *AcceptedRequestId, _err error)
  // Parameters:
  //  - RequestId
  WalletsListBalancesResultGet(ctx context.Context, requestId int64) (_r *WalletBalanceResults, _err error)
  // Parameters:
  //  - TransactionId
  TransactionGet(ctx context.Context, transactionId *TransactionId) (_r *TransactionGetResult_, _err error)
  // Parameters:
  //  - Address
  //  - Offset
  //  - Limit
  TransactionsGet(ctx context.Context, address general.Address, offset int64, limit int64) (_r *TransactionsGetResult_, _err error)
  // Parameters:
  //  - Transaction
  TransactionFlow(ctx context.Context, transaction *Transaction) (_r *TransactionFlowResult_, _err error)
  // Parameters:
  //  - Offset
  //  - Limit
  TransactionsListGet(ctx context.Context, offset int64, limit int64) (_r *TransactionsGetResult_, _err error)
  // Parameters:
  //  - GeneralQuery
  FilteredTransactionsListGet(ctx context.Context, generalQuery *TransactionsQuery) (_r *FilteredTransactionsListResult_, _err error)
  // Parameters:
  //  - GeneralQuery
  FilteredTrxsListGet(ctx context.Context, generalQuery *TransactionsQuery) (_r *AcceptedRequestId, _err error)
  // Parameters:
  //  - RequestId
  FilteredTrxsListGetResult_(ctx context.Context, requestId int64) (_r *FilteredTransactionsListResult_, _err error)
  // Parameters:
  //  - Transaction
  TransactionSend(ctx context.Context, transaction *Transaction) (_r *SendTransactionResult_, _err error)
  // Parameters:
  //  - RequestId
  TransactionResultGet(ctx context.Context, requestId int64) (_r *TransactionFlowResult_, _err error)
  // Parameters:
  //  - Transactions
  TransactionsListSend(ctx context.Context, transactions *TransactionsList) (_r *SendTransactionResult_, _err error)
  // Parameters:
  //  - RequestId
  TransactionsListResultGet(ctx context.Context, requestId int64) (_r *TransactionsListFlowResult_, _err error)
  GetLastHash(ctx context.Context) (_r PoolHash, _err error)
  // Parameters:
  //  - Sequence
  //  - Limit
  PoolListGetStable(ctx context.Context, sequence int64, limit int64) (_r *PoolListGetResult_, _err error)
  // Parameters:
  //  - Offset
  //  - Limit
  PoolListGet(ctx context.Context, offset int64, limit int64) (_r *PoolListGetResult_, _err error)
  // Parameters:
  //  - Sequence
  //  - Index
  PoolInfoGet(ctx context.Context, sequence int64, index int64) (_r *PoolInfoGetResult_, _err error)
  // Parameters:
  //  - Sequence
  //  - Offset
  //  - Limit
  PoolTransactionsGet(ctx context.Context, sequence int64, offset int64, limit int64) (_r *PoolTransactionsGetResult_, _err error)
  StatsGet(ctx context.Context) (_r *StatsGetResult_, _err error)
  // Parameters:
  //  - Address
  SmartContractGet(ctx context.Context, address general.Address) (_r *SmartContractGetResult_, _err error)
  // Parameters:
  //  - Deployer
  //  - Offset
  //  - Limit
  SmartContractsListGet(ctx context.Context, deployer general.Address, offset int64, limit int64) (_r *SmartContractsListGetResult_, _err error)
  // Parameters:
  //  - Deployer
  SmartContractAddressesListGet(ctx context.Context, deployer general.Address) (_r *SmartContractAddressesListGetResult_, _err error)
  // Parameters:
  //  - Obsolete
  WaitForBlock(ctx context.Context, obsolete PoolHash) (_r PoolHash, _err error)
  // Parameters:
  //  - SmartPublic
  WaitForSmartTransaction(ctx context.Context, smart_public general.Address) (_r *TransactionId, _err error)
  // Parameters:
  //  - Offset
  //  - Limit
  SmartContractsAllListGet(ctx context.Context, offset int64, limit int64) (_r *SmartContractsListGetResult_, _err error)
  // Parameters:
  //  - Address
  //  - ID
  TransactionsStateGet(ctx context.Context, address general.Address, id []TransactionInnerId) (_r *TransactionsStateGetResult_, _err error)
  // Parameters:
  //  - ByteCodeObjects
  ContractAllMethodsGet(ctx context.Context, byteCodeObjects []*general.ByteCodeObject) (_r *ContractAllMethodsGetResult_, _err error)
  // Parameters:
  //  - Address
  ContractMethodsGet(ctx context.Context, address general.Address) (_r *ContractAllMethodsGetResult_, _err error)
  // Parameters:
  //  - Address
  //  - ID
  SmartMethodParamsGet(ctx context.Context, address general.Address, id TransactionInnerId) (_r *SmartMethodParamsGetResult_, _err error)
  // Parameters:
  //  - Address
  SmartContractDataGet(ctx context.Context, address general.Address) (_r *SmartContractDataResult_, _err error)
  // Parameters:
  //  - SourceCode
  SmartContractCompile(ctx context.Context, sourceCode string) (_r *SmartContractCompileResult_, _err error)
  // Parameters:
  //  - Address
  TokenBalancesGet(ctx context.Context, address general.Address) (_r *TokenBalancesResult_, _err error)
  // Parameters:
  //  - Token
  //  - Offset
  //  - Limit
  TokenTransfersGet(ctx context.Context, token general.Address, offset int64, limit int64) (_r *TokenTransfersResult_, _err error)
  // Parameters:
  //  - Token
  //  - ID
  TokenTransferGet(ctx context.Context, token general.Address, id *TransactionId) (_r *TokenTransfersResult_, _err error)
  // Parameters:
  //  - Offset
  //  - Limit
  TokenTransfersListGet(ctx context.Context, offset int64, limit int64) (_r *TokenTransfersResult_, _err error)
  // Parameters:
  //  - Token
  //  - Address
  //  - Offset
  //  - Limit
  TokenWalletTransfersGet(ctx context.Context, token general.Address, address general.Address, offset int64, limit int64) (_r *TokenTransfersResult_, _err error)
  // Parameters:
  //  - Token
  //  - Offset
  //  - Limit
  TokenTransactionsGet(ctx context.Context, token general.Address, offset int64, limit int64) (_r *TokenTransactionsResult_, _err error)
  // Parameters:
  //  - Token
  TokenInfoGet(ctx context.Context, token general.Address) (_r *TokenInfoResult_, _err error)
  // Parameters:
  //  - Token
  //  - Offset
  //  - Limit
  //  - Order
  //  - Desc
  TokenHoldersGet(ctx context.Context, token general.Address, offset int64, limit int64, order TokenHoldersSortField, desc bool) (_r *TokenHoldersResult_, _err error)
  // Parameters:
  //  - Offset
  //  - Limit
  //  - Order
  //  - Desc
  //  - Filters
  TokensListGet(ctx context.Context, offset int64, limit int64, order TokensListSortField, desc bool, filters *TokenFilters) (_r *TokensListResult_, _err error)
  // Parameters:
  //  - Offset
  //  - Limit
  //  - OrdCol
  //  - Desc
  WalletsGet(ctx context.Context, offset int64, limit int64, ordCol int8, desc bool) (_r *WalletsGetResult_, _err error)
  // Parameters:
  //  - Page
  TrustedGet(ctx context.Context, page int32) (_r *TrustedGetResult_, _err error)
  SyncStateGet(ctx context.Context) (_r *SyncStateResult_, _err error)
  // Parameters:
  //  - ExecuteMethod
  ExecuteCountGet(ctx context.Context, executeMethod string) (_r *ExecuteCountGetResult_, _err error)
}

type APIClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewAPIClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *APIClient {
  return &APIClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewAPIClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *APIClient {
  return &APIClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewAPIClient(c thrift.TClient) *APIClient {
  return &APIClient{
    c: c,
  }
}

func (p *APIClient) Client_() thrift.TClient {
  return p.c
}

func (p *APIClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *APIClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - TransactionSize
func (p *APIClient) ActualFeeGet(ctx context.Context, transactionSize int32) (_r *ActualFeeGetResult_, _err error) {
  var _args97 APIActualFeeGetArgs
  _args97.TransactionSize = transactionSize
  var _result99 APIActualFeeGetResult
  var _meta98 thrift.ResponseMeta
  _meta98, _err = p.Client_().Call(ctx, "ActualFeeGet", &_args97, &_result99)
  p.SetLastResponseMeta_(_meta98)
  if _err != nil {
    return
  }
  return _result99.GetSuccess(), nil
}

// Parameters:
//  - Address
func (p *APIClient) WalletDataGet(ctx context.Context, address general.Address) (_r *WalletDataGetResult_, _err error) {
  var _args100 APIWalletDataGetArgs
  _args100.Address = address
  var _result102 APIWalletDataGetResult
  var _meta101 thrift.ResponseMeta
  _meta101, _err = p.Client_().Call(ctx, "WalletDataGet", &_args100, &_result102)
  p.SetLastResponseMeta_(_meta101)
  if _err != nil {
    return
  }
  return _result102.GetSuccess(), nil
}

// Parameters:
//  - Address
func (p *APIClient) WalletIdGet(ctx context.Context, address general.Address) (_r *WalletIdGetResult_, _err error) {
  var _args103 APIWalletIdGetArgs
  _args103.Address = address
  var _result105 APIWalletIdGetResult
  var _meta104 thrift.ResponseMeta
  _meta104, _err = p.Client_().Call(ctx, "WalletIdGet", &_args103, &_result105)
  p.SetLastResponseMeta_(_meta104)
  if _err != nil {
    return
  }
  return _result105.GetSuccess(), nil
}

// Parameters:
//  - Address
func (p *APIClient) WalletTransactionsCountGet(ctx context.Context, address general.Address) (_r *WalletTransactionsCountGetResult_, _err error) {
  var _args106 APIWalletTransactionsCountGetArgs
  _args106.Address = address
  var _result108 APIWalletTransactionsCountGetResult
  var _meta107 thrift.ResponseMeta
  _meta107, _err = p.Client_().Call(ctx, "WalletTransactionsCountGet", &_args106, &_result108)
  p.SetLastResponseMeta_(_meta107)
  if _err != nil {
    return
  }
  return _result108.GetSuccess(), nil
}

// Parameters:
//  - Address
func (p *APIClient) WalletBalanceGet(ctx context.Context, address general.Address) (_r *WalletBalanceGetResult_, _err error) {
  var _args109 APIWalletBalanceGetArgs
  _args109.Address = address
  var _result111 APIWalletBalanceGetResult
  var _meta110 thrift.ResponseMeta
  _meta110, _err = p.Client_().Call(ctx, "WalletBalanceGet", &_args109, &_result111)
  p.SetLastResponseMeta_(_meta110)
  if _err != nil {
    return
  }
  return _result111.GetSuccess(), nil
}

func (p *APIClient) RoundDataGet(ctx context.Context) (_r *RoundData, _err error) {
  var _args112 APIRoundDataGetArgs
  var _result114 APIRoundDataGetResult
  var _meta113 thrift.ResponseMeta
  _meta113, _err = p.Client_().Call(ctx, "RoundDataGet", &_args112, &_result114)
  p.SetLastResponseMeta_(_meta113)
  if _err != nil {
    return
  }
  return _result114.GetSuccess(), nil
}

// Parameters:
//  - WalletAddresses
func (p *APIClient) WalletsListBalancesGet(ctx context.Context, walletAddresses *Addresses) (_r *AcceptedRequestId, _err error) {
  var _args115 APIWalletsListBalancesGetArgs
  _args115.WalletAddresses = walletAddresses
  var _result117 APIWalletsListBalancesGetResult
  var _meta116 thrift.ResponseMeta
  _meta116, _err = p.Client_().Call(ctx, "WalletsListBalancesGet", &_args115, &_result117)
  p.SetLastResponseMeta_(_meta116)
  if _err != nil {
    return
  }
  return _result117.GetSuccess(), nil
}

// Parameters:
//  - RequestId
func (p *APIClient) WalletsListBalancesResultGet(ctx context.Context, requestId int64) (_r *WalletBalanceResults, _err error) {
  var _args118 APIWalletsListBalancesResultGetArgs
  _args118.RequestId = requestId
  var _result120 APIWalletsListBalancesResultGetResult
  var _meta119 thrift.ResponseMeta
  _meta119, _err = p.Client_().Call(ctx, "WalletsListBalancesResultGet", &_args118, &_result120)
  p.SetLastResponseMeta_(_meta119)
  if _err != nil {
    return
  }
  return _result120.GetSuccess(), nil
}

// Parameters:
//  - TransactionId
func (p *APIClient) TransactionGet(ctx context.Context, transactionId *TransactionId) (_r *TransactionGetResult_, _err error) {
  var _args121 APITransactionGetArgs
  _args121.TransactionId = transactionId
  var _result123 APITransactionGetResult
  var _meta122 thrift.ResponseMeta
  _meta122, _err = p.Client_().Call(ctx, "TransactionGet", &_args121, &_result123)
  p.SetLastResponseMeta_(_meta122)
  if _err != nil {
    return
  }
  return _result123.GetSuccess(), nil
}

// Parameters:
//  - Address
//  - Offset
//  - Limit
func (p *APIClient) TransactionsGet(ctx context.Context, address general.Address, offset int64, limit int64) (_r *TransactionsGetResult_, _err error) {
  var _args124 APITransactionsGetArgs
  _args124.Address = address
  _args124.Offset = offset
  _args124.Limit = limit
  var _result126 APITransactionsGetResult
  var _meta125 thrift.ResponseMeta
  _meta125, _err = p.Client_().Call(ctx, "TransactionsGet", &_args124, &_result126)
  p.SetLastResponseMeta_(_meta125)
  if _err != nil {
    return
  }
  return _result126.GetSuccess(), nil
}

// Parameters:
//  - Transaction
func (p *APIClient) TransactionFlow(ctx context.Context, transaction *Transaction) (_r *TransactionFlowResult_, _err error) {
  var _args127 APITransactionFlowArgs
  _args127.Transaction = transaction
  var _result129 APITransactionFlowResult
  var _meta128 thrift.ResponseMeta
  _meta128, _err = p.Client_().Call(ctx, "TransactionFlow", &_args127, &_result129)
  p.SetLastResponseMeta_(_meta128)
  if _err != nil {
    return
  }
  return _result129.GetSuccess(), nil
}

// Parameters:
//  - Offset
//  - Limit
func (p *APIClient) TransactionsListGet(ctx context.Context, offset int64, limit int64) (_r *TransactionsGetResult_, _err error) {
  var _args130 APITransactionsListGetArgs
  _args130.Offset = offset
  _args130.Limit = limit
  var _result132 APITransactionsListGetResult
  var _meta131 thrift.ResponseMeta
  _meta131, _err = p.Client_().Call(ctx, "TransactionsListGet", &_args130, &_result132)
  p.SetLastResponseMeta_(_meta131)
  if _err != nil {
    return
  }
  return _result132.GetSuccess(), nil
}

// Parameters:
//  - GeneralQuery
func (p *APIClient) FilteredTransactionsListGet(ctx context.Context, generalQuery *TransactionsQuery) (_r *FilteredTransactionsListResult_, _err error) {
  var _args133 APIFilteredTransactionsListGetArgs
  _args133.GeneralQuery = generalQuery
  var _result135 APIFilteredTransactionsListGetResult
  var _meta134 thrift.ResponseMeta
  _meta134, _err = p.Client_().Call(ctx, "FilteredTransactionsListGet", &_args133, &_result135)
  p.SetLastResponseMeta_(_meta134)
  if _err != nil {
    return
  }
  return _result135.GetSuccess(), nil
}

// Parameters:
//  - GeneralQuery
func (p *APIClient) FilteredTrxsListGet(ctx context.Context, generalQuery *TransactionsQuery) (_r *AcceptedRequestId, _err error) {
  var _args136 APIFilteredTrxsListGetArgs
  _args136.GeneralQuery = generalQuery
  var _result138 APIFilteredTrxsListGetResult
  var _meta137 thrift.ResponseMeta
  _meta137, _err = p.Client_().Call(ctx, "FilteredTrxsListGet", &_args136, &_result138)
  p.SetLastResponseMeta_(_meta137)
  if _err != nil {
    return
  }
  return _result138.GetSuccess(), nil
}

// Parameters:
//  - RequestId
func (p *APIClient) FilteredTrxsListGetResult_(ctx context.Context, requestId int64) (_r *FilteredTransactionsListResult_, _err error) {
  var _args139 APIFilteredTrxsListGetResultArgs
  _args139.RequestId = requestId
  var _result141 APIFilteredTrxsListGetResultResult
  var _meta140 thrift.ResponseMeta
  _meta140, _err = p.Client_().Call(ctx, "FilteredTrxsListGetResult", &_args139, &_result141)
  p.SetLastResponseMeta_(_meta140)
  if _err != nil {
    return
  }
  return _result141.GetSuccess(), nil
}

// Parameters:
//  - Transaction
func (p *APIClient) TransactionSend(ctx context.Context, transaction *Transaction) (_r *SendTransactionResult_, _err error) {
  var _args142 APITransactionSendArgs
  _args142.Transaction = transaction
  var _result144 APITransactionSendResult
  var _meta143 thrift.ResponseMeta
  _meta143, _err = p.Client_().Call(ctx, "TransactionSend", &_args142, &_result144)
  p.SetLastResponseMeta_(_meta143)
  if _err != nil {
    return
  }
  return _result144.GetSuccess(), nil
}

// Parameters:
//  - RequestId
func (p *APIClient) TransactionResultGet(ctx context.Context, requestId int64) (_r *TransactionFlowResult_, _err error) {
  var _args145 APITransactionResultGetArgs
  _args145.RequestId = requestId
  var _result147 APITransactionResultGetResult
  var _meta146 thrift.ResponseMeta
  _meta146, _err = p.Client_().Call(ctx, "TransactionResultGet", &_args145, &_result147)
  p.SetLastResponseMeta_(_meta146)
  if _err != nil {
    return
  }
  return _result147.GetSuccess(), nil
}

// Parameters:
//  - Transactions
func (p *APIClient) TransactionsListSend(ctx context.Context, transactions *TransactionsList) (_r *SendTransactionResult_, _err error) {
  var _args148 APITransactionsListSendArgs
  _args148.Transactions = transactions
  var _result150 APITransactionsListSendResult
  var _meta149 thrift.ResponseMeta
  _meta149, _err = p.Client_().Call(ctx, "TransactionsListSend", &_args148, &_result150)
  p.SetLastResponseMeta_(_meta149)
  if _err != nil {
    return
  }
  return _result150.GetSuccess(), nil
}

// Parameters:
//  - RequestId
func (p *APIClient) TransactionsListResultGet(ctx context.Context, requestId int64) (_r *TransactionsListFlowResult_, _err error) {
  var _args151 APITransactionsListResultGetArgs
  _args151.RequestId = requestId
  var _result153 APITransactionsListResultGetResult
  var _meta152 thrift.ResponseMeta
  _meta152, _err = p.Client_().Call(ctx, "TransactionsListResultGet", &_args151, &_result153)
  p.SetLastResponseMeta_(_meta152)
  if _err != nil {
    return
  }
  return _result153.GetSuccess(), nil
}

func (p *APIClient) GetLastHash(ctx context.Context) (_r PoolHash, _err error) {
  var _args154 APIGetLastHashArgs
  var _result156 APIGetLastHashResult
  var _meta155 thrift.ResponseMeta
  _meta155, _err = p.Client_().Call(ctx, "GetLastHash", &_args154, &_result156)
  p.SetLastResponseMeta_(_meta155)
  if _err != nil {
    return
  }
  return _result156.GetSuccess(), nil
}

// Parameters:
//  - Sequence
//  - Limit
func (p *APIClient) PoolListGetStable(ctx context.Context, sequence int64, limit int64) (_r *PoolListGetResult_, _err error) {
  var _args157 APIPoolListGetStableArgs
  _args157.Sequence = sequence
  _args157.Limit = limit
  var _result159 APIPoolListGetStableResult
  var _meta158 thrift.ResponseMeta
  _meta158, _err = p.Client_().Call(ctx, "PoolListGetStable", &_args157, &_result159)
  p.SetLastResponseMeta_(_meta158)
  if _err != nil {
    return
  }
  return _result159.GetSuccess(), nil
}

// Parameters:
//  - Offset
//  - Limit
func (p *APIClient) PoolListGet(ctx context.Context, offset int64, limit int64) (_r *PoolListGetResult_, _err error) {
  var _args160 APIPoolListGetArgs
  _args160.Offset = offset
  _args160.Limit = limit
  var _result162 APIPoolListGetResult
  var _meta161 thrift.ResponseMeta
  _meta161, _err = p.Client_().Call(ctx, "PoolListGet", &_args160, &_result162)
  p.SetLastResponseMeta_(_meta161)
  if _err != nil {
    return
  }
  return _result162.GetSuccess(), nil
}

// Parameters:
//  - Sequence
//  - Index
func (p *APIClient) PoolInfoGet(ctx context.Context, sequence int64, index int64) (_r *PoolInfoGetResult_, _err error) {
  var _args163 APIPoolInfoGetArgs
  _args163.Sequence = sequence
  _args163.Index = index
  var _result165 APIPoolInfoGetResult
  var _meta164 thrift.ResponseMeta
  _meta164, _err = p.Client_().Call(ctx, "PoolInfoGet", &_args163, &_result165)
  p.SetLastResponseMeta_(_meta164)
  if _err != nil {
    return
  }
  return _result165.GetSuccess(), nil
}

// Parameters:
//  - Sequence
//  - Offset
//  - Limit
func (p *APIClient) PoolTransactionsGet(ctx context.Context, sequence int64, offset int64, limit int64) (_r *PoolTransactionsGetResult_, _err error) {
  var _args166 APIPoolTransactionsGetArgs
  _args166.Sequence = sequence
  _args166.Offset = offset
  _args166.Limit = limit
  var _result168 APIPoolTransactionsGetResult
  var _meta167 thrift.ResponseMeta
  _meta167, _err = p.Client_().Call(ctx, "PoolTransactionsGet", &_args166, &_result168)
  p.SetLastResponseMeta_(_meta167)
  if _err != nil {
    return
  }
  return _result168.GetSuccess(), nil
}

func (p *APIClient) StatsGet(ctx context.Context) (_r *StatsGetResult_, _err error) {
  var _args169 APIStatsGetArgs
  var _result171 APIStatsGetResult
  var _meta170 thrift.ResponseMeta
  _meta170, _err = p.Client_().Call(ctx, "StatsGet", &_args169, &_result171)
  p.SetLastResponseMeta_(_meta170)
  if _err != nil {
    return
  }
  return _result171.GetSuccess(), nil
}

// Parameters:
//  - Address
func (p *APIClient) SmartContractGet(ctx context.Context, address general.Address) (_r *SmartContractGetResult_, _err error) {
  var _args172 APISmartContractGetArgs
  _args172.Address = address
  var _result174 APISmartContractGetResult
  var _meta173 thrift.ResponseMeta
  _meta173, _err = p.Client_().Call(ctx, "SmartContractGet", &_args172, &_result174)
  p.SetLastResponseMeta_(_meta173)
  if _err != nil {
    return
  }
  return _result174.GetSuccess(), nil
}

// Parameters:
//  - Deployer
//  - Offset
//  - Limit
func (p *APIClient) SmartContractsListGet(ctx context.Context, deployer general.Address, offset int64, limit int64) (_r *SmartContractsListGetResult_, _err error) {
  var _args175 APISmartContractsListGetArgs
  _args175.Deployer = deployer
  _args175.Offset = offset
  _args175.Limit = limit
  var _result177 APISmartContractsListGetResult
  var _meta176 thrift.ResponseMeta
  _meta176, _err = p.Client_().Call(ctx, "SmartContractsListGet", &_args175, &_result177)
  p.SetLastResponseMeta_(_meta176)
  if _err != nil {
    return
  }
  return _result177.GetSuccess(), nil
}

// Parameters:
//  - Deployer
func (p *APIClient) SmartContractAddressesListGet(ctx context.Context, deployer general.Address) (_r *SmartContractAddressesListGetResult_, _err error) {
  var _args178 APISmartContractAddressesListGetArgs
  _args178.Deployer = deployer
  var _result180 APISmartContractAddressesListGetResult
  var _meta179 thrift.ResponseMeta
  _meta179, _err = p.Client_().Call(ctx, "SmartContractAddressesListGet", &_args178, &_result180)
  p.SetLastResponseMeta_(_meta179)
  if _err != nil {
    return
  }
  return _result180.GetSuccess(), nil
}

// Parameters:
//  - Obsolete
func (p *APIClient) WaitForBlock(ctx context.Context, obsolete PoolHash) (_r PoolHash, _err error) {
  var _args181 APIWaitForBlockArgs
  _args181.Obsolete = obsolete
  var _result183 APIWaitForBlockResult
  var _meta182 thrift.ResponseMeta
  _meta182, _err = p.Client_().Call(ctx, "WaitForBlock", &_args181, &_result183)
  p.SetLastResponseMeta_(_meta182)
  if _err != nil {
    return
  }
  return _result183.GetSuccess(), nil
}

// Parameters:
//  - SmartPublic
func (p *APIClient) WaitForSmartTransaction(ctx context.Context, smart_public general.Address) (_r *TransactionId, _err error) {
  var _args184 APIWaitForSmartTransactionArgs
  _args184.SmartPublic = smart_public
  var _result186 APIWaitForSmartTransactionResult
  var _meta185 thrift.ResponseMeta
  _meta185, _err = p.Client_().Call(ctx, "WaitForSmartTransaction", &_args184, &_result186)
  p.SetLastResponseMeta_(_meta185)
  if _err != nil {
    return
  }
  return _result186.GetSuccess(), nil
}

// Parameters:
//  - Offset
//  - Limit
func (p *APIClient) SmartContractsAllListGet(ctx context.Context, offset int64, limit int64) (_r *SmartContractsListGetResult_, _err error) {
  var _args187 APISmartContractsAllListGetArgs
  _args187.Offset = offset
  _args187.Limit = limit
  var _result189 APISmartContractsAllListGetResult
  var _meta188 thrift.ResponseMeta
  _meta188, _err = p.Client_().Call(ctx, "SmartContractsAllListGet", &_args187, &_result189)
  p.SetLastResponseMeta_(_meta188)
  if _err != nil {
    return
  }
  return _result189.GetSuccess(), nil
}

// Parameters:
//  - Address
//  - ID
func (p *APIClient) TransactionsStateGet(ctx context.Context, address general.Address, id []TransactionInnerId) (_r *TransactionsStateGetResult_, _err error) {
  var _args190 APITransactionsStateGetArgs
  _args190.Address = address
  _args190.ID = id
  var _result192 APITransactionsStateGetResult
  var _meta191 thrift.ResponseMeta
  _meta191, _err = p.Client_().Call(ctx, "TransactionsStateGet", &_args190, &_result192)
  p.SetLastResponseMeta_(_meta191)
  if _err != nil {
    return
  }
  return _result192.GetSuccess(), nil
}

// Parameters:
//  - ByteCodeObjects
func (p *APIClient) ContractAllMethodsGet(ctx context.Context, byteCodeObjects []*general.ByteCodeObject) (_r *ContractAllMethodsGetResult_, _err error) {
  var _args193 APIContractAllMethodsGetArgs
  _args193.ByteCodeObjects = byteCodeObjects
  var _result195 APIContractAllMethodsGetResult
  var _meta194 thrift.ResponseMeta
  _meta194, _err = p.Client_().Call(ctx, "ContractAllMethodsGet", &_args193, &_result195)
  p.SetLastResponseMeta_(_meta194)
  if _err != nil {
    return
  }
  return _result195.GetSuccess(), nil
}

// Parameters:
//  - Address
func (p *APIClient) ContractMethodsGet(ctx context.Context, address general.Address) (_r *ContractAllMethodsGetResult_, _err error) {
  var _args196 APIContractMethodsGetArgs
  _args196.Address = address
  var _result198 APIContractMethodsGetResult
  var _meta197 thrift.ResponseMeta
  _meta197, _err = p.Client_().Call(ctx, "ContractMethodsGet", &_args196, &_result198)
  p.SetLastResponseMeta_(_meta197)
  if _err != nil {
    return
  }
  return _result198.GetSuccess(), nil
}

// Parameters:
//  - Address
//  - ID
func (p *APIClient) SmartMethodParamsGet(ctx context.Context, address general.Address, id TransactionInnerId) (_r *SmartMethodParamsGetResult_, _err error) {
  var _args199 APISmartMethodParamsGetArgs
  _args199.Address = address
  _args199.ID = id
  var _result201 APISmartMethodParamsGetResult
  var _meta200 thrift.ResponseMeta
  _meta200, _err = p.Client_().Call(ctx, "SmartMethodParamsGet", &_args199, &_result201)
  p.SetLastResponseMeta_(_meta200)
  if _err != nil {
    return
  }
  return _result201.GetSuccess(), nil
}

// Parameters:
//  - Address
func (p *APIClient) SmartContractDataGet(ctx context.Context, address general.Address) (_r *SmartContractDataResult_, _err error) {
  var _args202 APISmartContractDataGetArgs
  _args202.Address = address
  var _result204 APISmartContractDataGetResult
  var _meta203 thrift.ResponseMeta
  _meta203, _err = p.Client_().Call(ctx, "SmartContractDataGet", &_args202, &_result204)
  p.SetLastResponseMeta_(_meta203)
  if _err != nil {
    return
  }
  return _result204.GetSuccess(), nil
}

// Parameters:
//  - SourceCode
func (p *APIClient) SmartContractCompile(ctx context.Context, sourceCode string) (_r *SmartContractCompileResult_, _err error) {
  var _args205 APISmartContractCompileArgs
  _args205.SourceCode = sourceCode
  var _result207 APISmartContractCompileResult
  var _meta206 thrift.ResponseMeta
  _meta206, _err = p.Client_().Call(ctx, "SmartContractCompile", &_args205, &_result207)
  p.SetLastResponseMeta_(_meta206)
  if _err != nil {
    return
  }
  return _result207.GetSuccess(), nil
}

// Parameters:
//  - Address
func (p *APIClient) TokenBalancesGet(ctx context.Context, address general.Address) (_r *TokenBalancesResult_, _err error) {
  var _args208 APITokenBalancesGetArgs
  _args208.Address = address
  var _result210 APITokenBalancesGetResult
  var _meta209 thrift.ResponseMeta
  _meta209, _err = p.Client_().Call(ctx, "TokenBalancesGet", &_args208, &_result210)
  p.SetLastResponseMeta_(_meta209)
  if _err != nil {
    return
  }
  return _result210.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - Offset
//  - Limit
func (p *APIClient) TokenTransfersGet(ctx context.Context, token general.Address, offset int64, limit int64) (_r *TokenTransfersResult_, _err error) {
  var _args211 APITokenTransfersGetArgs
  _args211.Token = token
  _args211.Offset = offset
  _args211.Limit = limit
  var _result213 APITokenTransfersGetResult
  var _meta212 thrift.ResponseMeta
  _meta212, _err = p.Client_().Call(ctx, "TokenTransfersGet", &_args211, &_result213)
  p.SetLastResponseMeta_(_meta212)
  if _err != nil {
    return
  }
  return _result213.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - ID
func (p *APIClient) TokenTransferGet(ctx context.Context, token general.Address, id *TransactionId) (_r *TokenTransfersResult_, _err error) {
  var _args214 APITokenTransferGetArgs
  _args214.Token = token
  _args214.ID = id
  var _result216 APITokenTransferGetResult
  var _meta215 thrift.ResponseMeta
  _meta215, _err = p.Client_().Call(ctx, "TokenTransferGet", &_args214, &_result216)
  p.SetLastResponseMeta_(_meta215)
  if _err != nil {
    return
  }
  return _result216.GetSuccess(), nil
}

// Parameters:
//  - Offset
//  - Limit
func (p *APIClient) TokenTransfersListGet(ctx context.Context, offset int64, limit int64) (_r *TokenTransfersResult_, _err error) {
  var _args217 APITokenTransfersListGetArgs
  _args217.Offset = offset
  _args217.Limit = limit
  var _result219 APITokenTransfersListGetResult
  var _meta218 thrift.ResponseMeta
  _meta218, _err = p.Client_().Call(ctx, "TokenTransfersListGet", &_args217, &_result219)
  p.SetLastResponseMeta_(_meta218)
  if _err != nil {
    return
  }
  return _result219.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - Address
//  - Offset
//  - Limit
func (p *APIClient) TokenWalletTransfersGet(ctx context.Context, token general.Address, address general.Address, offset int64, limit int64) (_r *TokenTransfersResult_, _err error) {
  var _args220 APITokenWalletTransfersGetArgs
  _args220.Token = token
  _args220.Address = address
  _args220.Offset = offset
  _args220.Limit = limit
  var _result222 APITokenWalletTransfersGetResult
  var _meta221 thrift.ResponseMeta
  _meta221, _err = p.Client_().Call(ctx, "TokenWalletTransfersGet", &_args220, &_result222)
  p.SetLastResponseMeta_(_meta221)
  if _err != nil {
    return
  }
  return _result222.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - Offset
//  - Limit
func (p *APIClient) TokenTransactionsGet(ctx context.Context, token general.Address, offset int64, limit int64) (_r *TokenTransactionsResult_, _err error) {
  var _args223 APITokenTransactionsGetArgs
  _args223.Token = token
  _args223.Offset = offset
  _args223.Limit = limit
  var _result225 APITokenTransactionsGetResult
  var _meta224 thrift.ResponseMeta
  _meta224, _err = p.Client_().Call(ctx, "TokenTransactionsGet", &_args223, &_result225)
  p.SetLastResponseMeta_(_meta224)
  if _err != nil {
    return
  }
  return _result225.GetSuccess(), nil
}

// Parameters:
//  - Token
func (p *APIClient) TokenInfoGet(ctx context.Context, token general.Address) (_r *TokenInfoResult_, _err error) {
  var _args226 APITokenInfoGetArgs
  _args226.Token = token
  var _result228 APITokenInfoGetResult
  var _meta227 thrift.ResponseMeta
  _meta227, _err = p.Client_().Call(ctx, "TokenInfoGet", &_args226, &_result228)
  p.SetLastResponseMeta_(_meta227)
  if _err != nil {
    return
  }
  return _result228.GetSuccess(), nil
}

// Parameters:
//  - Token
//  - Offset
//  - Limit
//  - Order
//  - Desc
func (p *APIClient) TokenHoldersGet(ctx context.Context, token general.Address, offset int64, limit int64, order TokenHoldersSortField, desc bool) (_r *TokenHoldersResult_, _err error) {
  var _args229 APITokenHoldersGetArgs
  _args229.Token = token
  _args229.Offset = offset
  _args229.Limit = limit
  _args229.Order = order
  _args229.Desc = desc
  var _result231 APITokenHoldersGetResult
  var _meta230 thrift.ResponseMeta
  _meta230, _err = p.Client_().Call(ctx, "TokenHoldersGet", &_args229, &_result231)
  p.SetLastResponseMeta_(_meta230)
  if _err != nil {
    return
  }
  return _result231.GetSuccess(), nil
}

// Parameters:
//  - Offset
//  - Limit
//  - Order
//  - Desc
//  - Filters
func (p *APIClient) TokensListGet(ctx context.Context, offset int64, limit int64, order TokensListSortField, desc bool, filters *TokenFilters) (_r *TokensListResult_, _err error) {
  var _args232 APITokensListGetArgs
  _args232.Offset = offset
  _args232.Limit = limit
  _args232.Order = order
  _args232.Desc = desc
  _args232.Filters = filters
  var _result234 APITokensListGetResult
  var _meta233 thrift.ResponseMeta
  _meta233, _err = p.Client_().Call(ctx, "TokensListGet", &_args232, &_result234)
  p.SetLastResponseMeta_(_meta233)
  if _err != nil {
    return
  }
  return _result234.GetSuccess(), nil
}

// Parameters:
//  - Offset
//  - Limit
//  - OrdCol
//  - Desc
func (p *APIClient) WalletsGet(ctx context.Context, offset int64, limit int64, ordCol int8, desc bool) (_r *WalletsGetResult_, _err error) {
  var _args235 APIWalletsGetArgs
  _args235.Offset = offset
  _args235.Limit = limit
  _args235.OrdCol = ordCol
  _args235.Desc = desc
  var _result237 APIWalletsGetResult
  var _meta236 thrift.ResponseMeta
  _meta236, _err = p.Client_().Call(ctx, "WalletsGet", &_args235, &_result237)
  p.SetLastResponseMeta_(_meta236)
  if _err != nil {
    return
  }
  return _result237.GetSuccess(), nil
}

// Parameters:
//  - Page
func (p *APIClient) TrustedGet(ctx context.Context, page int32) (_r *TrustedGetResult_, _err error) {
  var _args238 APITrustedGetArgs
  _args238.Page = page
  var _result240 APITrustedGetResult
  var _meta239 thrift.ResponseMeta
  _meta239, _err = p.Client_().Call(ctx, "TrustedGet", &_args238, &_result240)
  p.SetLastResponseMeta_(_meta239)
  if _err != nil {
    return
  }
  return _result240.GetSuccess(), nil
}

func (p *APIClient) SyncStateGet(ctx context.Context) (_r *SyncStateResult_, _err error) {
  var _args241 APISyncStateGetArgs
  var _result243 APISyncStateGetResult
  var _meta242 thrift.ResponseMeta
  _meta242, _err = p.Client_().Call(ctx, "SyncStateGet", &_args241, &_result243)
  p.SetLastResponseMeta_(_meta242)
  if _err != nil {
    return
  }
  return _result243.GetSuccess(), nil
}

// Parameters:
//  - ExecuteMethod
func (p *APIClient) ExecuteCountGet(ctx context.Context, executeMethod string) (_r *ExecuteCountGetResult_, _err error) {
  var _args244 APIExecuteCountGetArgs
  _args244.ExecuteMethod = executeMethod
  var _result246 APIExecuteCountGetResult
  var _meta245 thrift.ResponseMeta
  _meta245, _err = p.Client_().Call(ctx, "ExecuteCountGet", &_args244, &_result246)
  p.SetLastResponseMeta_(_meta245)
  if _err != nil {
    return
  }
  return _result246.GetSuccess(), nil
}

type APIProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler API
}

func (p *APIProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *APIProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *APIProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewAPIProcessor(handler API) *APIProcessor {

  self247 := &APIProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self247.processorMap["ActualFeeGet"] = &APIProcessorActualFeeGet{handler:handler}
  self247.processorMap["WalletDataGet"] = &APIProcessorWalletDataGet{handler:handler}
  self247.processorMap["WalletIdGet"] = &APIProcessorWalletIdGet{handler:handler}
  self247.processorMap["WalletTransactionsCountGet"] = &APIProcessorWalletTransactionsCountGet{handler:handler}
  self247.processorMap["WalletBalanceGet"] = &APIProcessorWalletBalanceGet{handler:handler}
  self247.processorMap["RoundDataGet"] = &APIProcessorRoundDataGet{handler:handler}
  self247.processorMap["WalletsListBalancesGet"] = &APIProcessorWalletsListBalancesGet{handler:handler}
  self247.processorMap["WalletsListBalancesResultGet"] = &APIProcessorWalletsListBalancesResultGet{handler:handler}
  self247.processorMap["TransactionGet"] = &APIProcessorTransactionGet{handler:handler}
  self247.processorMap["TransactionsGet"] = &APIProcessorTransactionsGet{handler:handler}
  self247.processorMap["TransactionFlow"] = &APIProcessorTransactionFlow{handler:handler}
  self247.processorMap["TransactionsListGet"] = &APIProcessorTransactionsListGet{handler:handler}
  self247.processorMap["FilteredTransactionsListGet"] = &APIProcessorFilteredTransactionsListGet{handler:handler}
  self247.processorMap["FilteredTrxsListGet"] = &APIProcessorFilteredTrxsListGet{handler:handler}
  self247.processorMap["FilteredTrxsListGetResult"] = &APIProcessorFilteredTrxsListGetResult_{handler:handler}
  self247.processorMap["TransactionSend"] = &APIProcessorTransactionSend{handler:handler}
  self247.processorMap["TransactionResultGet"] = &APIProcessorTransactionResultGet{handler:handler}
  self247.processorMap["TransactionsListSend"] = &APIProcessorTransactionsListSend{handler:handler}
  self247.processorMap["TransactionsListResultGet"] = &APIProcessorTransactionsListResultGet{handler:handler}
  self247.processorMap["GetLastHash"] = &APIProcessorGetLastHash{handler:handler}
  self247.processorMap["PoolListGetStable"] = &APIProcessorPoolListGetStable{handler:handler}
  self247.processorMap["PoolListGet"] = &APIProcessorPoolListGet{handler:handler}
  self247.processorMap["PoolInfoGet"] = &APIProcessorPoolInfoGet{handler:handler}
  self247.processorMap["PoolTransactionsGet"] = &APIProcessorPoolTransactionsGet{handler:handler}
  self247.processorMap["StatsGet"] = &APIProcessorStatsGet{handler:handler}
  self247.processorMap["SmartContractGet"] = &APIProcessorSmartContractGet{handler:handler}
  self247.processorMap["SmartContractsListGet"] = &APIProcessorSmartContractsListGet{handler:handler}
  self247.processorMap["SmartContractAddressesListGet"] = &APIProcessorSmartContractAddressesListGet{handler:handler}
  self247.processorMap["WaitForBlock"] = &APIProcessorWaitForBlock{handler:handler}
  self247.processorMap["WaitForSmartTransaction"] = &APIProcessorWaitForSmartTransaction{handler:handler}
  self247.processorMap["SmartContractsAllListGet"] = &APIProcessorSmartContractsAllListGet{handler:handler}
  self247.processorMap["TransactionsStateGet"] = &APIProcessorTransactionsStateGet{handler:handler}
  self247.processorMap["ContractAllMethodsGet"] = &APIProcessorContractAllMethodsGet{handler:handler}
  self247.processorMap["ContractMethodsGet"] = &APIProcessorContractMethodsGet{handler:handler}
  self247.processorMap["SmartMethodParamsGet"] = &APIProcessorSmartMethodParamsGet{handler:handler}
  self247.processorMap["SmartContractDataGet"] = &APIProcessorSmartContractDataGet{handler:handler}
  self247.processorMap["SmartContractCompile"] = &APIProcessorSmartContractCompile{handler:handler}
  self247.processorMap["TokenBalancesGet"] = &APIProcessorTokenBalancesGet{handler:handler}
  self247.processorMap["TokenTransfersGet"] = &APIProcessorTokenTransfersGet{handler:handler}
  self247.processorMap["TokenTransferGet"] = &APIProcessorTokenTransferGet{handler:handler}
  self247.processorMap["TokenTransfersListGet"] = &APIProcessorTokenTransfersListGet{handler:handler}
  self247.processorMap["TokenWalletTransfersGet"] = &APIProcessorTokenWalletTransfersGet{handler:handler}
  self247.processorMap["TokenTransactionsGet"] = &APIProcessorTokenTransactionsGet{handler:handler}
  self247.processorMap["TokenInfoGet"] = &APIProcessorTokenInfoGet{handler:handler}
  self247.processorMap["TokenHoldersGet"] = &APIProcessorTokenHoldersGet{handler:handler}
  self247.processorMap["TokensListGet"] = &APIProcessorTokensListGet{handler:handler}
  self247.processorMap["WalletsGet"] = &APIProcessorWalletsGet{handler:handler}
  self247.processorMap["TrustedGet"] = &APIProcessorTrustedGet{handler:handler}
  self247.processorMap["SyncStateGet"] = &APIProcessorSyncStateGet{handler:handler}
  self247.processorMap["ExecuteCountGet"] = &APIProcessorExecuteCountGet{handler:handler}
return self247
}

func (p *APIProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x248 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x248.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x248

}

type APIProcessorActualFeeGet struct {
  handler API
}

func (p *APIProcessorActualFeeGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIActualFeeGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ActualFeeGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIActualFeeGetResult{}
  var retval *ActualFeeGetResult_
  if retval, err2 = p.handler.ActualFeeGet(ctx, args.TransactionSize); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ActualFeeGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "ActualFeeGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "ActualFeeGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorWalletDataGet struct {
  handler API
}

func (p *APIProcessorWalletDataGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIWalletDataGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "WalletDataGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIWalletDataGetResult{}
  var retval *WalletDataGetResult_
  if retval, err2 = p.handler.WalletDataGet(ctx, args.Address); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WalletDataGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "WalletDataGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "WalletDataGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorWalletIdGet struct {
  handler API
}

func (p *APIProcessorWalletIdGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIWalletIdGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "WalletIdGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIWalletIdGetResult{}
  var retval *WalletIdGetResult_
  if retval, err2 = p.handler.WalletIdGet(ctx, args.Address); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WalletIdGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "WalletIdGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "WalletIdGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorWalletTransactionsCountGet struct {
  handler API
}

func (p *APIProcessorWalletTransactionsCountGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIWalletTransactionsCountGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "WalletTransactionsCountGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIWalletTransactionsCountGetResult{}
  var retval *WalletTransactionsCountGetResult_
  if retval, err2 = p.handler.WalletTransactionsCountGet(ctx, args.Address); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WalletTransactionsCountGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "WalletTransactionsCountGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "WalletTransactionsCountGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorWalletBalanceGet struct {
  handler API
}

func (p *APIProcessorWalletBalanceGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIWalletBalanceGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "WalletBalanceGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIWalletBalanceGetResult{}
  var retval *WalletBalanceGetResult_
  if retval, err2 = p.handler.WalletBalanceGet(ctx, args.Address); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WalletBalanceGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "WalletBalanceGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "WalletBalanceGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorRoundDataGet struct {
  handler API
}

func (p *APIProcessorRoundDataGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIRoundDataGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "RoundDataGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIRoundDataGetResult{}
  var retval *RoundData
  if retval, err2 = p.handler.RoundDataGet(ctx); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RoundDataGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "RoundDataGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "RoundDataGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorWalletsListBalancesGet struct {
  handler API
}

func (p *APIProcessorWalletsListBalancesGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIWalletsListBalancesGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "WalletsListBalancesGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIWalletsListBalancesGetResult{}
  var retval *AcceptedRequestId
  if retval, err2 = p.handler.WalletsListBalancesGet(ctx, args.WalletAddresses); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WalletsListBalancesGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "WalletsListBalancesGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "WalletsListBalancesGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorWalletsListBalancesResultGet struct {
  handler API
}

func (p *APIProcessorWalletsListBalancesResultGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIWalletsListBalancesResultGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "WalletsListBalancesResultGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIWalletsListBalancesResultGetResult{}
  var retval *WalletBalanceResults
  if retval, err2 = p.handler.WalletsListBalancesResultGet(ctx, args.RequestId); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WalletsListBalancesResultGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "WalletsListBalancesResultGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "WalletsListBalancesResultGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTransactionGet struct {
  handler API
}

func (p *APIProcessorTransactionGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITransactionGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TransactionGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITransactionGetResult{}
  var retval *TransactionGetResult_
  if retval, err2 = p.handler.TransactionGet(ctx, args.TransactionId); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TransactionGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TransactionGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TransactionGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTransactionsGet struct {
  handler API
}

func (p *APIProcessorTransactionsGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITransactionsGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TransactionsGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITransactionsGetResult{}
  var retval *TransactionsGetResult_
  if retval, err2 = p.handler.TransactionsGet(ctx, args.Address, args.Offset, args.Limit); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TransactionsGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TransactionsGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TransactionsGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTransactionFlow struct {
  handler API
}

func (p *APIProcessorTransactionFlow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITransactionFlowArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TransactionFlow", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITransactionFlowResult{}
  var retval *TransactionFlowResult_
  if retval, err2 = p.handler.TransactionFlow(ctx, args.Transaction); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TransactionFlow: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TransactionFlow", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TransactionFlow", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTransactionsListGet struct {
  handler API
}

func (p *APIProcessorTransactionsListGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITransactionsListGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TransactionsListGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITransactionsListGetResult{}
  var retval *TransactionsGetResult_
  if retval, err2 = p.handler.TransactionsListGet(ctx, args.Offset, args.Limit); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TransactionsListGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TransactionsListGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TransactionsListGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorFilteredTransactionsListGet struct {
  handler API
}

func (p *APIProcessorFilteredTransactionsListGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIFilteredTransactionsListGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "FilteredTransactionsListGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIFilteredTransactionsListGetResult{}
  var retval *FilteredTransactionsListResult_
  if retval, err2 = p.handler.FilteredTransactionsListGet(ctx, args.GeneralQuery); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FilteredTransactionsListGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "FilteredTransactionsListGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "FilteredTransactionsListGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorFilteredTrxsListGet struct {
  handler API
}

func (p *APIProcessorFilteredTrxsListGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIFilteredTrxsListGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "FilteredTrxsListGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIFilteredTrxsListGetResult{}
  var retval *AcceptedRequestId
  if retval, err2 = p.handler.FilteredTrxsListGet(ctx, args.GeneralQuery); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FilteredTrxsListGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "FilteredTrxsListGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "FilteredTrxsListGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorFilteredTrxsListGetResult_ struct {
  handler API
}

func (p *APIProcessorFilteredTrxsListGetResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIFilteredTrxsListGetResultArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "FilteredTrxsListGetResult", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIFilteredTrxsListGetResultResult{}
  var retval *FilteredTransactionsListResult_
  if retval, err2 = p.handler.FilteredTrxsListGetResult_(ctx, args.RequestId); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FilteredTrxsListGetResult: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "FilteredTrxsListGetResult", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "FilteredTrxsListGetResult", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTransactionSend struct {
  handler API
}

func (p *APIProcessorTransactionSend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITransactionSendArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TransactionSend", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITransactionSendResult{}
  var retval *SendTransactionResult_
  if retval, err2 = p.handler.TransactionSend(ctx, args.Transaction); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TransactionSend: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TransactionSend", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TransactionSend", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTransactionResultGet struct {
  handler API
}

func (p *APIProcessorTransactionResultGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITransactionResultGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TransactionResultGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITransactionResultGetResult{}
  var retval *TransactionFlowResult_
  if retval, err2 = p.handler.TransactionResultGet(ctx, args.RequestId); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TransactionResultGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TransactionResultGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TransactionResultGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTransactionsListSend struct {
  handler API
}

func (p *APIProcessorTransactionsListSend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITransactionsListSendArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TransactionsListSend", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITransactionsListSendResult{}
  var retval *SendTransactionResult_
  if retval, err2 = p.handler.TransactionsListSend(ctx, args.Transactions); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TransactionsListSend: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TransactionsListSend", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TransactionsListSend", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTransactionsListResultGet struct {
  handler API
}

func (p *APIProcessorTransactionsListResultGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITransactionsListResultGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TransactionsListResultGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITransactionsListResultGetResult{}
  var retval *TransactionsListFlowResult_
  if retval, err2 = p.handler.TransactionsListResultGet(ctx, args.RequestId); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TransactionsListResultGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TransactionsListResultGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TransactionsListResultGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorGetLastHash struct {
  handler API
}

func (p *APIProcessorGetLastHash) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIGetLastHashArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "GetLastHash", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIGetLastHashResult{}
  var retval PoolHash
  if retval, err2 = p.handler.GetLastHash(ctx); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLastHash: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "GetLastHash", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "GetLastHash", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorPoolListGetStable struct {
  handler API
}

func (p *APIProcessorPoolListGetStable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIPoolListGetStableArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "PoolListGetStable", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIPoolListGetStableResult{}
  var retval *PoolListGetResult_
  if retval, err2 = p.handler.PoolListGetStable(ctx, args.Sequence, args.Limit); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PoolListGetStable: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "PoolListGetStable", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "PoolListGetStable", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorPoolListGet struct {
  handler API
}

func (p *APIProcessorPoolListGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIPoolListGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "PoolListGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIPoolListGetResult{}
  var retval *PoolListGetResult_
  if retval, err2 = p.handler.PoolListGet(ctx, args.Offset, args.Limit); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PoolListGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "PoolListGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "PoolListGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorPoolInfoGet struct {
  handler API
}

func (p *APIProcessorPoolInfoGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIPoolInfoGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "PoolInfoGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIPoolInfoGetResult{}
  var retval *PoolInfoGetResult_
  if retval, err2 = p.handler.PoolInfoGet(ctx, args.Sequence, args.Index); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PoolInfoGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "PoolInfoGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "PoolInfoGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorPoolTransactionsGet struct {
  handler API
}

func (p *APIProcessorPoolTransactionsGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIPoolTransactionsGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "PoolTransactionsGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIPoolTransactionsGetResult{}
  var retval *PoolTransactionsGetResult_
  if retval, err2 = p.handler.PoolTransactionsGet(ctx, args.Sequence, args.Offset, args.Limit); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PoolTransactionsGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "PoolTransactionsGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "PoolTransactionsGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorStatsGet struct {
  handler API
}

func (p *APIProcessorStatsGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIStatsGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "StatsGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIStatsGetResult{}
  var retval *StatsGetResult_
  if retval, err2 = p.handler.StatsGet(ctx); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing StatsGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "StatsGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "StatsGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorSmartContractGet struct {
  handler API
}

func (p *APIProcessorSmartContractGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APISmartContractGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "SmartContractGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APISmartContractGetResult{}
  var retval *SmartContractGetResult_
  if retval, err2 = p.handler.SmartContractGet(ctx, args.Address); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SmartContractGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "SmartContractGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "SmartContractGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorSmartContractsListGet struct {
  handler API
}

func (p *APIProcessorSmartContractsListGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APISmartContractsListGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "SmartContractsListGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APISmartContractsListGetResult{}
  var retval *SmartContractsListGetResult_
  if retval, err2 = p.handler.SmartContractsListGet(ctx, args.Deployer, args.Offset, args.Limit); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SmartContractsListGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "SmartContractsListGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "SmartContractsListGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorSmartContractAddressesListGet struct {
  handler API
}

func (p *APIProcessorSmartContractAddressesListGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APISmartContractAddressesListGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "SmartContractAddressesListGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APISmartContractAddressesListGetResult{}
  var retval *SmartContractAddressesListGetResult_
  if retval, err2 = p.handler.SmartContractAddressesListGet(ctx, args.Deployer); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SmartContractAddressesListGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "SmartContractAddressesListGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "SmartContractAddressesListGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorWaitForBlock struct {
  handler API
}

func (p *APIProcessorWaitForBlock) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIWaitForBlockArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "WaitForBlock", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIWaitForBlockResult{}
  var retval PoolHash
  if retval, err2 = p.handler.WaitForBlock(ctx, args.Obsolete); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WaitForBlock: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "WaitForBlock", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "WaitForBlock", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorWaitForSmartTransaction struct {
  handler API
}

func (p *APIProcessorWaitForSmartTransaction) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIWaitForSmartTransactionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "WaitForSmartTransaction", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIWaitForSmartTransactionResult{}
  var retval *TransactionId
  if retval, err2 = p.handler.WaitForSmartTransaction(ctx, args.SmartPublic); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WaitForSmartTransaction: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "WaitForSmartTransaction", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "WaitForSmartTransaction", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorSmartContractsAllListGet struct {
  handler API
}

func (p *APIProcessorSmartContractsAllListGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APISmartContractsAllListGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "SmartContractsAllListGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APISmartContractsAllListGetResult{}
  var retval *SmartContractsListGetResult_
  if retval, err2 = p.handler.SmartContractsAllListGet(ctx, args.Offset, args.Limit); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SmartContractsAllListGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "SmartContractsAllListGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "SmartContractsAllListGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTransactionsStateGet struct {
  handler API
}

func (p *APIProcessorTransactionsStateGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITransactionsStateGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TransactionsStateGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITransactionsStateGetResult{}
  var retval *TransactionsStateGetResult_
  if retval, err2 = p.handler.TransactionsStateGet(ctx, args.Address, args.ID); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TransactionsStateGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TransactionsStateGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TransactionsStateGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorContractAllMethodsGet struct {
  handler API
}

func (p *APIProcessorContractAllMethodsGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIContractAllMethodsGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ContractAllMethodsGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIContractAllMethodsGetResult{}
  var retval *ContractAllMethodsGetResult_
  if retval, err2 = p.handler.ContractAllMethodsGet(ctx, args.ByteCodeObjects); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ContractAllMethodsGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "ContractAllMethodsGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "ContractAllMethodsGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorContractMethodsGet struct {
  handler API
}

func (p *APIProcessorContractMethodsGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIContractMethodsGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ContractMethodsGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIContractMethodsGetResult{}
  var retval *ContractAllMethodsGetResult_
  if retval, err2 = p.handler.ContractMethodsGet(ctx, args.Address); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ContractMethodsGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "ContractMethodsGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "ContractMethodsGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorSmartMethodParamsGet struct {
  handler API
}

func (p *APIProcessorSmartMethodParamsGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APISmartMethodParamsGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "SmartMethodParamsGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APISmartMethodParamsGetResult{}
  var retval *SmartMethodParamsGetResult_
  if retval, err2 = p.handler.SmartMethodParamsGet(ctx, args.Address, args.ID); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SmartMethodParamsGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "SmartMethodParamsGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "SmartMethodParamsGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorSmartContractDataGet struct {
  handler API
}

func (p *APIProcessorSmartContractDataGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APISmartContractDataGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "SmartContractDataGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APISmartContractDataGetResult{}
  var retval *SmartContractDataResult_
  if retval, err2 = p.handler.SmartContractDataGet(ctx, args.Address); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SmartContractDataGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "SmartContractDataGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "SmartContractDataGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorSmartContractCompile struct {
  handler API
}

func (p *APIProcessorSmartContractCompile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APISmartContractCompileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "SmartContractCompile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APISmartContractCompileResult{}
  var retval *SmartContractCompileResult_
  if retval, err2 = p.handler.SmartContractCompile(ctx, args.SourceCode); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SmartContractCompile: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "SmartContractCompile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "SmartContractCompile", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTokenBalancesGet struct {
  handler API
}

func (p *APIProcessorTokenBalancesGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITokenBalancesGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TokenBalancesGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITokenBalancesGetResult{}
  var retval *TokenBalancesResult_
  if retval, err2 = p.handler.TokenBalancesGet(ctx, args.Address); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TokenBalancesGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TokenBalancesGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TokenBalancesGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTokenTransfersGet struct {
  handler API
}

func (p *APIProcessorTokenTransfersGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITokenTransfersGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TokenTransfersGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITokenTransfersGetResult{}
  var retval *TokenTransfersResult_
  if retval, err2 = p.handler.TokenTransfersGet(ctx, args.Token, args.Offset, args.Limit); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TokenTransfersGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TokenTransfersGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TokenTransfersGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTokenTransferGet struct {
  handler API
}

func (p *APIProcessorTokenTransferGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITokenTransferGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TokenTransferGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITokenTransferGetResult{}
  var retval *TokenTransfersResult_
  if retval, err2 = p.handler.TokenTransferGet(ctx, args.Token, args.ID); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TokenTransferGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TokenTransferGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TokenTransferGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTokenTransfersListGet struct {
  handler API
}

func (p *APIProcessorTokenTransfersListGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITokenTransfersListGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TokenTransfersListGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITokenTransfersListGetResult{}
  var retval *TokenTransfersResult_
  if retval, err2 = p.handler.TokenTransfersListGet(ctx, args.Offset, args.Limit); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TokenTransfersListGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TokenTransfersListGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TokenTransfersListGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTokenWalletTransfersGet struct {
  handler API
}

func (p *APIProcessorTokenWalletTransfersGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITokenWalletTransfersGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TokenWalletTransfersGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITokenWalletTransfersGetResult{}
  var retval *TokenTransfersResult_
  if retval, err2 = p.handler.TokenWalletTransfersGet(ctx, args.Token, args.Address, args.Offset, args.Limit); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TokenWalletTransfersGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TokenWalletTransfersGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TokenWalletTransfersGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTokenTransactionsGet struct {
  handler API
}

func (p *APIProcessorTokenTransactionsGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITokenTransactionsGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TokenTransactionsGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITokenTransactionsGetResult{}
  var retval *TokenTransactionsResult_
  if retval, err2 = p.handler.TokenTransactionsGet(ctx, args.Token, args.Offset, args.Limit); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TokenTransactionsGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TokenTransactionsGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TokenTransactionsGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTokenInfoGet struct {
  handler API
}

func (p *APIProcessorTokenInfoGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITokenInfoGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TokenInfoGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITokenInfoGetResult{}
  var retval *TokenInfoResult_
  if retval, err2 = p.handler.TokenInfoGet(ctx, args.Token); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TokenInfoGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TokenInfoGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TokenInfoGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTokenHoldersGet struct {
  handler API
}

func (p *APIProcessorTokenHoldersGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITokenHoldersGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TokenHoldersGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITokenHoldersGetResult{}
  var retval *TokenHoldersResult_
  if retval, err2 = p.handler.TokenHoldersGet(ctx, args.Token, args.Offset, args.Limit, args.Order, args.Desc); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TokenHoldersGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TokenHoldersGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TokenHoldersGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTokensListGet struct {
  handler API
}

func (p *APIProcessorTokensListGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITokensListGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TokensListGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITokensListGetResult{}
  var retval *TokensListResult_
  if retval, err2 = p.handler.TokensListGet(ctx, args.Offset, args.Limit, args.Order, args.Desc, args.Filters); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TokensListGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TokensListGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TokensListGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorWalletsGet struct {
  handler API
}

func (p *APIProcessorWalletsGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIWalletsGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "WalletsGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIWalletsGetResult{}
  var retval *WalletsGetResult_
  if retval, err2 = p.handler.WalletsGet(ctx, args.Offset, args.Limit, args.OrdCol, args.Desc); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WalletsGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "WalletsGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "WalletsGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorTrustedGet struct {
  handler API
}

func (p *APIProcessorTrustedGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APITrustedGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TrustedGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APITrustedGetResult{}
  var retval *TrustedGetResult_
  if retval, err2 = p.handler.TrustedGet(ctx, args.Page); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TrustedGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "TrustedGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "TrustedGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorSyncStateGet struct {
  handler API
}

func (p *APIProcessorSyncStateGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APISyncStateGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "SyncStateGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APISyncStateGetResult{}
  var retval *SyncStateResult_
  if retval, err2 = p.handler.SyncStateGet(ctx); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SyncStateGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "SyncStateGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "SyncStateGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type APIProcessorExecuteCountGet struct {
  handler API
}

func (p *APIProcessorExecuteCountGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := APIExecuteCountGetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ExecuteCountGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := APIExecuteCountGetResult{}
  var retval *ExecuteCountGetResult_
  if retval, err2 = p.handler.ExecuteCountGet(ctx, args.ExecuteMethod); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ExecuteCountGet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "ExecuteCountGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "ExecuteCountGet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - TransactionSize
type APIActualFeeGetArgs struct {
  TransactionSize int32 `thrift:"transactionSize,1" db:"transactionSize" json:"transactionSize"`
}

func NewAPIActualFeeGetArgs() *APIActualFeeGetArgs {
  return &APIActualFeeGetArgs{}
}


func (p *APIActualFeeGetArgs) GetTransactionSize() int32 {
  return p.TransactionSize
}
func (p *APIActualFeeGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIActualFeeGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TransactionSize = v
}
  return nil
}

func (p *APIActualFeeGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ActualFeeGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIActualFeeGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactionSize", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:transactionSize: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TransactionSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transactionSize (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:transactionSize: ", p), err) }
  return err
}

func (p *APIActualFeeGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIActualFeeGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIActualFeeGetResult struct {
  Success *ActualFeeGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIActualFeeGetResult() *APIActualFeeGetResult {
  return &APIActualFeeGetResult{}
}

var APIActualFeeGetResult_Success_DEFAULT *ActualFeeGetResult_
func (p *APIActualFeeGetResult) GetSuccess() *ActualFeeGetResult_ {
  if !p.IsSetSuccess() {
    return APIActualFeeGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIActualFeeGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIActualFeeGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIActualFeeGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ActualFeeGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIActualFeeGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ActualFeeGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIActualFeeGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIActualFeeGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIActualFeeGetResult(%+v)", *p)
}

// Attributes:
//  - Address
type APIWalletDataGetArgs struct {
  Address general.Address `thrift:"address,1" db:"address" json:"address"`
}

func NewAPIWalletDataGetArgs() *APIWalletDataGetArgs {
  return &APIWalletDataGetArgs{}
}


func (p *APIWalletDataGetArgs) GetAddress() general.Address {
  return p.Address
}
func (p *APIWalletDataGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIWalletDataGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Address = temp
}
  return nil
}

func (p *APIWalletDataGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletDataGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIWalletDataGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Address); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *APIWalletDataGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIWalletDataGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIWalletDataGetResult struct {
  Success *WalletDataGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIWalletDataGetResult() *APIWalletDataGetResult {
  return &APIWalletDataGetResult{}
}

var APIWalletDataGetResult_Success_DEFAULT *WalletDataGetResult_
func (p *APIWalletDataGetResult) GetSuccess() *WalletDataGetResult_ {
  if !p.IsSetSuccess() {
    return APIWalletDataGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIWalletDataGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIWalletDataGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIWalletDataGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WalletDataGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIWalletDataGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletDataGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIWalletDataGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIWalletDataGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIWalletDataGetResult(%+v)", *p)
}

// Attributes:
//  - Address
type APIWalletIdGetArgs struct {
  Address general.Address `thrift:"address,1" db:"address" json:"address"`
}

func NewAPIWalletIdGetArgs() *APIWalletIdGetArgs {
  return &APIWalletIdGetArgs{}
}


func (p *APIWalletIdGetArgs) GetAddress() general.Address {
  return p.Address
}
func (p *APIWalletIdGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIWalletIdGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Address = temp
}
  return nil
}

func (p *APIWalletIdGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletIdGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIWalletIdGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Address); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *APIWalletIdGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIWalletIdGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIWalletIdGetResult struct {
  Success *WalletIdGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIWalletIdGetResult() *APIWalletIdGetResult {
  return &APIWalletIdGetResult{}
}

var APIWalletIdGetResult_Success_DEFAULT *WalletIdGetResult_
func (p *APIWalletIdGetResult) GetSuccess() *WalletIdGetResult_ {
  if !p.IsSetSuccess() {
    return APIWalletIdGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIWalletIdGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIWalletIdGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIWalletIdGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WalletIdGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIWalletIdGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletIdGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIWalletIdGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIWalletIdGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIWalletIdGetResult(%+v)", *p)
}

// Attributes:
//  - Address
type APIWalletTransactionsCountGetArgs struct {
  Address general.Address `thrift:"address,1" db:"address" json:"address"`
}

func NewAPIWalletTransactionsCountGetArgs() *APIWalletTransactionsCountGetArgs {
  return &APIWalletTransactionsCountGetArgs{}
}


func (p *APIWalletTransactionsCountGetArgs) GetAddress() general.Address {
  return p.Address
}
func (p *APIWalletTransactionsCountGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIWalletTransactionsCountGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Address = temp
}
  return nil
}

func (p *APIWalletTransactionsCountGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletTransactionsCountGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIWalletTransactionsCountGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Address); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *APIWalletTransactionsCountGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIWalletTransactionsCountGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIWalletTransactionsCountGetResult struct {
  Success *WalletTransactionsCountGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIWalletTransactionsCountGetResult() *APIWalletTransactionsCountGetResult {
  return &APIWalletTransactionsCountGetResult{}
}

var APIWalletTransactionsCountGetResult_Success_DEFAULT *WalletTransactionsCountGetResult_
func (p *APIWalletTransactionsCountGetResult) GetSuccess() *WalletTransactionsCountGetResult_ {
  if !p.IsSetSuccess() {
    return APIWalletTransactionsCountGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIWalletTransactionsCountGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIWalletTransactionsCountGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIWalletTransactionsCountGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WalletTransactionsCountGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIWalletTransactionsCountGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletTransactionsCountGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIWalletTransactionsCountGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIWalletTransactionsCountGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIWalletTransactionsCountGetResult(%+v)", *p)
}

// Attributes:
//  - Address
type APIWalletBalanceGetArgs struct {
  Address general.Address `thrift:"address,1" db:"address" json:"address"`
}

func NewAPIWalletBalanceGetArgs() *APIWalletBalanceGetArgs {
  return &APIWalletBalanceGetArgs{}
}


func (p *APIWalletBalanceGetArgs) GetAddress() general.Address {
  return p.Address
}
func (p *APIWalletBalanceGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIWalletBalanceGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Address = temp
}
  return nil
}

func (p *APIWalletBalanceGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletBalanceGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIWalletBalanceGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Address); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *APIWalletBalanceGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIWalletBalanceGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIWalletBalanceGetResult struct {
  Success *WalletBalanceGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIWalletBalanceGetResult() *APIWalletBalanceGetResult {
  return &APIWalletBalanceGetResult{}
}

var APIWalletBalanceGetResult_Success_DEFAULT *WalletBalanceGetResult_
func (p *APIWalletBalanceGetResult) GetSuccess() *WalletBalanceGetResult_ {
  if !p.IsSetSuccess() {
    return APIWalletBalanceGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIWalletBalanceGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIWalletBalanceGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIWalletBalanceGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WalletBalanceGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIWalletBalanceGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletBalanceGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIWalletBalanceGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIWalletBalanceGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIWalletBalanceGetResult(%+v)", *p)
}

type APIRoundDataGetArgs struct {
}

func NewAPIRoundDataGetArgs() *APIRoundDataGetArgs {
  return &APIRoundDataGetArgs{}
}

func (p *APIRoundDataGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIRoundDataGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RoundDataGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIRoundDataGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIRoundDataGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIRoundDataGetResult struct {
  Success *RoundData `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIRoundDataGetResult() *APIRoundDataGetResult {
  return &APIRoundDataGetResult{}
}

var APIRoundDataGetResult_Success_DEFAULT *RoundData
func (p *APIRoundDataGetResult) GetSuccess() *RoundData {
  if !p.IsSetSuccess() {
    return APIRoundDataGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIRoundDataGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIRoundDataGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIRoundDataGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RoundData{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIRoundDataGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RoundDataGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIRoundDataGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIRoundDataGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIRoundDataGetResult(%+v)", *p)
}

// Attributes:
//  - WalletAddresses
type APIWalletsListBalancesGetArgs struct {
  WalletAddresses *Addresses `thrift:"walletAddresses,1" db:"walletAddresses" json:"walletAddresses"`
}

func NewAPIWalletsListBalancesGetArgs() *APIWalletsListBalancesGetArgs {
  return &APIWalletsListBalancesGetArgs{}
}

var APIWalletsListBalancesGetArgs_WalletAddresses_DEFAULT *Addresses
func (p *APIWalletsListBalancesGetArgs) GetWalletAddresses() *Addresses {
  if !p.IsSetWalletAddresses() {
    return APIWalletsListBalancesGetArgs_WalletAddresses_DEFAULT
  }
return p.WalletAddresses
}
func (p *APIWalletsListBalancesGetArgs) IsSetWalletAddresses() bool {
  return p.WalletAddresses != nil
}

func (p *APIWalletsListBalancesGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIWalletsListBalancesGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.WalletAddresses = &Addresses{}
  if err := p.WalletAddresses.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WalletAddresses), err)
  }
  return nil
}

func (p *APIWalletsListBalancesGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletsListBalancesGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIWalletsListBalancesGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "walletAddresses", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:walletAddresses: ", p), err) }
  if err := p.WalletAddresses.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WalletAddresses), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:walletAddresses: ", p), err) }
  return err
}

func (p *APIWalletsListBalancesGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIWalletsListBalancesGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIWalletsListBalancesGetResult struct {
  Success *AcceptedRequestId `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIWalletsListBalancesGetResult() *APIWalletsListBalancesGetResult {
  return &APIWalletsListBalancesGetResult{}
}

var APIWalletsListBalancesGetResult_Success_DEFAULT *AcceptedRequestId
func (p *APIWalletsListBalancesGetResult) GetSuccess() *AcceptedRequestId {
  if !p.IsSetSuccess() {
    return APIWalletsListBalancesGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIWalletsListBalancesGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIWalletsListBalancesGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIWalletsListBalancesGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AcceptedRequestId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIWalletsListBalancesGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletsListBalancesGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIWalletsListBalancesGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIWalletsListBalancesGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIWalletsListBalancesGetResult(%+v)", *p)
}

// Attributes:
//  - RequestId
type APIWalletsListBalancesResultGetArgs struct {
  RequestId int64 `thrift:"requestId,1" db:"requestId" json:"requestId"`
}

func NewAPIWalletsListBalancesResultGetArgs() *APIWalletsListBalancesResultGetArgs {
  return &APIWalletsListBalancesResultGetArgs{}
}


func (p *APIWalletsListBalancesResultGetArgs) GetRequestId() int64 {
  return p.RequestId
}
func (p *APIWalletsListBalancesResultGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIWalletsListBalancesResultGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RequestId = v
}
  return nil
}

func (p *APIWalletsListBalancesResultGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletsListBalancesResultGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIWalletsListBalancesResultGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "requestId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestId: ", p), err) }
  return err
}

func (p *APIWalletsListBalancesResultGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIWalletsListBalancesResultGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIWalletsListBalancesResultGetResult struct {
  Success *WalletBalanceResults `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIWalletsListBalancesResultGetResult() *APIWalletsListBalancesResultGetResult {
  return &APIWalletsListBalancesResultGetResult{}
}

var APIWalletsListBalancesResultGetResult_Success_DEFAULT *WalletBalanceResults
func (p *APIWalletsListBalancesResultGetResult) GetSuccess() *WalletBalanceResults {
  if !p.IsSetSuccess() {
    return APIWalletsListBalancesResultGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIWalletsListBalancesResultGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIWalletsListBalancesResultGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIWalletsListBalancesResultGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WalletBalanceResults{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIWalletsListBalancesResultGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletsListBalancesResultGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIWalletsListBalancesResultGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIWalletsListBalancesResultGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIWalletsListBalancesResultGetResult(%+v)", *p)
}

// Attributes:
//  - TransactionId
type APITransactionGetArgs struct {
  TransactionId *TransactionId `thrift:"transactionId,1" db:"transactionId" json:"transactionId"`
}

func NewAPITransactionGetArgs() *APITransactionGetArgs {
  return &APITransactionGetArgs{}
}

var APITransactionGetArgs_TransactionId_DEFAULT *TransactionId
func (p *APITransactionGetArgs) GetTransactionId() *TransactionId {
  if !p.IsSetTransactionId() {
    return APITransactionGetArgs_TransactionId_DEFAULT
  }
return p.TransactionId
}
func (p *APITransactionGetArgs) IsSetTransactionId() bool {
  return p.TransactionId != nil
}

func (p *APITransactionGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITransactionGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.TransactionId = &TransactionId{}
  if err := p.TransactionId.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TransactionId), err)
  }
  return nil
}

func (p *APITransactionGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITransactionGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactionId", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:transactionId: ", p), err) }
  if err := p.TransactionId.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TransactionId), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:transactionId: ", p), err) }
  return err
}

func (p *APITransactionGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITransactionGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITransactionGetResult struct {
  Success *TransactionGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITransactionGetResult() *APITransactionGetResult {
  return &APITransactionGetResult{}
}

var APITransactionGetResult_Success_DEFAULT *TransactionGetResult_
func (p *APITransactionGetResult) GetSuccess() *TransactionGetResult_ {
  if !p.IsSetSuccess() {
    return APITransactionGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITransactionGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITransactionGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITransactionGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TransactionGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITransactionGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITransactionGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITransactionGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITransactionGetResult(%+v)", *p)
}

// Attributes:
//  - Address
//  - Offset
//  - Limit
type APITransactionsGetArgs struct {
  Address general.Address `thrift:"address,1" db:"address" json:"address"`
  Offset int64 `thrift:"offset,2" db:"offset" json:"offset"`
  Limit int64 `thrift:"limit,3" db:"limit" json:"limit"`
}

func NewAPITransactionsGetArgs() *APITransactionsGetArgs {
  return &APITransactionsGetArgs{}
}


func (p *APITransactionsGetArgs) GetAddress() general.Address {
  return p.Address
}

func (p *APITransactionsGetArgs) GetOffset() int64 {
  return p.Offset
}

func (p *APITransactionsGetArgs) GetLimit() int64 {
  return p.Limit
}
func (p *APITransactionsGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITransactionsGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Address = temp
}
  return nil
}

func (p *APITransactionsGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *APITransactionsGetArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *APITransactionsGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionsGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITransactionsGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Address); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *APITransactionsGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *APITransactionsGetArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err) }
  return err
}

func (p *APITransactionsGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITransactionsGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITransactionsGetResult struct {
  Success *TransactionsGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITransactionsGetResult() *APITransactionsGetResult {
  return &APITransactionsGetResult{}
}

var APITransactionsGetResult_Success_DEFAULT *TransactionsGetResult_
func (p *APITransactionsGetResult) GetSuccess() *TransactionsGetResult_ {
  if !p.IsSetSuccess() {
    return APITransactionsGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITransactionsGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITransactionsGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITransactionsGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TransactionsGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITransactionsGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionsGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITransactionsGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITransactionsGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITransactionsGetResult(%+v)", *p)
}

// Attributes:
//  - Transaction
type APITransactionFlowArgs struct {
  Transaction *Transaction `thrift:"transaction,1" db:"transaction" json:"transaction"`
}

func NewAPITransactionFlowArgs() *APITransactionFlowArgs {
  return &APITransactionFlowArgs{}
}

var APITransactionFlowArgs_Transaction_DEFAULT *Transaction
func (p *APITransactionFlowArgs) GetTransaction() *Transaction {
  if !p.IsSetTransaction() {
    return APITransactionFlowArgs_Transaction_DEFAULT
  }
return p.Transaction
}
func (p *APITransactionFlowArgs) IsSetTransaction() bool {
  return p.Transaction != nil
}

func (p *APITransactionFlowArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITransactionFlowArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Transaction = &Transaction{}
  if err := p.Transaction.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Transaction), err)
  }
  return nil
}

func (p *APITransactionFlowArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionFlow_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITransactionFlowArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transaction", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:transaction: ", p), err) }
  if err := p.Transaction.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Transaction), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:transaction: ", p), err) }
  return err
}

func (p *APITransactionFlowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITransactionFlowArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITransactionFlowResult struct {
  Success *TransactionFlowResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITransactionFlowResult() *APITransactionFlowResult {
  return &APITransactionFlowResult{}
}

var APITransactionFlowResult_Success_DEFAULT *TransactionFlowResult_
func (p *APITransactionFlowResult) GetSuccess() *TransactionFlowResult_ {
  if !p.IsSetSuccess() {
    return APITransactionFlowResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITransactionFlowResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITransactionFlowResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITransactionFlowResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TransactionFlowResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITransactionFlowResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionFlow_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITransactionFlowResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITransactionFlowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITransactionFlowResult(%+v)", *p)
}

// Attributes:
//  - Offset
//  - Limit
type APITransactionsListGetArgs struct {
  Offset int64 `thrift:"offset,1" db:"offset" json:"offset"`
  Limit int64 `thrift:"limit,2" db:"limit" json:"limit"`
}

func NewAPITransactionsListGetArgs() *APITransactionsListGetArgs {
  return &APITransactionsListGetArgs{}
}


func (p *APITransactionsListGetArgs) GetOffset() int64 {
  return p.Offset
}

func (p *APITransactionsListGetArgs) GetLimit() int64 {
  return p.Limit
}
func (p *APITransactionsListGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITransactionsListGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *APITransactionsListGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *APITransactionsListGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionsListGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITransactionsListGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:offset: ", p), err) }
  return err
}

func (p *APITransactionsListGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:limit: ", p), err) }
  return err
}

func (p *APITransactionsListGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITransactionsListGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITransactionsListGetResult struct {
  Success *TransactionsGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITransactionsListGetResult() *APITransactionsListGetResult {
  return &APITransactionsListGetResult{}
}

var APITransactionsListGetResult_Success_DEFAULT *TransactionsGetResult_
func (p *APITransactionsListGetResult) GetSuccess() *TransactionsGetResult_ {
  if !p.IsSetSuccess() {
    return APITransactionsListGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITransactionsListGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITransactionsListGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITransactionsListGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TransactionsGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITransactionsListGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionsListGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITransactionsListGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITransactionsListGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITransactionsListGetResult(%+v)", *p)
}

// Attributes:
//  - GeneralQuery
type APIFilteredTransactionsListGetArgs struct {
  GeneralQuery *TransactionsQuery `thrift:"generalQuery,1" db:"generalQuery" json:"generalQuery"`
}

func NewAPIFilteredTransactionsListGetArgs() *APIFilteredTransactionsListGetArgs {
  return &APIFilteredTransactionsListGetArgs{}
}

var APIFilteredTransactionsListGetArgs_GeneralQuery_DEFAULT *TransactionsQuery
func (p *APIFilteredTransactionsListGetArgs) GetGeneralQuery() *TransactionsQuery {
  if !p.IsSetGeneralQuery() {
    return APIFilteredTransactionsListGetArgs_GeneralQuery_DEFAULT
  }
return p.GeneralQuery
}
func (p *APIFilteredTransactionsListGetArgs) IsSetGeneralQuery() bool {
  return p.GeneralQuery != nil
}

func (p *APIFilteredTransactionsListGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIFilteredTransactionsListGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.GeneralQuery = &TransactionsQuery{}
  if err := p.GeneralQuery.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GeneralQuery), err)
  }
  return nil
}

func (p *APIFilteredTransactionsListGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FilteredTransactionsListGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIFilteredTransactionsListGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "generalQuery", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:generalQuery: ", p), err) }
  if err := p.GeneralQuery.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GeneralQuery), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:generalQuery: ", p), err) }
  return err
}

func (p *APIFilteredTransactionsListGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIFilteredTransactionsListGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIFilteredTransactionsListGetResult struct {
  Success *FilteredTransactionsListResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIFilteredTransactionsListGetResult() *APIFilteredTransactionsListGetResult {
  return &APIFilteredTransactionsListGetResult{}
}

var APIFilteredTransactionsListGetResult_Success_DEFAULT *FilteredTransactionsListResult_
func (p *APIFilteredTransactionsListGetResult) GetSuccess() *FilteredTransactionsListResult_ {
  if !p.IsSetSuccess() {
    return APIFilteredTransactionsListGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIFilteredTransactionsListGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIFilteredTransactionsListGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIFilteredTransactionsListGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &FilteredTransactionsListResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIFilteredTransactionsListGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FilteredTransactionsListGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIFilteredTransactionsListGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIFilteredTransactionsListGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIFilteredTransactionsListGetResult(%+v)", *p)
}

// Attributes:
//  - GeneralQuery
type APIFilteredTrxsListGetArgs struct {
  GeneralQuery *TransactionsQuery `thrift:"generalQuery,1" db:"generalQuery" json:"generalQuery"`
}

func NewAPIFilteredTrxsListGetArgs() *APIFilteredTrxsListGetArgs {
  return &APIFilteredTrxsListGetArgs{}
}

var APIFilteredTrxsListGetArgs_GeneralQuery_DEFAULT *TransactionsQuery
func (p *APIFilteredTrxsListGetArgs) GetGeneralQuery() *TransactionsQuery {
  if !p.IsSetGeneralQuery() {
    return APIFilteredTrxsListGetArgs_GeneralQuery_DEFAULT
  }
return p.GeneralQuery
}
func (p *APIFilteredTrxsListGetArgs) IsSetGeneralQuery() bool {
  return p.GeneralQuery != nil
}

func (p *APIFilteredTrxsListGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIFilteredTrxsListGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.GeneralQuery = &TransactionsQuery{}
  if err := p.GeneralQuery.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GeneralQuery), err)
  }
  return nil
}

func (p *APIFilteredTrxsListGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FilteredTrxsListGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIFilteredTrxsListGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "generalQuery", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:generalQuery: ", p), err) }
  if err := p.GeneralQuery.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GeneralQuery), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:generalQuery: ", p), err) }
  return err
}

func (p *APIFilteredTrxsListGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIFilteredTrxsListGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIFilteredTrxsListGetResult struct {
  Success *AcceptedRequestId `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIFilteredTrxsListGetResult() *APIFilteredTrxsListGetResult {
  return &APIFilteredTrxsListGetResult{}
}

var APIFilteredTrxsListGetResult_Success_DEFAULT *AcceptedRequestId
func (p *APIFilteredTrxsListGetResult) GetSuccess() *AcceptedRequestId {
  if !p.IsSetSuccess() {
    return APIFilteredTrxsListGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIFilteredTrxsListGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIFilteredTrxsListGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIFilteredTrxsListGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AcceptedRequestId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIFilteredTrxsListGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FilteredTrxsListGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIFilteredTrxsListGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIFilteredTrxsListGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIFilteredTrxsListGetResult(%+v)", *p)
}

// Attributes:
//  - RequestId
type APIFilteredTrxsListGetResultArgs struct {
  RequestId int64 `thrift:"requestId,1" db:"requestId" json:"requestId"`
}

func NewAPIFilteredTrxsListGetResultArgs() *APIFilteredTrxsListGetResultArgs {
  return &APIFilteredTrxsListGetResultArgs{}
}


func (p *APIFilteredTrxsListGetResultArgs) GetRequestId() int64 {
  return p.RequestId
}
func (p *APIFilteredTrxsListGetResultArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIFilteredTrxsListGetResultArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RequestId = v
}
  return nil
}

func (p *APIFilteredTrxsListGetResultArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FilteredTrxsListGetResult_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIFilteredTrxsListGetResultArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "requestId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestId: ", p), err) }
  return err
}

func (p *APIFilteredTrxsListGetResultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIFilteredTrxsListGetResultArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIFilteredTrxsListGetResultResult struct {
  Success *FilteredTransactionsListResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIFilteredTrxsListGetResultResult() *APIFilteredTrxsListGetResultResult {
  return &APIFilteredTrxsListGetResultResult{}
}

var APIFilteredTrxsListGetResultResult_Success_DEFAULT *FilteredTransactionsListResult_
func (p *APIFilteredTrxsListGetResultResult) GetSuccess() *FilteredTransactionsListResult_ {
  if !p.IsSetSuccess() {
    return APIFilteredTrxsListGetResultResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIFilteredTrxsListGetResultResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIFilteredTrxsListGetResultResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIFilteredTrxsListGetResultResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &FilteredTransactionsListResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIFilteredTrxsListGetResultResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FilteredTrxsListGetResult_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIFilteredTrxsListGetResultResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIFilteredTrxsListGetResultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIFilteredTrxsListGetResultResult(%+v)", *p)
}

// Attributes:
//  - Transaction
type APITransactionSendArgs struct {
  Transaction *Transaction `thrift:"transaction,1" db:"transaction" json:"transaction"`
}

func NewAPITransactionSendArgs() *APITransactionSendArgs {
  return &APITransactionSendArgs{}
}

var APITransactionSendArgs_Transaction_DEFAULT *Transaction
func (p *APITransactionSendArgs) GetTransaction() *Transaction {
  if !p.IsSetTransaction() {
    return APITransactionSendArgs_Transaction_DEFAULT
  }
return p.Transaction
}
func (p *APITransactionSendArgs) IsSetTransaction() bool {
  return p.Transaction != nil
}

func (p *APITransactionSendArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITransactionSendArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Transaction = &Transaction{}
  if err := p.Transaction.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Transaction), err)
  }
  return nil
}

func (p *APITransactionSendArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionSend_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITransactionSendArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transaction", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:transaction: ", p), err) }
  if err := p.Transaction.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Transaction), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:transaction: ", p), err) }
  return err
}

func (p *APITransactionSendArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITransactionSendArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITransactionSendResult struct {
  Success *SendTransactionResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITransactionSendResult() *APITransactionSendResult {
  return &APITransactionSendResult{}
}

var APITransactionSendResult_Success_DEFAULT *SendTransactionResult_
func (p *APITransactionSendResult) GetSuccess() *SendTransactionResult_ {
  if !p.IsSetSuccess() {
    return APITransactionSendResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITransactionSendResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITransactionSendResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITransactionSendResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SendTransactionResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITransactionSendResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionSend_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITransactionSendResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITransactionSendResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITransactionSendResult(%+v)", *p)
}

// Attributes:
//  - RequestId
type APITransactionResultGetArgs struct {
  RequestId int64 `thrift:"requestId,1" db:"requestId" json:"requestId"`
}

func NewAPITransactionResultGetArgs() *APITransactionResultGetArgs {
  return &APITransactionResultGetArgs{}
}


func (p *APITransactionResultGetArgs) GetRequestId() int64 {
  return p.RequestId
}
func (p *APITransactionResultGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITransactionResultGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RequestId = v
}
  return nil
}

func (p *APITransactionResultGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionResultGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITransactionResultGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "requestId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestId: ", p), err) }
  return err
}

func (p *APITransactionResultGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITransactionResultGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITransactionResultGetResult struct {
  Success *TransactionFlowResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITransactionResultGetResult() *APITransactionResultGetResult {
  return &APITransactionResultGetResult{}
}

var APITransactionResultGetResult_Success_DEFAULT *TransactionFlowResult_
func (p *APITransactionResultGetResult) GetSuccess() *TransactionFlowResult_ {
  if !p.IsSetSuccess() {
    return APITransactionResultGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITransactionResultGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITransactionResultGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITransactionResultGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TransactionFlowResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITransactionResultGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionResultGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITransactionResultGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITransactionResultGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITransactionResultGetResult(%+v)", *p)
}

// Attributes:
//  - Transactions
type APITransactionsListSendArgs struct {
  Transactions *TransactionsList `thrift:"transactions,1" db:"transactions" json:"transactions"`
}

func NewAPITransactionsListSendArgs() *APITransactionsListSendArgs {
  return &APITransactionsListSendArgs{}
}

var APITransactionsListSendArgs_Transactions_DEFAULT *TransactionsList
func (p *APITransactionsListSendArgs) GetTransactions() *TransactionsList {
  if !p.IsSetTransactions() {
    return APITransactionsListSendArgs_Transactions_DEFAULT
  }
return p.Transactions
}
func (p *APITransactionsListSendArgs) IsSetTransactions() bool {
  return p.Transactions != nil
}

func (p *APITransactionsListSendArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITransactionsListSendArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Transactions = &TransactionsList{}
  if err := p.Transactions.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Transactions), err)
  }
  return nil
}

func (p *APITransactionsListSendArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionsListSend_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITransactionsListSendArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactions", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:transactions: ", p), err) }
  if err := p.Transactions.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Transactions), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:transactions: ", p), err) }
  return err
}

func (p *APITransactionsListSendArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITransactionsListSendArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITransactionsListSendResult struct {
  Success *SendTransactionResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITransactionsListSendResult() *APITransactionsListSendResult {
  return &APITransactionsListSendResult{}
}

var APITransactionsListSendResult_Success_DEFAULT *SendTransactionResult_
func (p *APITransactionsListSendResult) GetSuccess() *SendTransactionResult_ {
  if !p.IsSetSuccess() {
    return APITransactionsListSendResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITransactionsListSendResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITransactionsListSendResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITransactionsListSendResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SendTransactionResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITransactionsListSendResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionsListSend_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITransactionsListSendResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITransactionsListSendResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITransactionsListSendResult(%+v)", *p)
}

// Attributes:
//  - RequestId
type APITransactionsListResultGetArgs struct {
  RequestId int64 `thrift:"requestId,1" db:"requestId" json:"requestId"`
}

func NewAPITransactionsListResultGetArgs() *APITransactionsListResultGetArgs {
  return &APITransactionsListResultGetArgs{}
}


func (p *APITransactionsListResultGetArgs) GetRequestId() int64 {
  return p.RequestId
}
func (p *APITransactionsListResultGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITransactionsListResultGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RequestId = v
}
  return nil
}

func (p *APITransactionsListResultGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionsListResultGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITransactionsListResultGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "requestId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestId: ", p), err) }
  return err
}

func (p *APITransactionsListResultGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITransactionsListResultGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITransactionsListResultGetResult struct {
  Success *TransactionsListFlowResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITransactionsListResultGetResult() *APITransactionsListResultGetResult {
  return &APITransactionsListResultGetResult{}
}

var APITransactionsListResultGetResult_Success_DEFAULT *TransactionsListFlowResult_
func (p *APITransactionsListResultGetResult) GetSuccess() *TransactionsListFlowResult_ {
  if !p.IsSetSuccess() {
    return APITransactionsListResultGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITransactionsListResultGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITransactionsListResultGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITransactionsListResultGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TransactionsListFlowResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITransactionsListResultGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionsListResultGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITransactionsListResultGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITransactionsListResultGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITransactionsListResultGetResult(%+v)", *p)
}

type APIGetLastHashArgs struct {
}

func NewAPIGetLastHashArgs() *APIGetLastHashArgs {
  return &APIGetLastHashArgs{}
}

func (p *APIGetLastHashArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIGetLastHashArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetLastHash_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIGetLastHashArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIGetLastHashArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIGetLastHashResult struct {
  Success PoolHash `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIGetLastHashResult() *APIGetLastHashResult {
  return &APIGetLastHashResult{}
}

var APIGetLastHashResult_Success_DEFAULT PoolHash

func (p *APIGetLastHashResult) GetSuccess() PoolHash {
  return p.Success
}
func (p *APIGetLastHashResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIGetLastHashResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIGetLastHashResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := PoolHash(v)
  p.Success = temp
}
  return nil
}

func (p *APIGetLastHashResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetLastHash_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIGetLastHashResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Success); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIGetLastHashResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIGetLastHashResult(%+v)", *p)
}

// Attributes:
//  - Sequence
//  - Limit
type APIPoolListGetStableArgs struct {
  Sequence int64 `thrift:"sequence,1" db:"sequence" json:"sequence"`
  Limit int64 `thrift:"limit,2" db:"limit" json:"limit"`
}

func NewAPIPoolListGetStableArgs() *APIPoolListGetStableArgs {
  return &APIPoolListGetStableArgs{}
}


func (p *APIPoolListGetStableArgs) GetSequence() int64 {
  return p.Sequence
}

func (p *APIPoolListGetStableArgs) GetLimit() int64 {
  return p.Limit
}
func (p *APIPoolListGetStableArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIPoolListGetStableArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Sequence = v
}
  return nil
}

func (p *APIPoolListGetStableArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *APIPoolListGetStableArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PoolListGetStable_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIPoolListGetStableArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sequence", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sequence: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Sequence)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sequence (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sequence: ", p), err) }
  return err
}

func (p *APIPoolListGetStableArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:limit: ", p), err) }
  return err
}

func (p *APIPoolListGetStableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIPoolListGetStableArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIPoolListGetStableResult struct {
  Success *PoolListGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIPoolListGetStableResult() *APIPoolListGetStableResult {
  return &APIPoolListGetStableResult{}
}

var APIPoolListGetStableResult_Success_DEFAULT *PoolListGetResult_
func (p *APIPoolListGetStableResult) GetSuccess() *PoolListGetResult_ {
  if !p.IsSetSuccess() {
    return APIPoolListGetStableResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIPoolListGetStableResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIPoolListGetStableResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIPoolListGetStableResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &PoolListGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIPoolListGetStableResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PoolListGetStable_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIPoolListGetStableResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIPoolListGetStableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIPoolListGetStableResult(%+v)", *p)
}

// Attributes:
//  - Offset
//  - Limit
type APIPoolListGetArgs struct {
  Offset int64 `thrift:"offset,1" db:"offset" json:"offset"`
  Limit int64 `thrift:"limit,2" db:"limit" json:"limit"`
}

func NewAPIPoolListGetArgs() *APIPoolListGetArgs {
  return &APIPoolListGetArgs{}
}


func (p *APIPoolListGetArgs) GetOffset() int64 {
  return p.Offset
}

func (p *APIPoolListGetArgs) GetLimit() int64 {
  return p.Limit
}
func (p *APIPoolListGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIPoolListGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *APIPoolListGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *APIPoolListGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PoolListGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIPoolListGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:offset: ", p), err) }
  return err
}

func (p *APIPoolListGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:limit: ", p), err) }
  return err
}

func (p *APIPoolListGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIPoolListGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIPoolListGetResult struct {
  Success *PoolListGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIPoolListGetResult() *APIPoolListGetResult {
  return &APIPoolListGetResult{}
}

var APIPoolListGetResult_Success_DEFAULT *PoolListGetResult_
func (p *APIPoolListGetResult) GetSuccess() *PoolListGetResult_ {
  if !p.IsSetSuccess() {
    return APIPoolListGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIPoolListGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIPoolListGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIPoolListGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &PoolListGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIPoolListGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PoolListGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIPoolListGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIPoolListGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIPoolListGetResult(%+v)", *p)
}

// Attributes:
//  - Sequence
//  - Index
type APIPoolInfoGetArgs struct {
  Sequence int64 `thrift:"sequence,1" db:"sequence" json:"sequence"`
  Index int64 `thrift:"index,2" db:"index" json:"index"`
}

func NewAPIPoolInfoGetArgs() *APIPoolInfoGetArgs {
  return &APIPoolInfoGetArgs{}
}


func (p *APIPoolInfoGetArgs) GetSequence() int64 {
  return p.Sequence
}

func (p *APIPoolInfoGetArgs) GetIndex() int64 {
  return p.Index
}
func (p *APIPoolInfoGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIPoolInfoGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Sequence = v
}
  return nil
}

func (p *APIPoolInfoGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Index = v
}
  return nil
}

func (p *APIPoolInfoGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PoolInfoGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIPoolInfoGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sequence", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sequence: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Sequence)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sequence (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sequence: ", p), err) }
  return err
}

func (p *APIPoolInfoGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Index)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index: ", p), err) }
  return err
}

func (p *APIPoolInfoGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIPoolInfoGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIPoolInfoGetResult struct {
  Success *PoolInfoGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIPoolInfoGetResult() *APIPoolInfoGetResult {
  return &APIPoolInfoGetResult{}
}

var APIPoolInfoGetResult_Success_DEFAULT *PoolInfoGetResult_
func (p *APIPoolInfoGetResult) GetSuccess() *PoolInfoGetResult_ {
  if !p.IsSetSuccess() {
    return APIPoolInfoGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIPoolInfoGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIPoolInfoGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIPoolInfoGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &PoolInfoGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIPoolInfoGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PoolInfoGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIPoolInfoGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIPoolInfoGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIPoolInfoGetResult(%+v)", *p)
}

// Attributes:
//  - Sequence
//  - Offset
//  - Limit
type APIPoolTransactionsGetArgs struct {
  Sequence int64 `thrift:"sequence,1" db:"sequence" json:"sequence"`
  Offset int64 `thrift:"offset,2" db:"offset" json:"offset"`
  Limit int64 `thrift:"limit,3" db:"limit" json:"limit"`
}

func NewAPIPoolTransactionsGetArgs() *APIPoolTransactionsGetArgs {
  return &APIPoolTransactionsGetArgs{}
}


func (p *APIPoolTransactionsGetArgs) GetSequence() int64 {
  return p.Sequence
}

func (p *APIPoolTransactionsGetArgs) GetOffset() int64 {
  return p.Offset
}

func (p *APIPoolTransactionsGetArgs) GetLimit() int64 {
  return p.Limit
}
func (p *APIPoolTransactionsGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIPoolTransactionsGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Sequence = v
}
  return nil
}

func (p *APIPoolTransactionsGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *APIPoolTransactionsGetArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *APIPoolTransactionsGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PoolTransactionsGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIPoolTransactionsGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sequence", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sequence: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Sequence)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sequence (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sequence: ", p), err) }
  return err
}

func (p *APIPoolTransactionsGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *APIPoolTransactionsGetArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err) }
  return err
}

func (p *APIPoolTransactionsGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIPoolTransactionsGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIPoolTransactionsGetResult struct {
  Success *PoolTransactionsGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIPoolTransactionsGetResult() *APIPoolTransactionsGetResult {
  return &APIPoolTransactionsGetResult{}
}

var APIPoolTransactionsGetResult_Success_DEFAULT *PoolTransactionsGetResult_
func (p *APIPoolTransactionsGetResult) GetSuccess() *PoolTransactionsGetResult_ {
  if !p.IsSetSuccess() {
    return APIPoolTransactionsGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIPoolTransactionsGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIPoolTransactionsGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIPoolTransactionsGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &PoolTransactionsGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIPoolTransactionsGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PoolTransactionsGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIPoolTransactionsGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIPoolTransactionsGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIPoolTransactionsGetResult(%+v)", *p)
}

type APIStatsGetArgs struct {
}

func NewAPIStatsGetArgs() *APIStatsGetArgs {
  return &APIStatsGetArgs{}
}

func (p *APIStatsGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIStatsGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StatsGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIStatsGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIStatsGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIStatsGetResult struct {
  Success *StatsGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIStatsGetResult() *APIStatsGetResult {
  return &APIStatsGetResult{}
}

var APIStatsGetResult_Success_DEFAULT *StatsGetResult_
func (p *APIStatsGetResult) GetSuccess() *StatsGetResult_ {
  if !p.IsSetSuccess() {
    return APIStatsGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIStatsGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIStatsGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIStatsGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &StatsGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIStatsGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StatsGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIStatsGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIStatsGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIStatsGetResult(%+v)", *p)
}

// Attributes:
//  - Address
type APISmartContractGetArgs struct {
  Address general.Address `thrift:"address,1" db:"address" json:"address"`
}

func NewAPISmartContractGetArgs() *APISmartContractGetArgs {
  return &APISmartContractGetArgs{}
}


func (p *APISmartContractGetArgs) GetAddress() general.Address {
  return p.Address
}
func (p *APISmartContractGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APISmartContractGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Address = temp
}
  return nil
}

func (p *APISmartContractGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APISmartContractGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Address); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *APISmartContractGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APISmartContractGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APISmartContractGetResult struct {
  Success *SmartContractGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPISmartContractGetResult() *APISmartContractGetResult {
  return &APISmartContractGetResult{}
}

var APISmartContractGetResult_Success_DEFAULT *SmartContractGetResult_
func (p *APISmartContractGetResult) GetSuccess() *SmartContractGetResult_ {
  if !p.IsSetSuccess() {
    return APISmartContractGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APISmartContractGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APISmartContractGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APISmartContractGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SmartContractGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APISmartContractGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APISmartContractGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APISmartContractGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APISmartContractGetResult(%+v)", *p)
}

// Attributes:
//  - Deployer
//  - Offset
//  - Limit
type APISmartContractsListGetArgs struct {
  Deployer general.Address `thrift:"deployer,1" db:"deployer" json:"deployer"`
  Offset int64 `thrift:"offset,2" db:"offset" json:"offset"`
  Limit int64 `thrift:"limit,3" db:"limit" json:"limit"`
}

func NewAPISmartContractsListGetArgs() *APISmartContractsListGetArgs {
  return &APISmartContractsListGetArgs{}
}


func (p *APISmartContractsListGetArgs) GetDeployer() general.Address {
  return p.Deployer
}

func (p *APISmartContractsListGetArgs) GetOffset() int64 {
  return p.Offset
}

func (p *APISmartContractsListGetArgs) GetLimit() int64 {
  return p.Limit
}
func (p *APISmartContractsListGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APISmartContractsListGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Deployer = temp
}
  return nil
}

func (p *APISmartContractsListGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *APISmartContractsListGetArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *APISmartContractsListGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractsListGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APISmartContractsListGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deployer", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deployer: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Deployer); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deployer (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deployer: ", p), err) }
  return err
}

func (p *APISmartContractsListGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *APISmartContractsListGetArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err) }
  return err
}

func (p *APISmartContractsListGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APISmartContractsListGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APISmartContractsListGetResult struct {
  Success *SmartContractsListGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPISmartContractsListGetResult() *APISmartContractsListGetResult {
  return &APISmartContractsListGetResult{}
}

var APISmartContractsListGetResult_Success_DEFAULT *SmartContractsListGetResult_
func (p *APISmartContractsListGetResult) GetSuccess() *SmartContractsListGetResult_ {
  if !p.IsSetSuccess() {
    return APISmartContractsListGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APISmartContractsListGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APISmartContractsListGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APISmartContractsListGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SmartContractsListGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APISmartContractsListGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractsListGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APISmartContractsListGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APISmartContractsListGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APISmartContractsListGetResult(%+v)", *p)
}

// Attributes:
//  - Deployer
type APISmartContractAddressesListGetArgs struct {
  Deployer general.Address `thrift:"deployer,1" db:"deployer" json:"deployer"`
}

func NewAPISmartContractAddressesListGetArgs() *APISmartContractAddressesListGetArgs {
  return &APISmartContractAddressesListGetArgs{}
}


func (p *APISmartContractAddressesListGetArgs) GetDeployer() general.Address {
  return p.Deployer
}
func (p *APISmartContractAddressesListGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APISmartContractAddressesListGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Deployer = temp
}
  return nil
}

func (p *APISmartContractAddressesListGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractAddressesListGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APISmartContractAddressesListGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deployer", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deployer: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Deployer); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deployer (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deployer: ", p), err) }
  return err
}

func (p *APISmartContractAddressesListGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APISmartContractAddressesListGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APISmartContractAddressesListGetResult struct {
  Success *SmartContractAddressesListGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPISmartContractAddressesListGetResult() *APISmartContractAddressesListGetResult {
  return &APISmartContractAddressesListGetResult{}
}

var APISmartContractAddressesListGetResult_Success_DEFAULT *SmartContractAddressesListGetResult_
func (p *APISmartContractAddressesListGetResult) GetSuccess() *SmartContractAddressesListGetResult_ {
  if !p.IsSetSuccess() {
    return APISmartContractAddressesListGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APISmartContractAddressesListGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APISmartContractAddressesListGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APISmartContractAddressesListGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SmartContractAddressesListGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APISmartContractAddressesListGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractAddressesListGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APISmartContractAddressesListGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APISmartContractAddressesListGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APISmartContractAddressesListGetResult(%+v)", *p)
}

// Attributes:
//  - Obsolete
type APIWaitForBlockArgs struct {
  Obsolete PoolHash `thrift:"obsolete,1" db:"obsolete" json:"obsolete"`
}

func NewAPIWaitForBlockArgs() *APIWaitForBlockArgs {
  return &APIWaitForBlockArgs{}
}


func (p *APIWaitForBlockArgs) GetObsolete() PoolHash {
  return p.Obsolete
}
func (p *APIWaitForBlockArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIWaitForBlockArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := PoolHash(v)
  p.Obsolete = temp
}
  return nil
}

func (p *APIWaitForBlockArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WaitForBlock_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIWaitForBlockArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "obsolete", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:obsolete: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Obsolete); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.obsolete (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:obsolete: ", p), err) }
  return err
}

func (p *APIWaitForBlockArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIWaitForBlockArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIWaitForBlockResult struct {
  Success PoolHash `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIWaitForBlockResult() *APIWaitForBlockResult {
  return &APIWaitForBlockResult{}
}

var APIWaitForBlockResult_Success_DEFAULT PoolHash

func (p *APIWaitForBlockResult) GetSuccess() PoolHash {
  return p.Success
}
func (p *APIWaitForBlockResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIWaitForBlockResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIWaitForBlockResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := PoolHash(v)
  p.Success = temp
}
  return nil
}

func (p *APIWaitForBlockResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WaitForBlock_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIWaitForBlockResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Success); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIWaitForBlockResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIWaitForBlockResult(%+v)", *p)
}

// Attributes:
//  - SmartPublic
type APIWaitForSmartTransactionArgs struct {
  SmartPublic general.Address `thrift:"smart_public,1" db:"smart_public" json:"smart_public"`
}

func NewAPIWaitForSmartTransactionArgs() *APIWaitForSmartTransactionArgs {
  return &APIWaitForSmartTransactionArgs{}
}


func (p *APIWaitForSmartTransactionArgs) GetSmartPublic() general.Address {
  return p.SmartPublic
}
func (p *APIWaitForSmartTransactionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIWaitForSmartTransactionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.SmartPublic = temp
}
  return nil
}

func (p *APIWaitForSmartTransactionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WaitForSmartTransaction_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIWaitForSmartTransactionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "smart_public", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:smart_public: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.SmartPublic); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.smart_public (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:smart_public: ", p), err) }
  return err
}

func (p *APIWaitForSmartTransactionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIWaitForSmartTransactionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIWaitForSmartTransactionResult struct {
  Success *TransactionId `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIWaitForSmartTransactionResult() *APIWaitForSmartTransactionResult {
  return &APIWaitForSmartTransactionResult{}
}

var APIWaitForSmartTransactionResult_Success_DEFAULT *TransactionId
func (p *APIWaitForSmartTransactionResult) GetSuccess() *TransactionId {
  if !p.IsSetSuccess() {
    return APIWaitForSmartTransactionResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIWaitForSmartTransactionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIWaitForSmartTransactionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIWaitForSmartTransactionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TransactionId{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIWaitForSmartTransactionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WaitForSmartTransaction_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIWaitForSmartTransactionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIWaitForSmartTransactionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIWaitForSmartTransactionResult(%+v)", *p)
}

// Attributes:
//  - Offset
//  - Limit
type APISmartContractsAllListGetArgs struct {
  Offset int64 `thrift:"offset,1" db:"offset" json:"offset"`
  Limit int64 `thrift:"limit,2" db:"limit" json:"limit"`
}

func NewAPISmartContractsAllListGetArgs() *APISmartContractsAllListGetArgs {
  return &APISmartContractsAllListGetArgs{}
}


func (p *APISmartContractsAllListGetArgs) GetOffset() int64 {
  return p.Offset
}

func (p *APISmartContractsAllListGetArgs) GetLimit() int64 {
  return p.Limit
}
func (p *APISmartContractsAllListGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APISmartContractsAllListGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *APISmartContractsAllListGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *APISmartContractsAllListGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractsAllListGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APISmartContractsAllListGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:offset: ", p), err) }
  return err
}

func (p *APISmartContractsAllListGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:limit: ", p), err) }
  return err
}

func (p *APISmartContractsAllListGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APISmartContractsAllListGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APISmartContractsAllListGetResult struct {
  Success *SmartContractsListGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPISmartContractsAllListGetResult() *APISmartContractsAllListGetResult {
  return &APISmartContractsAllListGetResult{}
}

var APISmartContractsAllListGetResult_Success_DEFAULT *SmartContractsListGetResult_
func (p *APISmartContractsAllListGetResult) GetSuccess() *SmartContractsListGetResult_ {
  if !p.IsSetSuccess() {
    return APISmartContractsAllListGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APISmartContractsAllListGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APISmartContractsAllListGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APISmartContractsAllListGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SmartContractsListGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APISmartContractsAllListGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractsAllListGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APISmartContractsAllListGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APISmartContractsAllListGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APISmartContractsAllListGetResult(%+v)", *p)
}

// Attributes:
//  - Address
//  - ID
type APITransactionsStateGetArgs struct {
  Address general.Address `thrift:"address,1" db:"address" json:"address"`
  ID []TransactionInnerId `thrift:"id,2" db:"id" json:"id"`
}

func NewAPITransactionsStateGetArgs() *APITransactionsStateGetArgs {
  return &APITransactionsStateGetArgs{}
}


func (p *APITransactionsStateGetArgs) GetAddress() general.Address {
  return p.Address
}

func (p *APITransactionsStateGetArgs) GetID() []TransactionInnerId {
  return p.ID
}
func (p *APITransactionsStateGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITransactionsStateGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Address = temp
}
  return nil
}

func (p *APITransactionsStateGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]TransactionInnerId, 0, size)
  p.ID =  tSlice
  for i := 0; i < size; i ++ {
var _elem249 TransactionInnerId
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TransactionInnerId(v)
    _elem249 = temp
}
    p.ID = append(p.ID, _elem249)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *APITransactionsStateGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionsStateGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITransactionsStateGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Address); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *APITransactionsStateGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.ID)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ID {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *APITransactionsStateGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITransactionsStateGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITransactionsStateGetResult struct {
  Success *TransactionsStateGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITransactionsStateGetResult() *APITransactionsStateGetResult {
  return &APITransactionsStateGetResult{}
}

var APITransactionsStateGetResult_Success_DEFAULT *TransactionsStateGetResult_
func (p *APITransactionsStateGetResult) GetSuccess() *TransactionsStateGetResult_ {
  if !p.IsSetSuccess() {
    return APITransactionsStateGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITransactionsStateGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITransactionsStateGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITransactionsStateGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TransactionsStateGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITransactionsStateGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionsStateGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITransactionsStateGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITransactionsStateGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITransactionsStateGetResult(%+v)", *p)
}

// Attributes:
//  - ByteCodeObjects
type APIContractAllMethodsGetArgs struct {
  ByteCodeObjects []*general.ByteCodeObject `thrift:"byteCodeObjects,1" db:"byteCodeObjects" json:"byteCodeObjects"`
}

func NewAPIContractAllMethodsGetArgs() *APIContractAllMethodsGetArgs {
  return &APIContractAllMethodsGetArgs{}
}


func (p *APIContractAllMethodsGetArgs) GetByteCodeObjects() []*general.ByteCodeObject {
  return p.ByteCodeObjects
}
func (p *APIContractAllMethodsGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIContractAllMethodsGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*general.ByteCodeObject, 0, size)
  p.ByteCodeObjects =  tSlice
  for i := 0; i < size; i ++ {
    _elem250 := &general.ByteCodeObject{}
    if err := _elem250.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem250), err)
    }
    p.ByteCodeObjects = append(p.ByteCodeObjects, _elem250)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *APIContractAllMethodsGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ContractAllMethodsGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIContractAllMethodsGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "byteCodeObjects", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:byteCodeObjects: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ByteCodeObjects)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ByteCodeObjects {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:byteCodeObjects: ", p), err) }
  return err
}

func (p *APIContractAllMethodsGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIContractAllMethodsGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIContractAllMethodsGetResult struct {
  Success *ContractAllMethodsGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIContractAllMethodsGetResult() *APIContractAllMethodsGetResult {
  return &APIContractAllMethodsGetResult{}
}

var APIContractAllMethodsGetResult_Success_DEFAULT *ContractAllMethodsGetResult_
func (p *APIContractAllMethodsGetResult) GetSuccess() *ContractAllMethodsGetResult_ {
  if !p.IsSetSuccess() {
    return APIContractAllMethodsGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIContractAllMethodsGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIContractAllMethodsGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIContractAllMethodsGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ContractAllMethodsGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIContractAllMethodsGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ContractAllMethodsGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIContractAllMethodsGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIContractAllMethodsGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIContractAllMethodsGetResult(%+v)", *p)
}

// Attributes:
//  - Address
type APIContractMethodsGetArgs struct {
  Address general.Address `thrift:"address,1" db:"address" json:"address"`
}

func NewAPIContractMethodsGetArgs() *APIContractMethodsGetArgs {
  return &APIContractMethodsGetArgs{}
}


func (p *APIContractMethodsGetArgs) GetAddress() general.Address {
  return p.Address
}
func (p *APIContractMethodsGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIContractMethodsGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Address = temp
}
  return nil
}

func (p *APIContractMethodsGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ContractMethodsGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIContractMethodsGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Address); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *APIContractMethodsGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIContractMethodsGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIContractMethodsGetResult struct {
  Success *ContractAllMethodsGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIContractMethodsGetResult() *APIContractMethodsGetResult {
  return &APIContractMethodsGetResult{}
}

var APIContractMethodsGetResult_Success_DEFAULT *ContractAllMethodsGetResult_
func (p *APIContractMethodsGetResult) GetSuccess() *ContractAllMethodsGetResult_ {
  if !p.IsSetSuccess() {
    return APIContractMethodsGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIContractMethodsGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIContractMethodsGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIContractMethodsGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ContractAllMethodsGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIContractMethodsGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ContractMethodsGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIContractMethodsGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIContractMethodsGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIContractMethodsGetResult(%+v)", *p)
}

// Attributes:
//  - Address
//  - ID
type APISmartMethodParamsGetArgs struct {
  Address general.Address `thrift:"address,1" db:"address" json:"address"`
  ID TransactionInnerId `thrift:"id,2" db:"id" json:"id"`
}

func NewAPISmartMethodParamsGetArgs() *APISmartMethodParamsGetArgs {
  return &APISmartMethodParamsGetArgs{}
}


func (p *APISmartMethodParamsGetArgs) GetAddress() general.Address {
  return p.Address
}

func (p *APISmartMethodParamsGetArgs) GetID() TransactionInnerId {
  return p.ID
}
func (p *APISmartMethodParamsGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APISmartMethodParamsGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Address = temp
}
  return nil
}

func (p *APISmartMethodParamsGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TransactionInnerId(v)
  p.ID = temp
}
  return nil
}

func (p *APISmartMethodParamsGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartMethodParamsGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APISmartMethodParamsGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Address); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *APISmartMethodParamsGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *APISmartMethodParamsGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APISmartMethodParamsGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APISmartMethodParamsGetResult struct {
  Success *SmartMethodParamsGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPISmartMethodParamsGetResult() *APISmartMethodParamsGetResult {
  return &APISmartMethodParamsGetResult{}
}

var APISmartMethodParamsGetResult_Success_DEFAULT *SmartMethodParamsGetResult_
func (p *APISmartMethodParamsGetResult) GetSuccess() *SmartMethodParamsGetResult_ {
  if !p.IsSetSuccess() {
    return APISmartMethodParamsGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APISmartMethodParamsGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APISmartMethodParamsGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APISmartMethodParamsGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SmartMethodParamsGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APISmartMethodParamsGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartMethodParamsGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APISmartMethodParamsGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APISmartMethodParamsGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APISmartMethodParamsGetResult(%+v)", *p)
}

// Attributes:
//  - Address
type APISmartContractDataGetArgs struct {
  Address general.Address `thrift:"address,1" db:"address" json:"address"`
}

func NewAPISmartContractDataGetArgs() *APISmartContractDataGetArgs {
  return &APISmartContractDataGetArgs{}
}


func (p *APISmartContractDataGetArgs) GetAddress() general.Address {
  return p.Address
}
func (p *APISmartContractDataGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APISmartContractDataGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Address = temp
}
  return nil
}

func (p *APISmartContractDataGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractDataGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APISmartContractDataGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Address); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *APISmartContractDataGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APISmartContractDataGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APISmartContractDataGetResult struct {
  Success *SmartContractDataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPISmartContractDataGetResult() *APISmartContractDataGetResult {
  return &APISmartContractDataGetResult{}
}

var APISmartContractDataGetResult_Success_DEFAULT *SmartContractDataResult_
func (p *APISmartContractDataGetResult) GetSuccess() *SmartContractDataResult_ {
  if !p.IsSetSuccess() {
    return APISmartContractDataGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APISmartContractDataGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APISmartContractDataGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APISmartContractDataGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SmartContractDataResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APISmartContractDataGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractDataGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APISmartContractDataGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APISmartContractDataGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APISmartContractDataGetResult(%+v)", *p)
}

// Attributes:
//  - SourceCode
type APISmartContractCompileArgs struct {
  SourceCode string `thrift:"sourceCode,1" db:"sourceCode" json:"sourceCode"`
}

func NewAPISmartContractCompileArgs() *APISmartContractCompileArgs {
  return &APISmartContractCompileArgs{}
}


func (p *APISmartContractCompileArgs) GetSourceCode() string {
  return p.SourceCode
}
func (p *APISmartContractCompileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APISmartContractCompileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SourceCode = v
}
  return nil
}

func (p *APISmartContractCompileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractCompile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APISmartContractCompileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sourceCode", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sourceCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SourceCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sourceCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sourceCode: ", p), err) }
  return err
}

func (p *APISmartContractCompileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APISmartContractCompileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APISmartContractCompileResult struct {
  Success *SmartContractCompileResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPISmartContractCompileResult() *APISmartContractCompileResult {
  return &APISmartContractCompileResult{}
}

var APISmartContractCompileResult_Success_DEFAULT *SmartContractCompileResult_
func (p *APISmartContractCompileResult) GetSuccess() *SmartContractCompileResult_ {
  if !p.IsSetSuccess() {
    return APISmartContractCompileResult_Success_DEFAULT
  }
return p.Success
}
func (p *APISmartContractCompileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APISmartContractCompileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APISmartContractCompileResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SmartContractCompileResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APISmartContractCompileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SmartContractCompile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APISmartContractCompileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APISmartContractCompileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APISmartContractCompileResult(%+v)", *p)
}

// Attributes:
//  - Address
type APITokenBalancesGetArgs struct {
  Address general.Address `thrift:"address,1" db:"address" json:"address"`
}

func NewAPITokenBalancesGetArgs() *APITokenBalancesGetArgs {
  return &APITokenBalancesGetArgs{}
}


func (p *APITokenBalancesGetArgs) GetAddress() general.Address {
  return p.Address
}
func (p *APITokenBalancesGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITokenBalancesGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Address = temp
}
  return nil
}

func (p *APITokenBalancesGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenBalancesGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITokenBalancesGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Address); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *APITokenBalancesGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITokenBalancesGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITokenBalancesGetResult struct {
  Success *TokenBalancesResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITokenBalancesGetResult() *APITokenBalancesGetResult {
  return &APITokenBalancesGetResult{}
}

var APITokenBalancesGetResult_Success_DEFAULT *TokenBalancesResult_
func (p *APITokenBalancesGetResult) GetSuccess() *TokenBalancesResult_ {
  if !p.IsSetSuccess() {
    return APITokenBalancesGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITokenBalancesGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITokenBalancesGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITokenBalancesGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TokenBalancesResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITokenBalancesGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenBalancesGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITokenBalancesGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITokenBalancesGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITokenBalancesGetResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Offset
//  - Limit
type APITokenTransfersGetArgs struct {
  Token general.Address `thrift:"token,1" db:"token" json:"token"`
  Offset int64 `thrift:"offset,2" db:"offset" json:"offset"`
  Limit int64 `thrift:"limit,3" db:"limit" json:"limit"`
}

func NewAPITokenTransfersGetArgs() *APITokenTransfersGetArgs {
  return &APITokenTransfersGetArgs{}
}


func (p *APITokenTransfersGetArgs) GetToken() general.Address {
  return p.Token
}

func (p *APITokenTransfersGetArgs) GetOffset() int64 {
  return p.Offset
}

func (p *APITokenTransfersGetArgs) GetLimit() int64 {
  return p.Limit
}
func (p *APITokenTransfersGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITokenTransfersGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Token = temp
}
  return nil
}

func (p *APITokenTransfersGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *APITokenTransfersGetArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *APITokenTransfersGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenTransfersGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITokenTransfersGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Token); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *APITokenTransfersGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *APITokenTransfersGetArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err) }
  return err
}

func (p *APITokenTransfersGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITokenTransfersGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITokenTransfersGetResult struct {
  Success *TokenTransfersResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITokenTransfersGetResult() *APITokenTransfersGetResult {
  return &APITokenTransfersGetResult{}
}

var APITokenTransfersGetResult_Success_DEFAULT *TokenTransfersResult_
func (p *APITokenTransfersGetResult) GetSuccess() *TokenTransfersResult_ {
  if !p.IsSetSuccess() {
    return APITokenTransfersGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITokenTransfersGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITokenTransfersGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITokenTransfersGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TokenTransfersResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITokenTransfersGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenTransfersGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITokenTransfersGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITokenTransfersGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITokenTransfersGetResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - ID
type APITokenTransferGetArgs struct {
  Token general.Address `thrift:"token,1" db:"token" json:"token"`
  ID *TransactionId `thrift:"id,2" db:"id" json:"id"`
}

func NewAPITokenTransferGetArgs() *APITokenTransferGetArgs {
  return &APITokenTransferGetArgs{}
}


func (p *APITokenTransferGetArgs) GetToken() general.Address {
  return p.Token
}
var APITokenTransferGetArgs_ID_DEFAULT *TransactionId
func (p *APITokenTransferGetArgs) GetID() *TransactionId {
  if !p.IsSetID() {
    return APITokenTransferGetArgs_ID_DEFAULT
  }
return p.ID
}
func (p *APITokenTransferGetArgs) IsSetID() bool {
  return p.ID != nil
}

func (p *APITokenTransferGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITokenTransferGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Token = temp
}
  return nil
}

func (p *APITokenTransferGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &TransactionId{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *APITokenTransferGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenTransferGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITokenTransferGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Token); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *APITokenTransferGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *APITokenTransferGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITokenTransferGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITokenTransferGetResult struct {
  Success *TokenTransfersResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITokenTransferGetResult() *APITokenTransferGetResult {
  return &APITokenTransferGetResult{}
}

var APITokenTransferGetResult_Success_DEFAULT *TokenTransfersResult_
func (p *APITokenTransferGetResult) GetSuccess() *TokenTransfersResult_ {
  if !p.IsSetSuccess() {
    return APITokenTransferGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITokenTransferGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITokenTransferGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITokenTransferGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TokenTransfersResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITokenTransferGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenTransferGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITokenTransferGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITokenTransferGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITokenTransferGetResult(%+v)", *p)
}

// Attributes:
//  - Offset
//  - Limit
type APITokenTransfersListGetArgs struct {
  Offset int64 `thrift:"offset,1" db:"offset" json:"offset"`
  Limit int64 `thrift:"limit,2" db:"limit" json:"limit"`
}

func NewAPITokenTransfersListGetArgs() *APITokenTransfersListGetArgs {
  return &APITokenTransfersListGetArgs{}
}


func (p *APITokenTransfersListGetArgs) GetOffset() int64 {
  return p.Offset
}

func (p *APITokenTransfersListGetArgs) GetLimit() int64 {
  return p.Limit
}
func (p *APITokenTransfersListGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITokenTransfersListGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *APITokenTransfersListGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *APITokenTransfersListGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenTransfersListGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITokenTransfersListGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:offset: ", p), err) }
  return err
}

func (p *APITokenTransfersListGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:limit: ", p), err) }
  return err
}

func (p *APITokenTransfersListGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITokenTransfersListGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITokenTransfersListGetResult struct {
  Success *TokenTransfersResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITokenTransfersListGetResult() *APITokenTransfersListGetResult {
  return &APITokenTransfersListGetResult{}
}

var APITokenTransfersListGetResult_Success_DEFAULT *TokenTransfersResult_
func (p *APITokenTransfersListGetResult) GetSuccess() *TokenTransfersResult_ {
  if !p.IsSetSuccess() {
    return APITokenTransfersListGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITokenTransfersListGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITokenTransfersListGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITokenTransfersListGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TokenTransfersResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITokenTransfersListGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenTransfersListGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITokenTransfersListGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITokenTransfersListGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITokenTransfersListGetResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Address
//  - Offset
//  - Limit
type APITokenWalletTransfersGetArgs struct {
  Token general.Address `thrift:"token,1" db:"token" json:"token"`
  Address general.Address `thrift:"address,2" db:"address" json:"address"`
  Offset int64 `thrift:"offset,3" db:"offset" json:"offset"`
  Limit int64 `thrift:"limit,4" db:"limit" json:"limit"`
}

func NewAPITokenWalletTransfersGetArgs() *APITokenWalletTransfersGetArgs {
  return &APITokenWalletTransfersGetArgs{}
}


func (p *APITokenWalletTransfersGetArgs) GetToken() general.Address {
  return p.Token
}

func (p *APITokenWalletTransfersGetArgs) GetAddress() general.Address {
  return p.Address
}

func (p *APITokenWalletTransfersGetArgs) GetOffset() int64 {
  return p.Offset
}

func (p *APITokenWalletTransfersGetArgs) GetLimit() int64 {
  return p.Limit
}
func (p *APITokenWalletTransfersGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITokenWalletTransfersGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Token = temp
}
  return nil
}

func (p *APITokenWalletTransfersGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := general.Address(v)
  p.Address = temp
}
  return nil
}

func (p *APITokenWalletTransfersGetArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *APITokenWalletTransfersGetArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *APITokenWalletTransfersGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenWalletTransfersGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITokenWalletTransfersGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Token); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *APITokenWalletTransfersGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Address); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err) }
  return err
}

func (p *APITokenWalletTransfersGetArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:offset: ", p), err) }
  return err
}

func (p *APITokenWalletTransfersGetArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:limit: ", p), err) }
  return err
}

func (p *APITokenWalletTransfersGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITokenWalletTransfersGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITokenWalletTransfersGetResult struct {
  Success *TokenTransfersResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITokenWalletTransfersGetResult() *APITokenWalletTransfersGetResult {
  return &APITokenWalletTransfersGetResult{}
}

var APITokenWalletTransfersGetResult_Success_DEFAULT *TokenTransfersResult_
func (p *APITokenWalletTransfersGetResult) GetSuccess() *TokenTransfersResult_ {
  if !p.IsSetSuccess() {
    return APITokenWalletTransfersGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITokenWalletTransfersGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITokenWalletTransfersGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITokenWalletTransfersGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TokenTransfersResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITokenWalletTransfersGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenWalletTransfersGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITokenWalletTransfersGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITokenWalletTransfersGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITokenWalletTransfersGetResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Offset
//  - Limit
type APITokenTransactionsGetArgs struct {
  Token general.Address `thrift:"token,1" db:"token" json:"token"`
  Offset int64 `thrift:"offset,2" db:"offset" json:"offset"`
  Limit int64 `thrift:"limit,3" db:"limit" json:"limit"`
}

func NewAPITokenTransactionsGetArgs() *APITokenTransactionsGetArgs {
  return &APITokenTransactionsGetArgs{}
}


func (p *APITokenTransactionsGetArgs) GetToken() general.Address {
  return p.Token
}

func (p *APITokenTransactionsGetArgs) GetOffset() int64 {
  return p.Offset
}

func (p *APITokenTransactionsGetArgs) GetLimit() int64 {
  return p.Limit
}
func (p *APITokenTransactionsGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITokenTransactionsGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Token = temp
}
  return nil
}

func (p *APITokenTransactionsGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *APITokenTransactionsGetArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *APITokenTransactionsGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenTransactionsGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITokenTransactionsGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Token); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *APITokenTransactionsGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *APITokenTransactionsGetArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err) }
  return err
}

func (p *APITokenTransactionsGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITokenTransactionsGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITokenTransactionsGetResult struct {
  Success *TokenTransactionsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITokenTransactionsGetResult() *APITokenTransactionsGetResult {
  return &APITokenTransactionsGetResult{}
}

var APITokenTransactionsGetResult_Success_DEFAULT *TokenTransactionsResult_
func (p *APITokenTransactionsGetResult) GetSuccess() *TokenTransactionsResult_ {
  if !p.IsSetSuccess() {
    return APITokenTransactionsGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITokenTransactionsGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITokenTransactionsGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITokenTransactionsGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TokenTransactionsResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITokenTransactionsGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenTransactionsGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITokenTransactionsGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITokenTransactionsGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITokenTransactionsGetResult(%+v)", *p)
}

// Attributes:
//  - Token
type APITokenInfoGetArgs struct {
  Token general.Address `thrift:"token,1" db:"token" json:"token"`
}

func NewAPITokenInfoGetArgs() *APITokenInfoGetArgs {
  return &APITokenInfoGetArgs{}
}


func (p *APITokenInfoGetArgs) GetToken() general.Address {
  return p.Token
}
func (p *APITokenInfoGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITokenInfoGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Token = temp
}
  return nil
}

func (p *APITokenInfoGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenInfoGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITokenInfoGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Token); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *APITokenInfoGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITokenInfoGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITokenInfoGetResult struct {
  Success *TokenInfoResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITokenInfoGetResult() *APITokenInfoGetResult {
  return &APITokenInfoGetResult{}
}

var APITokenInfoGetResult_Success_DEFAULT *TokenInfoResult_
func (p *APITokenInfoGetResult) GetSuccess() *TokenInfoResult_ {
  if !p.IsSetSuccess() {
    return APITokenInfoGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITokenInfoGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITokenInfoGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITokenInfoGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TokenInfoResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITokenInfoGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenInfoGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITokenInfoGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITokenInfoGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITokenInfoGetResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Offset
//  - Limit
//  - Order
//  - Desc
type APITokenHoldersGetArgs struct {
  Token general.Address `thrift:"token,1" db:"token" json:"token"`
  Offset int64 `thrift:"offset,2" db:"offset" json:"offset"`
  Limit int64 `thrift:"limit,3" db:"limit" json:"limit"`
  Order TokenHoldersSortField `thrift:"order,4" db:"order" json:"order"`
  Desc bool `thrift:"desc,5" db:"desc" json:"desc"`
}

func NewAPITokenHoldersGetArgs() *APITokenHoldersGetArgs {
  return &APITokenHoldersGetArgs{}
}


func (p *APITokenHoldersGetArgs) GetToken() general.Address {
  return p.Token
}

func (p *APITokenHoldersGetArgs) GetOffset() int64 {
  return p.Offset
}

func (p *APITokenHoldersGetArgs) GetLimit() int64 {
  return p.Limit
}

func (p *APITokenHoldersGetArgs) GetOrder() TokenHoldersSortField {
  return p.Order
}

func (p *APITokenHoldersGetArgs) GetDesc() bool {
  return p.Desc
}
func (p *APITokenHoldersGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITokenHoldersGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := general.Address(v)
  p.Token = temp
}
  return nil
}

func (p *APITokenHoldersGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *APITokenHoldersGetArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *APITokenHoldersGetArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TokenHoldersSortField(v)
  p.Order = temp
}
  return nil
}

func (p *APITokenHoldersGetArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Desc = v
}
  return nil
}

func (p *APITokenHoldersGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenHoldersGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITokenHoldersGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Token); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *APITokenHoldersGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *APITokenHoldersGetArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err) }
  return err
}

func (p *APITokenHoldersGetArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "order", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:order: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Order)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:order: ", p), err) }
  return err
}

func (p *APITokenHoldersGetArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "desc", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:desc: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Desc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.desc (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:desc: ", p), err) }
  return err
}

func (p *APITokenHoldersGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITokenHoldersGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITokenHoldersGetResult struct {
  Success *TokenHoldersResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITokenHoldersGetResult() *APITokenHoldersGetResult {
  return &APITokenHoldersGetResult{}
}

var APITokenHoldersGetResult_Success_DEFAULT *TokenHoldersResult_
func (p *APITokenHoldersGetResult) GetSuccess() *TokenHoldersResult_ {
  if !p.IsSetSuccess() {
    return APITokenHoldersGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITokenHoldersGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITokenHoldersGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITokenHoldersGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TokenHoldersResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITokenHoldersGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenHoldersGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITokenHoldersGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITokenHoldersGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITokenHoldersGetResult(%+v)", *p)
}

// Attributes:
//  - Offset
//  - Limit
//  - Order
//  - Desc
//  - Filters
type APITokensListGetArgs struct {
  Offset int64 `thrift:"offset,1" db:"offset" json:"offset"`
  Limit int64 `thrift:"limit,2" db:"limit" json:"limit"`
  Order TokensListSortField `thrift:"order,3" db:"order" json:"order"`
  Desc bool `thrift:"desc,4" db:"desc" json:"desc"`
  Filters *TokenFilters `thrift:"filters,5" db:"filters" json:"filters"`
}

func NewAPITokensListGetArgs() *APITokensListGetArgs {
  return &APITokensListGetArgs{}
}


func (p *APITokensListGetArgs) GetOffset() int64 {
  return p.Offset
}

func (p *APITokensListGetArgs) GetLimit() int64 {
  return p.Limit
}

func (p *APITokensListGetArgs) GetOrder() TokensListSortField {
  return p.Order
}

func (p *APITokensListGetArgs) GetDesc() bool {
  return p.Desc
}
var APITokensListGetArgs_Filters_DEFAULT *TokenFilters
func (p *APITokensListGetArgs) GetFilters() *TokenFilters {
  if !p.IsSetFilters() {
    return APITokensListGetArgs_Filters_DEFAULT
  }
return p.Filters
}
func (p *APITokensListGetArgs) IsSetFilters() bool {
  return p.Filters != nil
}

func (p *APITokensListGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITokensListGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *APITokensListGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *APITokensListGetArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TokensListSortField(v)
  p.Order = temp
}
  return nil
}

func (p *APITokensListGetArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Desc = v
}
  return nil
}

func (p *APITokensListGetArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.Filters = &TokenFilters{}
  if err := p.Filters.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Filters), err)
  }
  return nil
}

func (p *APITokensListGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokensListGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITokensListGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:offset: ", p), err) }
  return err
}

func (p *APITokensListGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:limit: ", p), err) }
  return err
}

func (p *APITokensListGetArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "order", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:order: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Order)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:order: ", p), err) }
  return err
}

func (p *APITokensListGetArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "desc", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:desc: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Desc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.desc (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:desc: ", p), err) }
  return err
}

func (p *APITokensListGetArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "filters", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:filters: ", p), err) }
  if err := p.Filters.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Filters), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:filters: ", p), err) }
  return err
}

func (p *APITokensListGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITokensListGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITokensListGetResult struct {
  Success *TokensListResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITokensListGetResult() *APITokensListGetResult {
  return &APITokensListGetResult{}
}

var APITokensListGetResult_Success_DEFAULT *TokensListResult_
func (p *APITokensListGetResult) GetSuccess() *TokensListResult_ {
  if !p.IsSetSuccess() {
    return APITokensListGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITokensListGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITokensListGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITokensListGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TokensListResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITokensListGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokensListGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITokensListGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITokensListGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITokensListGetResult(%+v)", *p)
}

// Attributes:
//  - Offset
//  - Limit
//  - OrdCol
//  - Desc
type APIWalletsGetArgs struct {
  Offset int64 `thrift:"offset,1" db:"offset" json:"offset"`
  Limit int64 `thrift:"limit,2" db:"limit" json:"limit"`
  OrdCol int8 `thrift:"ordCol,3" db:"ordCol" json:"ordCol"`
  Desc bool `thrift:"desc,4" db:"desc" json:"desc"`
}

func NewAPIWalletsGetArgs() *APIWalletsGetArgs {
  return &APIWalletsGetArgs{}
}


func (p *APIWalletsGetArgs) GetOffset() int64 {
  return p.Offset
}

func (p *APIWalletsGetArgs) GetLimit() int64 {
  return p.Limit
}

func (p *APIWalletsGetArgs) GetOrdCol() int8 {
  return p.OrdCol
}

func (p *APIWalletsGetArgs) GetDesc() bool {
  return p.Desc
}
func (p *APIWalletsGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIWalletsGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *APIWalletsGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *APIWalletsGetArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.OrdCol = temp
}
  return nil
}

func (p *APIWalletsGetArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Desc = v
}
  return nil
}

func (p *APIWalletsGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletsGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIWalletsGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:offset: ", p), err) }
  return err
}

func (p *APIWalletsGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:limit: ", p), err) }
  return err
}

func (p *APIWalletsGetArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ordCol", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ordCol: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.OrdCol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ordCol (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ordCol: ", p), err) }
  return err
}

func (p *APIWalletsGetArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "desc", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:desc: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Desc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.desc (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:desc: ", p), err) }
  return err
}

func (p *APIWalletsGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIWalletsGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIWalletsGetResult struct {
  Success *WalletsGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIWalletsGetResult() *APIWalletsGetResult {
  return &APIWalletsGetResult{}
}

var APIWalletsGetResult_Success_DEFAULT *WalletsGetResult_
func (p *APIWalletsGetResult) GetSuccess() *WalletsGetResult_ {
  if !p.IsSetSuccess() {
    return APIWalletsGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIWalletsGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIWalletsGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIWalletsGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WalletsGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIWalletsGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WalletsGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIWalletsGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIWalletsGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIWalletsGetResult(%+v)", *p)
}

// Attributes:
//  - Page
type APITrustedGetArgs struct {
  Page int32 `thrift:"page,1" db:"page" json:"page"`
}

func NewAPITrustedGetArgs() *APITrustedGetArgs {
  return &APITrustedGetArgs{}
}


func (p *APITrustedGetArgs) GetPage() int32 {
  return p.Page
}
func (p *APITrustedGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITrustedGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *APITrustedGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TrustedGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITrustedGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "page", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:page: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:page: ", p), err) }
  return err
}

func (p *APITrustedGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITrustedGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APITrustedGetResult struct {
  Success *TrustedGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPITrustedGetResult() *APITrustedGetResult {
  return &APITrustedGetResult{}
}

var APITrustedGetResult_Success_DEFAULT *TrustedGetResult_
func (p *APITrustedGetResult) GetSuccess() *TrustedGetResult_ {
  if !p.IsSetSuccess() {
    return APITrustedGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APITrustedGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APITrustedGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APITrustedGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TrustedGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APITrustedGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TrustedGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APITrustedGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APITrustedGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APITrustedGetResult(%+v)", *p)
}

type APISyncStateGetArgs struct {
}

func NewAPISyncStateGetArgs() *APISyncStateGetArgs {
  return &APISyncStateGetArgs{}
}

func (p *APISyncStateGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APISyncStateGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SyncStateGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APISyncStateGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APISyncStateGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APISyncStateGetResult struct {
  Success *SyncStateResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPISyncStateGetResult() *APISyncStateGetResult {
  return &APISyncStateGetResult{}
}

var APISyncStateGetResult_Success_DEFAULT *SyncStateResult_
func (p *APISyncStateGetResult) GetSuccess() *SyncStateResult_ {
  if !p.IsSetSuccess() {
    return APISyncStateGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APISyncStateGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APISyncStateGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APISyncStateGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SyncStateResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APISyncStateGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SyncStateGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APISyncStateGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APISyncStateGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APISyncStateGetResult(%+v)", *p)
}

// Attributes:
//  - ExecuteMethod
type APIExecuteCountGetArgs struct {
  ExecuteMethod string `thrift:"executeMethod,1" db:"executeMethod" json:"executeMethod"`
}

func NewAPIExecuteCountGetArgs() *APIExecuteCountGetArgs {
  return &APIExecuteCountGetArgs{}
}


func (p *APIExecuteCountGetArgs) GetExecuteMethod() string {
  return p.ExecuteMethod
}
func (p *APIExecuteCountGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIExecuteCountGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ExecuteMethod = v
}
  return nil
}

func (p *APIExecuteCountGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ExecuteCountGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIExecuteCountGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "executeMethod", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:executeMethod: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ExecuteMethod)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.executeMethod (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:executeMethod: ", p), err) }
  return err
}

func (p *APIExecuteCountGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIExecuteCountGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type APIExecuteCountGetResult struct {
  Success *ExecuteCountGetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAPIExecuteCountGetResult() *APIExecuteCountGetResult {
  return &APIExecuteCountGetResult{}
}

var APIExecuteCountGetResult_Success_DEFAULT *ExecuteCountGetResult_
func (p *APIExecuteCountGetResult) GetSuccess() *ExecuteCountGetResult_ {
  if !p.IsSetSuccess() {
    return APIExecuteCountGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *APIExecuteCountGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *APIExecuteCountGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *APIExecuteCountGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecuteCountGetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *APIExecuteCountGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ExecuteCountGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *APIExecuteCountGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *APIExecuteCountGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("APIExecuteCountGetResult(%+v)", *p)
}


