// Code generated by Thrift Compiler (0.14.2). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"credits-go/general"
	"credits-go/api"
)

var _ = general.GoUnusedProtection__
var _ = api.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  ActualFeeGetResult ActualFeeGet(i32 transactionSize)")
  fmt.Fprintln(os.Stderr, "  WalletDataGetResult WalletDataGet(Address address)")
  fmt.Fprintln(os.Stderr, "  WalletIdGetResult WalletIdGet(Address address)")
  fmt.Fprintln(os.Stderr, "  WalletTransactionsCountGetResult WalletTransactionsCountGet(Address address)")
  fmt.Fprintln(os.Stderr, "  WalletBalanceGetResult WalletBalanceGet(Address address)")
  fmt.Fprintln(os.Stderr, "  RoundData RoundDataGet()")
  fmt.Fprintln(os.Stderr, "  AcceptedRequestId WalletsListBalancesGet(Addresses walletAddresses)")
  fmt.Fprintln(os.Stderr, "  WalletBalanceResults WalletsListBalancesResultGet(i64 requestId)")
  fmt.Fprintln(os.Stderr, "  TransactionGetResult TransactionGet(TransactionId transactionId)")
  fmt.Fprintln(os.Stderr, "  TransactionsGetResult TransactionsGet(Address address, i64 offset, i64 limit)")
  fmt.Fprintln(os.Stderr, "  TransactionFlowResult TransactionFlow(Transaction transaction)")
  fmt.Fprintln(os.Stderr, "  TransactionsGetResult TransactionsListGet(i64 offset, i64 limit)")
  fmt.Fprintln(os.Stderr, "  FilteredTransactionsListResult FilteredTransactionsListGet(TransactionsQuery generalQuery)")
  fmt.Fprintln(os.Stderr, "  AcceptedRequestId FilteredTrxsListGet(TransactionsQuery generalQuery)")
  fmt.Fprintln(os.Stderr, "  FilteredTransactionsListResult FilteredTrxsListGetResult(i64 requestId)")
  fmt.Fprintln(os.Stderr, "  SendTransactionResult TransactionSend(Transaction transaction)")
  fmt.Fprintln(os.Stderr, "  TransactionFlowResult TransactionResultGet(i64 requestId)")
  fmt.Fprintln(os.Stderr, "  SendTransactionResult TransactionsListSend(TransactionsList transactions)")
  fmt.Fprintln(os.Stderr, "  TransactionsListFlowResult TransactionsListResultGet(i64 requestId)")
  fmt.Fprintln(os.Stderr, "  PoolHash GetLastHash()")
  fmt.Fprintln(os.Stderr, "  PoolListGetResult PoolListGetStable(i64 sequence, i64 limit)")
  fmt.Fprintln(os.Stderr, "  PoolListGetResult PoolListGet(i64 offset, i64 limit)")
  fmt.Fprintln(os.Stderr, "  PoolInfoGetResult PoolInfoGet(i64 sequence, i64 index)")
  fmt.Fprintln(os.Stderr, "  PoolTransactionsGetResult PoolTransactionsGet(i64 sequence, i64 offset, i64 limit)")
  fmt.Fprintln(os.Stderr, "  StatsGetResult StatsGet()")
  fmt.Fprintln(os.Stderr, "  SmartContractGetResult SmartContractGet(Address address)")
  fmt.Fprintln(os.Stderr, "  SmartContractsListGetResult SmartContractsListGet(Address deployer, i64 offset, i64 limit)")
  fmt.Fprintln(os.Stderr, "  SmartContractAddressesListGetResult SmartContractAddressesListGet(Address deployer)")
  fmt.Fprintln(os.Stderr, "  PoolHash WaitForBlock(PoolHash obsolete)")
  fmt.Fprintln(os.Stderr, "  TransactionId WaitForSmartTransaction(Address smart_public)")
  fmt.Fprintln(os.Stderr, "  SmartContractsListGetResult SmartContractsAllListGet(i64 offset, i64 limit)")
  fmt.Fprintln(os.Stderr, "  TransactionsStateGetResult TransactionsStateGet(Address address,  id)")
  fmt.Fprintln(os.Stderr, "  ContractAllMethodsGetResult ContractAllMethodsGet( byteCodeObjects)")
  fmt.Fprintln(os.Stderr, "  ContractAllMethodsGetResult ContractMethodsGet(Address address)")
  fmt.Fprintln(os.Stderr, "  SmartMethodParamsGetResult SmartMethodParamsGet(Address address, TransactionInnerId id)")
  fmt.Fprintln(os.Stderr, "  SmartContractDataResult SmartContractDataGet(Address address)")
  fmt.Fprintln(os.Stderr, "  SmartContractCompileResult SmartContractCompile(string sourceCode)")
  fmt.Fprintln(os.Stderr, "  TokenBalancesResult TokenBalancesGet(Address address)")
  fmt.Fprintln(os.Stderr, "  TokenTransfersResult TokenTransfersGet(Address token, i64 offset, i64 limit)")
  fmt.Fprintln(os.Stderr, "  TokenTransfersResult TokenTransferGet(Address token, TransactionId id)")
  fmt.Fprintln(os.Stderr, "  TokenTransfersResult TokenTransfersListGet(i64 offset, i64 limit)")
  fmt.Fprintln(os.Stderr, "  TokenTransfersResult TokenWalletTransfersGet(Address token, Address address, i64 offset, i64 limit)")
  fmt.Fprintln(os.Stderr, "  TokenTransactionsResult TokenTransactionsGet(Address token, i64 offset, i64 limit)")
  fmt.Fprintln(os.Stderr, "  TokenInfoResult TokenInfoGet(Address token)")
  fmt.Fprintln(os.Stderr, "  TokenHoldersResult TokenHoldersGet(Address token, i64 offset, i64 limit, TokenHoldersSortField order, bool desc)")
  fmt.Fprintln(os.Stderr, "  TokensListResult TokensListGet(i64 offset, i64 limit, TokensListSortField order, bool desc, TokenFilters filters)")
  fmt.Fprintln(os.Stderr, "  WalletsGetResult WalletsGet(i64 offset, i64 limit, i8 ordCol, bool desc)")
  fmt.Fprintln(os.Stderr, "  TrustedGetResult TrustedGet(i32 page)")
  fmt.Fprintln(os.Stderr, "  SyncStateResult SyncStateGet()")
  fmt.Fprintln(os.Stderr, "  ExecuteCountGetResult ExecuteCountGet(string executeMethod)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := api.NewAPIClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "ActualFeeGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ActualFeeGet requires 1 args")
      flag.Usage()
    }
    tmp0, err251 := (strconv.Atoi(flag.Arg(1)))
    if err251 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.ActualFeeGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "WalletDataGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "WalletDataGet requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    fmt.Print(client.WalletDataGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "WalletIdGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "WalletIdGet requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    fmt.Print(client.WalletIdGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "WalletTransactionsCountGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "WalletTransactionsCountGet requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    fmt.Print(client.WalletTransactionsCountGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "WalletBalanceGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "WalletBalanceGet requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    fmt.Print(client.WalletBalanceGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "RoundDataGet":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "RoundDataGet requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.RoundDataGet(context.Background()))
    fmt.Print("\n")
    break
  case "WalletsListBalancesGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "WalletsListBalancesGet requires 1 args")
      flag.Usage()
    }
    arg256 := flag.Arg(1)
    mbTrans257 := thrift.NewTMemoryBufferLen(len(arg256))
    defer mbTrans257.Close()
    _, err258 := mbTrans257.WriteString(arg256)
    if err258 != nil {
      Usage()
      return
    }
    factory259 := thrift.NewTJSONProtocolFactory()
    jsProt260 := factory259.GetProtocol(mbTrans257)
    argvalue0 := api.NewAddresses()
    err261 := argvalue0.Read(context.Background(), jsProt260)
    if err261 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.WalletsListBalancesGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "WalletsListBalancesResultGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "WalletsListBalancesResultGet requires 1 args")
      flag.Usage()
    }
    argvalue0, err262 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err262 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.WalletsListBalancesResultGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "TransactionGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TransactionGet requires 1 args")
      flag.Usage()
    }
    arg263 := flag.Arg(1)
    mbTrans264 := thrift.NewTMemoryBufferLen(len(arg263))
    defer mbTrans264.Close()
    _, err265 := mbTrans264.WriteString(arg263)
    if err265 != nil {
      Usage()
      return
    }
    factory266 := thrift.NewTJSONProtocolFactory()
    jsProt267 := factory266.GetProtocol(mbTrans264)
    argvalue0 := api.NewTransactionId()
    err268 := argvalue0.Read(context.Background(), jsProt267)
    if err268 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TransactionGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "TransactionsGet":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TransactionsGet requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    argvalue1, err270 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err270 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err271 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err271 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.TransactionsGet(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "TransactionFlow":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TransactionFlow requires 1 args")
      flag.Usage()
    }
    arg272 := flag.Arg(1)
    mbTrans273 := thrift.NewTMemoryBufferLen(len(arg272))
    defer mbTrans273.Close()
    _, err274 := mbTrans273.WriteString(arg272)
    if err274 != nil {
      Usage()
      return
    }
    factory275 := thrift.NewTJSONProtocolFactory()
    jsProt276 := factory275.GetProtocol(mbTrans273)
    argvalue0 := api.NewTransaction()
    err277 := argvalue0.Read(context.Background(), jsProt276)
    if err277 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TransactionFlow(context.Background(), value0))
    fmt.Print("\n")
    break
  case "TransactionsListGet":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "TransactionsListGet requires 2 args")
      flag.Usage()
    }
    argvalue0, err278 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err278 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err279 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err279 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.TransactionsListGet(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "FilteredTransactionsListGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FilteredTransactionsListGet requires 1 args")
      flag.Usage()
    }
    arg280 := flag.Arg(1)
    mbTrans281 := thrift.NewTMemoryBufferLen(len(arg280))
    defer mbTrans281.Close()
    _, err282 := mbTrans281.WriteString(arg280)
    if err282 != nil {
      Usage()
      return
    }
    factory283 := thrift.NewTJSONProtocolFactory()
    jsProt284 := factory283.GetProtocol(mbTrans281)
    argvalue0 := api.NewTransactionsQuery()
    err285 := argvalue0.Read(context.Background(), jsProt284)
    if err285 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FilteredTransactionsListGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "FilteredTrxsListGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FilteredTrxsListGet requires 1 args")
      flag.Usage()
    }
    arg286 := flag.Arg(1)
    mbTrans287 := thrift.NewTMemoryBufferLen(len(arg286))
    defer mbTrans287.Close()
    _, err288 := mbTrans287.WriteString(arg286)
    if err288 != nil {
      Usage()
      return
    }
    factory289 := thrift.NewTJSONProtocolFactory()
    jsProt290 := factory289.GetProtocol(mbTrans287)
    argvalue0 := api.NewTransactionsQuery()
    err291 := argvalue0.Read(context.Background(), jsProt290)
    if err291 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FilteredTrxsListGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "FilteredTrxsListGetResult":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FilteredTrxsListGetResult_ requires 1 args")
      flag.Usage()
    }
    argvalue0, err292 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err292 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FilteredTrxsListGetResult_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "TransactionSend":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TransactionSend requires 1 args")
      flag.Usage()
    }
    arg293 := flag.Arg(1)
    mbTrans294 := thrift.NewTMemoryBufferLen(len(arg293))
    defer mbTrans294.Close()
    _, err295 := mbTrans294.WriteString(arg293)
    if err295 != nil {
      Usage()
      return
    }
    factory296 := thrift.NewTJSONProtocolFactory()
    jsProt297 := factory296.GetProtocol(mbTrans294)
    argvalue0 := api.NewTransaction()
    err298 := argvalue0.Read(context.Background(), jsProt297)
    if err298 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TransactionSend(context.Background(), value0))
    fmt.Print("\n")
    break
  case "TransactionResultGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TransactionResultGet requires 1 args")
      flag.Usage()
    }
    argvalue0, err299 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err299 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TransactionResultGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "TransactionsListSend":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TransactionsListSend requires 1 args")
      flag.Usage()
    }
    arg300 := flag.Arg(1)
    mbTrans301 := thrift.NewTMemoryBufferLen(len(arg300))
    defer mbTrans301.Close()
    _, err302 := mbTrans301.WriteString(arg300)
    if err302 != nil {
      Usage()
      return
    }
    factory303 := thrift.NewTJSONProtocolFactory()
    jsProt304 := factory303.GetProtocol(mbTrans301)
    argvalue0 := api.NewTransactionsList()
    err305 := argvalue0.Read(context.Background(), jsProt304)
    if err305 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TransactionsListSend(context.Background(), value0))
    fmt.Print("\n")
    break
  case "TransactionsListResultGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TransactionsListResultGet requires 1 args")
      flag.Usage()
    }
    argvalue0, err306 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err306 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TransactionsListResultGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "GetLastHash":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetLastHash requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetLastHash(context.Background()))
    fmt.Print("\n")
    break
  case "PoolListGetStable":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PoolListGetStable requires 2 args")
      flag.Usage()
    }
    argvalue0, err307 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err307 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err308 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err308 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.PoolListGetStable(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "PoolListGet":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PoolListGet requires 2 args")
      flag.Usage()
    }
    argvalue0, err309 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err309 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err310 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err310 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.PoolListGet(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "PoolInfoGet":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PoolInfoGet requires 2 args")
      flag.Usage()
    }
    argvalue0, err311 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err311 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err312 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err312 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.PoolInfoGet(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "PoolTransactionsGet":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "PoolTransactionsGet requires 3 args")
      flag.Usage()
    }
    argvalue0, err313 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err313 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err314 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err314 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err315 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err315 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.PoolTransactionsGet(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "StatsGet":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "StatsGet requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.StatsGet(context.Background()))
    fmt.Print("\n")
    break
  case "SmartContractGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SmartContractGet requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    fmt.Print(client.SmartContractGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "SmartContractsListGet":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SmartContractsListGet requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    argvalue1, err318 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err318 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err319 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err319 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SmartContractsListGet(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "SmartContractAddressesListGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SmartContractAddressesListGet requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    fmt.Print(client.SmartContractAddressesListGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "WaitForBlock":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "WaitForBlock requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := api.PoolHash(argvalue0)
    fmt.Print(client.WaitForBlock(context.Background(), value0))
    fmt.Print("\n")
    break
  case "WaitForSmartTransaction":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "WaitForSmartTransaction requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    fmt.Print(client.WaitForSmartTransaction(context.Background(), value0))
    fmt.Print("\n")
    break
  case "SmartContractsAllListGet":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SmartContractsAllListGet requires 2 args")
      flag.Usage()
    }
    argvalue0, err323 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err323 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err324 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err324 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SmartContractsAllListGet(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "TransactionsStateGet":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "TransactionsStateGet requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    arg326 := flag.Arg(2)
    mbTrans327 := thrift.NewTMemoryBufferLen(len(arg326))
    defer mbTrans327.Close()
    _, err328 := mbTrans327.WriteString(arg326)
    if err328 != nil { 
      Usage()
      return
    }
    factory329 := thrift.NewTJSONProtocolFactory()
    jsProt330 := factory329.GetProtocol(mbTrans327)
    containerStruct1 := api.NewAPITransactionsStateGetArgs()
    err331 := containerStruct1.ReadField2(context.Background(), jsProt330)
    if err331 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ID
    value1 := argvalue1
    fmt.Print(client.TransactionsStateGet(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "ContractAllMethodsGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ContractAllMethodsGet requires 1 args")
      flag.Usage()
    }
    arg332 := flag.Arg(1)
    mbTrans333 := thrift.NewTMemoryBufferLen(len(arg332))
    defer mbTrans333.Close()
    _, err334 := mbTrans333.WriteString(arg332)
    if err334 != nil { 
      Usage()
      return
    }
    factory335 := thrift.NewTJSONProtocolFactory()
    jsProt336 := factory335.GetProtocol(mbTrans333)
    containerStruct0 := api.NewAPIContractAllMethodsGetArgs()
    err337 := containerStruct0.ReadField1(context.Background(), jsProt336)
    if err337 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ByteCodeObjects
    value0 := argvalue0
    fmt.Print(client.ContractAllMethodsGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "ContractMethodsGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ContractMethodsGet requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    fmt.Print(client.ContractMethodsGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "SmartMethodParamsGet":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SmartMethodParamsGet requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    argvalue1, err340 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err340 != nil {
      Usage()
      return
    }
    value1 := api.TransactionInnerId(argvalue1)
    fmt.Print(client.SmartMethodParamsGet(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "SmartContractDataGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SmartContractDataGet requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    fmt.Print(client.SmartContractDataGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "SmartContractCompile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SmartContractCompile requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SmartContractCompile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "TokenBalancesGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TokenBalancesGet requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    fmt.Print(client.TokenBalancesGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "TokenTransfersGet":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TokenTransfersGet requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    argvalue1, err345 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err345 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err346 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err346 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.TokenTransfersGet(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "TokenTransferGet":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "TokenTransferGet requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    arg348 := flag.Arg(2)
    mbTrans349 := thrift.NewTMemoryBufferLen(len(arg348))
    defer mbTrans349.Close()
    _, err350 := mbTrans349.WriteString(arg348)
    if err350 != nil {
      Usage()
      return
    }
    factory351 := thrift.NewTJSONProtocolFactory()
    jsProt352 := factory351.GetProtocol(mbTrans349)
    argvalue1 := api.NewTransactionId()
    err353 := argvalue1.Read(context.Background(), jsProt352)
    if err353 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.TokenTransferGet(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "TokenTransfersListGet":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "TokenTransfersListGet requires 2 args")
      flag.Usage()
    }
    argvalue0, err354 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err354 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err355 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err355 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.TokenTransfersListGet(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "TokenWalletTransfersGet":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "TokenWalletTransfersGet requires 4 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := general.Address(argvalue1)
    argvalue2, err358 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err358 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err359 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err359 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.TokenWalletTransfersGet(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "TokenTransactionsGet":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TokenTransactionsGet requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    argvalue1, err361 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err361 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err362 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err362 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.TokenTransactionsGet(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "TokenInfoGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TokenInfoGet requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    fmt.Print(client.TokenInfoGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "TokenHoldersGet":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "TokenHoldersGet requires 5 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := general.Address(argvalue0)
    argvalue1, err365 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err365 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err366 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err366 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := api.TokenHoldersSortField(tmp3)
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    fmt.Print(client.TokenHoldersGet(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "TokensListGet":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "TokensListGet requires 5 args")
      flag.Usage()
    }
    argvalue0, err368 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err368 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err369 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err369 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := api.TokensListSortField(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    arg371 := flag.Arg(5)
    mbTrans372 := thrift.NewTMemoryBufferLen(len(arg371))
    defer mbTrans372.Close()
    _, err373 := mbTrans372.WriteString(arg371)
    if err373 != nil {
      Usage()
      return
    }
    factory374 := thrift.NewTJSONProtocolFactory()
    jsProt375 := factory374.GetProtocol(mbTrans372)
    argvalue4 := api.NewTokenFilters()
    err376 := argvalue4.Read(context.Background(), jsProt375)
    if err376 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.TokensListGet(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "WalletsGet":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "WalletsGet requires 4 args")
      flag.Usage()
    }
    argvalue0, err377 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err377 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err378 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err378 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err379 := (strconv.Atoi(flag.Arg(3)))
    if err379 != nil {
      Usage()
      return
    }
    argvalue2 := int8(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.WalletsGet(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "TrustedGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TrustedGet requires 1 args")
      flag.Usage()
    }
    tmp0, err381 := (strconv.Atoi(flag.Arg(1)))
    if err381 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.TrustedGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "SyncStateGet":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "SyncStateGet requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.SyncStateGet(context.Background()))
    fmt.Print("\n")
    break
  case "ExecuteCountGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteCountGet requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ExecuteCountGet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
